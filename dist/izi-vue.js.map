{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///izi-vue.js","webpack:///webpack/bootstrap b6926bb115919b0e408c","webpack:///./src/main/js/izi-vue.js","webpack:///./src/main/js/vue-plugin/index.js","webpack:///../izi-js/dist/izi-js-debug.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///./src/main/js/vue-plugin/MainViewFactory.js","webpack:///./~/babel-runtime/helpers/classCallCheck.js","webpack:///./~/babel-runtime/helpers/createClass.js","webpack:///./~/babel-runtime/core-js/object/define-property.js","webpack:///./~/babel-runtime/~/core-js/library/fn/object/define-property.js","webpack:///./~/babel-runtime/~/core-js/library/modules/$.js","webpack:///./src/main/js/vue-plugin/vueDataInjectorFactory.js","webpack:///./src/main/js/vue-plugin/wireMeMixin.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_vuePlugin","_vuePlugin2","Object","defineProperty","value","_iziJsDebug","_iziJsDebug2","_MainViewFactory","_MainViewFactory2","_vueDataInjectorFactory","_vueDataInjectorFactory2","_wireMeMixin","_wireMeMixin2","VuePlugin","Vue","_ref","arguments","length","undefined","_ref$vueDataInjector","vueDataInjector","dataInjector","mixin","izi","MainView","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","amdFactory","Izi","ioc","bean","utils","model","behavior","impl","binding","nested","events","queue","isDebug","forEach","byForEach","array","fn","scope","Array","prototype","byLoop","i","ln","hasForEach","typeOf","toString","Error","OnWidget","config","startObserving","me","observers","eventConfig","isKeyboardEventConfig","widget","iziObserveKeyStroke","push","action","eventOptions","observeKeyStroke","isEventConfig","iziObserveWidget","observeWidget","getAction","getScope","getEvents","getEventOptions","getDispatcher","getImpl","stopObserving","observer","WhenWidget","on","withDispatcher","OnModel","triggerAction","apply","modelProperties","getModelProperties","bindings","property","iziApi","bind","executeAtStartup","valueOf","to","unbind","WhenModel","PREVENT_DEFAULT","STOP_PROPAGATION","BOTH","EventConfig","eventType","modifiers","shift","ctrl","alt","stopEventType","stopEvent","stopPropagation","preventDefault","isExpectedShiftKey","isExpectedCtrlKey","isExpectedAltKey","getEventType","shouldStopPropagation","shouldPreventDefault","matchesModifiers","shiftKey","ctrlKey","altKey","Perform","when","arg","argType","withEvents","withEventOptions","whenChangeOf","properties","withModelProperties","slice","target","registrar","register","unregister","Config","dispatcher","withAction","withScope","defaultPerformFunction","delegatedIn","configs","registerBehaviors","hasOwnProperty","object","mergeObjects","copyProperties","source","key","result","indexOf","byIndexOf","item","hasIndexOf","removeItem","start","splice","options","auto","debug","triggerProperties","withOptions","withBindings","withCallerLineProvider","callerLineProvider","withSource","withSourceProperties","sourceProperties","constructor","withTarget","withTargetProperty","targetProperty","withFormatter","formatter","addTriggerProperty","addBinding","removeBinding","curry","findClosure","factories","args","closure","trim","text","replace","logImpl","console","log","onlyOnceError","INVALID_VALUE","Binding","sourceReaders","targetReader","targetWriter","getCallerLine","registerReadersAndWriters","transferValue","getFormattedValues","sourceReader","values","debugBinding","sourceValue","callerLine","targetValue","error","getChangeObserver","sourceProperty","transferValueFn","changeObservers","allowNotWatchable","valueReaders","valueWriters","e","allTriggerProperties","concat","changeObserver","reverseBinding","twoWay","reverseConfig","execute","ValueOf","textOf","selectedItemsOf","through","onChangeOf","getCallerLineProvider","stackOffset","stack","callStack","split","index","navigator","userAgent","Bind","_valueOf","cloneConfig","unbindAll","executeAll","createObserver","matcher","iziObserveProperty","customPropertyObserver","createReader","reader","capitalize","charAt","toUpperCase","substr","getterOf","name","readByGet","get","readByCapitalizedGetter","readByFunction","readFromProperty","readFromOwnedProperty","createWriter","writer","writeBySet","set","writeByCapitalizedSetter","writeToProperty","writeToOwnedProperty","writeByFunction","writeToFunction","isNestedProperty","nestedWatcher","iziNestedWatchers","onValueChanged","nestedObserver","TargetFinder","path","readers","pop","findFor","currentObject","TargetWriter","writers","writeValue","nestedWriter","targetFinder","inherit","Child","Parent","Proxy","upper","every","byEvery","len","hasEvery","Observable","listeners","findListeners","type","dispatchEvent","listener","addListener","removeListener","listenerToRemove","extractFirstField","field","extractNextFields","NestedWatcher","bindingImpl","nextFields","child","fireChange","setSource","callback","handler","valueChanged","watchForCurrentValue","currentValue","isWatchableNestedProperty","nestedReader","nestedImpl","TimeoutGuard","onTaskStarted","startCountDown","onTaskFinished","stopCountDown","event","timeout","timeoutForTask","task","timeoutId","setTimeout","timeoutTask","currentTaskTimeouted","clearTimeout","some","bySome","TypeError","hasSome","Map","items","getItemOrCreate","getItem","remove","getKeys","keys","getKeysOf","getValues","count","countValues","createItem","foundItem","SynchronizedFunction","originalFunction","logLabel","synchronizedFunction","SynchronizedOnEvent","perform","doSynchronized","SynchronizedResponder","responder","resultFunctionName","errorFunctionName","synchronizedResponder","Synchronizer","synchronizations","awaitedTasks","cancelQueue","cancel","onCallback","nonSynchronized","obtainTask","synchronization","recordSynchronization","onEvent","getCurrentTaskIndex","countTasks","removeSynchronization","pendingSynchronizationsOnTask","countSynchronizations","taskSynchronized","proceedClosure","currentTask","hasPendingSynchronizations","afterSynchronizingTaskCall","taskTimeout","synchronizationsToRemove","GenericTask","functionToExecute","formatTimeStamp","now","Date","padding","getHours","getMinutes","getSeconds","getMilliseconds","number","join","queueUniqueId","Queue","defaultConfig","defaultTimeout","originalQueue","createEventDispatcher","synchronizer","pushAll","isExecutedTask","proceed","dispatchTaskEvent","clearAndProceed","onTaskTimeouted","onQueueFinished","onQueueCanceled","tasksOrFunctions","taskOrFunction","pushFunction","pushTask","isEmptyQueue","executeSynchronously","awaitSynchronizerOrProceed","addStatistics","totalTasks","message","arrayContains","ClassNotFound","classString","getClassByName","globals","currentPart","parts","part","nextPart","Class","Strategy","Clazz","_resolveClass","createStrategy","getArguments","getProperties","props","getClazz","withArgs","withProps","matchesById","selfId","otherId","matchesByType","injectDependenciesOnProperties","context","prop","iziInjectingInProgress","injection","isIziInjection","injector","resolveBean","BeanBuilder","strategy","createdBeans","init","beansContext","create","iziContext","iziContextCalled","iziInit","iziInitCalled","destroyCreatedBeans","createdBean","iziDestroy","preDestroyCreatedBeans","iziPreDestroy","matches","idOrType","getArgumentsDependencies","findArgumentsDependencies","results","findBeanBuilder","InstanceStrategy","instance","NoBeanMatched","beanIdOrType","normalizeBeans","beans","mergeBeans","beansCollection","iterateOwnProperties","createBeansBuilders","beansBuilders","beanId","beanConfig","beanBuilder","SingletonStrategy","findCircularDependencies","visitDependencies","visitedBuilder","dependencies","dependency","initBean","initAllBeans","beansToCreate","beanToCreate","createPreDestroyEvent","isPrevented","isDestroyPrevented","preventDestroy","handleDestroyFromParentContext","handlePreDestroy","childrenDispatcher","shouldDestroy","doPreDestroy","handleDestroy","parentDispatcher","doDestroy","parentContext","destroyDispatcher","BeansContext","initContext","getBean","wire","objectContainingIziInjects","destroy","preDestroyEvent","foundBuilder","defaultInjector","defaultDependencyConverter","Injection","dependencyConverter","getBeanNotFoundMessage","beanName","by","createInstance","resolveArguments","applyProps","a","argsCount","LazySingletonStrategy","PrototypeStrategy","setterOf","normalizeFields","fields","getter","setter","hasToPlainObjectMethod","toPlainObject","implementGetterAndSetter","createInitialData","data","defaultValue","initialValue","Model","isIziModel","propertyName","equals","dispatchChange","newValue","oldValue","val1","val2","equalsArray","arr1","arr2","propertyChangeCallback","propertyChangeEvent","arrayResult","circularCopyProp","wasVisited","cache","KeyboardConfig","expectedKeyCode","keyCode","getExpectedKeyCode","BACKSPACE","TAB","NUM_CENTER","ENTER","RETURN","SHIFT","CTRL","ALT","PAUSE","CAPS_LOCK","ESC","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","UP","RIGHT","DOWN","PRINT_SCREEN","INSERT","DELETE","ZERO","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","NUM_ZERO","NUM_ONE","NUM_TWO","NUM_THREE","NUM_FOUR","NUM_FIVE","NUM_SIX","NUM_SEVEN","NUM_EIGHT","NUM_NINE","NUM_MULTIPLY","NUM_PLUS","NUM_MINUS","NUM_PERIOD","NUM_DIVISION","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","Events","keyboardEvent","keyDown","keyUp","afterPrint","beforePrint","beforeOnLoad","hasChange","load","offline","line","pageHide","pageShow","popState","redo","resize","storage","undo","unload","blur","change","contextMenu","focus","formChange","formInput","input","invalid","reset","select","submit","click","dblClick","drag","dragEnd","dragEnter","dragLeave","dragOver","dragStart","drop","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","mouseWheel","scroll","abort","canPlay","canPlayThrough","durationChange","emptied","ended","loadedData","loadedMetaData","loadStart","pause","play","playing","progress","rateChange","readyStateChange","seeked","seeking","stalled","suspend","timeUpdate","volumeChange","waiting","touchStart","touchMove","touchEnd","touchCancel","touchEnter","touchLave","gestureStart","gestureChange","gestureEnd","orientationChange","initFramework","framework","registerBehaviorImpl","registerBindingImpl","registerQueueImpl","enableCompatibility","sanityCheckMethods","method","frameworks","Api","_framework","bakeBeans","instantiate","clazz","lazy","protoOf","inject","functionOrBehaviorOrRegistrar","modelOf","newInstance","sandboxed","registerFramework","vendor","__webpack_amd_options__","MainViewFactory","_ref$replace","component","el","_classCallCheck3","requireOption","_createClass3","vueInstance","_createVueInstance","$destroy","template","components","view-component","izi.wireMe","_classCallCheck2","_createClass2","Constructor","_defineProperty","_defineProperty2","defineProperties","descriptor","enumerable","configurable","writable","protoProps","staticProps","$","it","desc","setDesc","$Object","getProto","getPrototypeOf","isEnum","propertyIsEnumerable","getDesc","getOwnPropertyDescriptor","setDescs","getNames","getOwnPropertyNames","getSymbols","getOwnPropertySymbols","each","vueDataInjectorFactory","__ob__","$set","unwrap$optionsIziInject","$options","iziInject","unwrapDataInjection","moveInjectionsToVueInstance","created","$dispatch"],"mappings":"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","file":"izi-vue.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"izi\"] = factory();\n\telse\n\t\troot[\"izi\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"izi\"] = factory();\n\telse\n\t\troot[\"izi\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _vuePlugin = __webpack_require__(1);\n\t\n\tvar _vuePlugin2 = _interopRequireDefault(_vuePlugin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tmodule.exports = _vuePlugin2.default;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _iziJsDebug = __webpack_require__(2);\n\t\n\tvar _iziJsDebug2 = _interopRequireDefault(_iziJsDebug);\n\t\n\tvar _MainViewFactory = __webpack_require__(4);\n\t\n\tvar _MainViewFactory2 = _interopRequireDefault(_MainViewFactory);\n\t\n\tvar _vueDataInjectorFactory = __webpack_require__(10);\n\t\n\tvar _vueDataInjectorFactory2 = _interopRequireDefault(_vueDataInjectorFactory);\n\t\n\tvar _wireMeMixin = __webpack_require__(11);\n\t\n\tvar _wireMeMixin2 = _interopRequireDefault(_wireMeMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t_iziJsDebug2.default.VuePlugin = function (Vue) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    var _ref$vueDataInjector = _ref.vueDataInjector;\n\t    var dataInjector = _ref$vueDataInjector === undefined ? (0, _vueDataInjectorFactory2.default)(Vue) : _ref$vueDataInjector;\n\t\n\t    Vue.mixin((0, _wireMeMixin2.default)(_iziJsDebug2.default, dataInjector));\n\t\n\t    Vue.izi = {\n\t        vueDataInjector: dataInjector,\n\t        MainView: (0, _MainViewFactory2.default)(Vue)\n\t    };\n\t};\n\t\n\texports.default = _iziJsDebug2.default;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n\t * The MIT License (MIT)\r\n\t *\r\n\t * Copyright (c) 2014 izi-js contributors\r\n\t *\r\n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n\t * of this software and associated documentation files (the \"Software\"), to deal\r\n\t * in the Software without restriction, including without limitation the rights\r\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\t * copies of the Software, and to permit persons to whom the Software is\r\n\t * furnished to do so, subject to the following conditions:\r\n\t *\r\n\t * The above copyright notice and this permission notice shall be included in all\r\n\t * copies or substantial portions of the Software.\r\n\t *\r\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\t * SOFTWARE.\r\n\t */\r\n\t(function (global) {\r\n\t    function amdFactory() {\r\n\t\r\n\tvar izi,\r\n\t    Izi = {\r\n\t        ioc: {\r\n\t            bean: {}\r\n\t        },\r\n\t        utils: {},\r\n\t        model: {},\r\n\t        behavior: {\r\n\t            impl: {}\r\n\t        },\r\n\t        binding: {\r\n\t            impl: {\r\n\t                nested: {}\r\n\t            }\r\n\t        },\r\n\t        events: {\r\n\t        },\r\n\t        queue: {\r\n\t            impl: {}\r\n\t        }\r\n\t    };\r\n\t// #ifdef DEBUG\r\n\tIzi.isDebug = true;\r\n\t// #endif\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Array} array\r\n\t     * @param {Function} item\r\n\t     * @param {Object} scope\r\n\t     */\r\n\t    module.utils.forEach = (function () {\r\n\t\r\n\t        function byForEach(array, fn, scope) {\r\n\t            Array.prototype.forEach.call(array, fn, scope);\r\n\t        }\r\n\t\r\n\t        function byLoop(array, fn, scope) {\r\n\t            var i,\r\n\t                ln = array.length;\r\n\t\r\n\t            for (i = 0; i < ln; i = i + 1) {\r\n\t                fn.call(scope, array[i], i, array);\r\n\t            }\r\n\t        }\r\n\t\r\n\t        function hasForEach() {\r\n\t            return (typeof Array.prototype.forEach) === 'function';\r\n\t        }\r\n\t\r\n\t        return hasForEach() ? byForEach : byLoop;\r\n\t    }());\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @private\r\n\t     * @param value\r\n\t     * @return {String}\r\n\t     */\r\n\t    module.utils.typeOf = function (value) {\r\n\t        if (value === undefined) {\r\n\t            return 'undefined';\r\n\t        } else if (value === null) {\r\n\t            return 'null';\r\n\t        }\r\n\t\r\n\t        switch (typeof value)  {\r\n\t            case 'string':\r\n\t                return 'String';\r\n\t            case 'number':\r\n\t                return 'Number';\r\n\t            case 'boolean':\r\n\t                return 'Boolean';\r\n\t            case 'function':\r\n\t                return 'Function';\r\n\t        }\r\n\t\r\n\t        switch (Object.prototype.toString.call(value)) {\r\n\t            case '[object Array]':\r\n\t                return 'Array';\r\n\t            case '[object Date]':\r\n\t                return 'Date';\r\n\t            case '[object RegExp]':\r\n\t                return 'RegExp';\r\n\t            case '[object Boolean]':\r\n\t                return 'Boolean';\r\n\t            case '[object Number]':\r\n\t                return 'Number';\r\n\t        }\r\n\t\r\n\t        if (typeof value === 'object') {\r\n\t            return 'Object';\r\n\t        } else {\r\n\t            throw new Error(\"Couldn't find type of given value\");\r\n\t        }\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/forEach.js\r\n\t * @requires ../utils/typeOf.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * After <code>izi.perform(behavior).when('click').on(widget)...</code> behavior API\r\n\t     * @class Izi.behavior.OnWidget\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.behavior.Config} config\r\n\t     */\r\n\t    var OnWidget = function Izi_behavior_OnWidget(config) {\r\n\t        var action = config.getAction(),\r\n\t            scope = config.getScope(),\r\n\t            events = config.getEvents(),\r\n\t            eventOptions = config.getEventOptions(),\r\n\t            widget = config.getDispatcher(),\r\n\t            impl = config.getImpl(),\r\n\t            me = this;\r\n\t\r\n\t\r\n\t        function startObserving() {\r\n\t            me.observers = [];\r\n\t\r\n\t            module.utils.forEach(events, function (eventConfig) {\r\n\t\r\n\t                if (eventConfig.isKeyboardEventConfig) {\r\n\t                    if (widget.iziObserveKeyStroke) {\r\n\t                        me.observers.push(widget.iziObserveKeyStroke(eventConfig, action, scope, eventOptions));\r\n\t                    } else {\r\n\t                        me.observers.push(impl.observeKeyStroke(widget, eventConfig, action, scope, eventOptions));\r\n\t                    }\r\n\t\r\n\t                } else if (eventConfig.isEventConfig) {\r\n\t                    if (widget.iziObserveWidget) {\r\n\t                        me.observers.push(widget.iziObserveWidget(eventConfig, action, scope, eventOptions));\r\n\t                    } else {\r\n\t                        me.observers.push(impl.observeWidget(widget, eventConfig, action, scope, eventOptions));\r\n\t                    }\r\n\t\r\n\t                } else if (module.utils.typeOf(eventConfig) === \"Function\") {\r\n\t                    me.observers.push(eventConfig(widget, action, scope, eventOptions));\r\n\t\r\n\t                } else {\r\n\t                    throw new Error(\"Incorrect event type. Expecting izi.event.* or 'eventType' or function(target, action, scope, eventOptions)\");\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t\r\n\t        startObserving();\r\n\t        config.behavior = this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Stops observing the widget\r\n\t     * @member Izi.behavior.OnWidget\r\n\t     */\r\n\t    OnWidget.prototype.stopObserving = function () {\r\n\t        module.utils.forEach(this.observers, function (observer) {\r\n\t            observer();\r\n\t        });\r\n\t    };\r\n\t\r\n\t    module.behavior.OnWidget = OnWidget;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires OnWidget.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * After `izi.perform(behavior).when('click')...` behavior API\r\n\t     * @class Izi.behavior.WhenWidget\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.behavior.Config} config\r\n\t     */\r\n\t    var WhenWidget = function Izi_behavior_WhenWidget(config) {\r\n\t        this.config = config;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Widget declaration. You can pass directly widget instance or object containing widget on **delegatedIn** property.\r\n\t     *\r\n\t     *     var showMessage = new ShowMessage();\r\n\t     *     var button = new Button();\r\n\t     *     var wrapper = {\r\n\t     *         delegatedIn: button\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.perform(showMessage).when('click').on(button);\r\n\t     *\r\n\t     *     // will work also for:\r\n\t     *     izi.perform(showMessage).when('click').on(wrapper);\r\n\t     *\r\n\t     *\r\n\t     * @member Izi.behavior.WhenWidget\r\n\t     * @param {*} widget Widget that should be observed.\r\n\t     * @return {Izi.behavior.OnWidget}\r\n\t     */\r\n\t    WhenWidget.prototype.on = function (widget) {\r\n\t        return new module.behavior.OnWidget(this.config.withDispatcher(widget));\r\n\t    };\r\n\t\r\n\t    module.behavior.WhenWidget = WhenWidget;\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/forEach.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * After <code>izi.perform(behavior).whenChangeOf('property1', 'property2').on(model)...</code> behavior API\r\n\t     * @class Izi.behavior.OnModel\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.behavior.Config} config\r\n\t     */\r\n\t    module.behavior.OnModel = function Izi_behavior_OnModel(config) {\r\n\t        var action = config.getAction(),\r\n\t            scope = config.getScope(),\r\n\t            model = config.getDispatcher(),\r\n\t            modelProperties = config.getModelProperties(),\r\n\t            bindings = [];\r\n\t\r\n\t        config.behavior = this;\r\n\t\r\n\t        function triggerAction() {\r\n\t            action.apply(scope, arguments);\r\n\t        }\r\n\t\r\n\t        module.utils.forEach(modelProperties, function (property) {\r\n\t            bindings.push(config.iziApi.bind({executeAtStartup: false}).valueOf(model, property).to(triggerAction));\r\n\t        });\r\n\t\r\n\t        /**\r\n\t         * Stops observing the model\r\n\t         */\r\n\t        this.stopObserving = function () {\r\n\t            module.utils.forEach(bindings, function (binding) {\r\n\t                binding.unbind();\r\n\t            });\r\n\t        };\r\n\t    };\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires OnModel.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * After `izi.perform(behavior).whenChangeOf('firstName')...` behavior API\r\n\t     * @class Izi.behavior.WhenModel\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.behavior.Config} config\r\n\t     */\r\n\t    var WhenModel = function Izi_behavior_WhenModel(config) {\r\n\t        this.config = config;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Model declaration. You can pass directly model instance or object containing model on <strong>delegatedIn</strong> property.\r\n\t     *\r\n\t     *     var showFullName = new ShowFullName();\r\n\t     *     var model = new UserModel();\r\n\t     *     var wrapper = {\r\n\t     *         delegatedIn: model\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.perform(showFullName).whenChangeOf('firstName', 'lastName').on(model);\r\n\t     *\r\n\t     *     // will work also for:\r\n\t     *     izi.perform(showFullName).whenChangeOf('firstName', 'lastName').on(wrapper);\r\n\t     *\r\n\t     * @member Izi.behavior.WhenModel\r\n\t     * @param {Object} model Model that should be observed for properties changes.\r\n\t     * @return {Izi.behavior.OnModel}\r\n\t     */\r\n\t    WhenModel.prototype.on = function (model) {\r\n\t        return new module.behavior.OnModel(this.config.withDispatcher(model));\r\n\t    };\r\n\t\r\n\t    module.behavior.WhenModel = WhenModel;\r\n\t\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t\r\n\t    var PREVENT_DEFAULT = 'preventDefault',\r\n\t        STOP_PROPAGATION = 'stopPropagation',\r\n\t        BOTH = 'both';\r\n\t\r\n\t\r\n\t    /**\r\n\t     * @class Izi.events.EventConfig\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {String} [eventType]\r\n\t     */\r\n\t    var EventConfig = function Izi_events_EventConfig(eventType) {\r\n\t\r\n\t        /**\r\n\t         * @private\r\n\t         * @member Izi.events.EventConfig\r\n\t         * @type {String}\r\n\t         */\r\n\t        this.eventType = eventType;\r\n\t\r\n\t        /**\r\n\t         * @private\r\n\t         * @member Izi.events.EventConfig\r\n\t         * @type {Object}\r\n\t         */\r\n\t        this.modifiers = {\r\n\t            shift: false,\r\n\t            ctrl: false,\r\n\t            alt: false\r\n\t        };\r\n\t\r\n\t        /**\r\n\t         * @private\r\n\t         * @member Izi.events.EventConfig\r\n\t         * @type {String}\r\n\t         */\r\n\t        this.stopEventType = undefined;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @private\r\n\t     * @type {Boolean}\r\n\t     */\r\n\t    EventConfig.prototype.isEventConfig = true;\r\n\t\r\n\t    /**\r\n\t     * Setup if SHIFT key is expected to be pressed during user interaction\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    EventConfig.prototype.shift = function () {\r\n\t        this.modifiers.shift = true;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup if CTRL key is expected to be pressed during user interaction\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    EventConfig.prototype.ctrl = function () {\r\n\t        this.modifiers.ctrl = true;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup if ALT key is expected to be pressed during user interaction\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    EventConfig.prototype.alt = function () {\r\n\t        this.modifiers.alt = true;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup if stopPropagation() and preventDefaults() should be called on triggered event\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    EventConfig.prototype.stopEvent = function () {\r\n\t        this.stopEventType = BOTH;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup if stopPropagation() should be called on triggered event\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    EventConfig.prototype.stopPropagation = function () {\r\n\t        this.stopEventType = STOP_PROPAGATION;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup if preventDefaults() should be called on triggered event\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    EventConfig.prototype.preventDefault = function () {\r\n\t        this.stopEventType = PREVENT_DEFAULT;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Returns flag for SHIFT key modifier\r\n\t     * @private\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Boolean}\r\n\t     */\r\n\t    EventConfig.prototype.isExpectedShiftKey = function () {\r\n\t        return this.modifiers.shift;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Returns flag for CTRL key modifier\r\n\t     * @private\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Boolean}\r\n\t     */\r\n\t    EventConfig.prototype.isExpectedCtrlKey = function () {\r\n\t        return this.modifiers.ctrl;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Returns flag for ALT key modifier\r\n\t     * @private\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Boolean}\r\n\t     */\r\n\t    EventConfig.prototype.isExpectedAltKey = function () {\r\n\t        return this.modifiers.alt;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Returns event type\r\n\t     * @private\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {String}\r\n\t     */\r\n\t    EventConfig.prototype.getEventType = function () {\r\n\t        return this.eventType;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Returns if event should be stopped for further propagation\r\n\t     * @private\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Boolean}\r\n\t     */\r\n\t    EventConfig.prototype.shouldStopPropagation = function () {\r\n\t        return this.stopEventType === STOP_PROPAGATION || this.stopEventType === BOTH;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Returns if event should prevent default behavior\r\n\t     * @private\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @return {Boolean}\r\n\t     */\r\n\t    EventConfig.prototype.shouldPreventDefault = function () {\r\n\t        return this.stopEventType === PREVENT_DEFAULT || this.stopEventType === BOTH;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Returns true if all given modifiers matches configured modifiers.\r\n\t     * @member Izi.events.EventConfig\r\n\t     * @private\r\n\t     * @param {Boolean} shiftKey\r\n\t     * @param {Boolean} ctrlKey\r\n\t     * @param {Boolean} altKey\r\n\t     * @return {Boolean}\r\n\t     */\r\n\t    EventConfig.prototype.matchesModifiers = function (shiftKey, ctrlKey, altKey) {\r\n\t        return this.isExpectedShiftKey() === shiftKey &&\r\n\t               this.isExpectedCtrlKey() === ctrlKey &&\r\n\t               this.isExpectedAltKey() === altKey;\r\n\t    };\r\n\t\r\n\t    module.events.EventConfig = EventConfig;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires WhenWidget.js\r\n\t * @requires WhenModel.js\r\n\t * @requires ../utils/typeOf.js\r\n\t * @requires ../events/EventConfig.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * After <code>izi.perform(behavior)...</code> behavior API\r\n\t     * @class Izi.behavior.Perform\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.behavior.Config} config\r\n\t     */\r\n\t    var Perform = function Izi_behavior_Perform(config) {\r\n\t        this.config = config;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Specifies when your behavior should be executed. This method accept multiple inputs:\r\n\t     *\r\n\t     * String:\r\n\t     *\r\n\t     *     izi.perform(behavior).when('click').on(button);\r\n\t     *\r\n\t     * EventConfig:\r\n\t     *\r\n\t     *     izi.perform(behavior).when(izi.events.click().shift()).on(button);\r\n\t     *     izi.perform(behavior).when(izi.events.keyDown().F4().shift().stopEvent()).on(document);\r\n\t     *\r\n\t     * Multiple events:\r\n\t     *\r\n\t     *     izi.perform(behavior).when('mouseup', 'mousedown').on(button);\r\n\t     *     izi.perform(behavior).when(izi.events.click(), izi.events.keyDown().ENTER()).on(button);\r\n\t     *\r\n\t     * Event registration function: (since 1.5.0)\r\n\t     *\r\n\t     *     // target - is a button in this example\r\n\t     *     // action - is a reference to `behavior.perform` function\r\n\t     *     // scope - is a reference to `behavior`\r\n\t     *     function click(target, action, scope, eventOptions) {\r\n\t     *\r\n\t     *         // You may use any custom registration here\r\n\t     *         target.addListener(\"click\", action, scope);\r\n\t     *\r\n\t     *         return function stopObserving() {\r\n\t     *\r\n\t     *             // You must return function that will unregister listener\r\n\t     *             target.removeListener(\"click\", action, scope);\r\n\t     *         }\r\n\t     *     }\r\n\t     *     izi.perform(behavior).when(click).on(button);\r\n\t     *\r\n\t     * @member Izi.behavior.Perform\r\n\t     * @param {String.../Izi.events.EventConfig.../Function...|Object...} events Event type which should be observed for triggering behavior\r\n\t     * or event config created by izi.events.click() etc...\r\n\t     * @param {Object} [eventOptions] Optionally you can pass also event options if your framework implementation supports it.\r\n\t     * @return {Izi.behavior.WhenWidget}\r\n\t     */\r\n\t    Perform.prototype.when = function () {\r\n\t        var events = [],\r\n\t            eventOptions,\r\n\t            arg, argType;\r\n\t\r\n\t        for (var i = arguments.length - 1; i >= 0; i--) {\r\n\t            arg = arguments[i];\r\n\t            argType = module.utils.typeOf(arg);\r\n\t\r\n\t            if (argType === 'String') {\r\n\t                events.push(new module.events.EventConfig(arg));\r\n\t            } else if (arg.isEventConfig || argType === 'Function') {\r\n\t                events.push(arg);\r\n\t            } else if (argType === 'Object') {\r\n\t                eventOptions = arg;\r\n\t            } else {\r\n\t                throw new Error(\"Incorrect event types/options arguments\");\r\n\t            }\r\n\t        }\r\n\t\r\n\t        return new module.behavior.WhenWidget(this.config.withEvents(events).withEventOptions(eventOptions));\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Model properties names which should be observed for changes\r\n\t     * @member Izi.behavior.Perform\r\n\t     * @param {String...} properties\r\n\t     * @return {Izi.behavior.WhenModel}\r\n\t     */\r\n\t    Perform.prototype.whenChangeOf = function (properties) {\r\n\t\r\n\t        return new module.behavior.WhenModel(this.config.withModelProperties(Array.prototype.slice.call(arguments)));\r\n\t    };\r\n\t\r\n\t\r\n\t    /**\r\n\t     * Target object for custom registrar\r\n\t     *     var registrar = {\r\n\t     *\r\n\t     *         register: function (target) {\r\n\t     *             target.addEventListener(...);\r\n\t     *             target.addEventListener(...);\r\n\t     *             target.addEventListener(...);\r\n\t     *         },\r\n\t     *\r\n\t     *         unregister: function (target) {\r\n\t     *             target.removeEventListener(...);\r\n\t     *             target.removeEventListener(...);\r\n\t     *             target.removeEventListener(...);\r\n\t     *         }\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.perform(registrar).on(target);\r\n\t     *\r\n\t     * @param {*} target\r\n\t     */\r\n\t    Perform.prototype.on = function (target) {\r\n\t        var registrar = this.config.action;\r\n\t\r\n\t        if (module.utils.typeOf(registrar.register) === 'Function') {\r\n\t\r\n\t            registrar.register(target);\r\n\t\r\n\t            return {\r\n\t                stopObserving: function () {\r\n\t                    registrar.unregister(target);\r\n\t                }\r\n\t            }\r\n\t        } else {\r\n\t            throw new Error(\"Use on(target) method only for custom registrars: izi.perform({register: function (target){...}).on(target)\");\r\n\t        }\r\n\t    };\r\n\t\r\n\t    module.behavior.Perform = Perform;\r\n\t\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * Internal configuration used in behavior fluent API\r\n\t     * @class Izi.behavior.Config\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Object} impl izi behavior implementation\r\n\t     * @param {izi} iziApi izi behavior implementation\r\n\t     */\r\n\t    var Config = function Izi_behavior_Config(impl, iziApi) {\r\n\t        this.impl = impl;\r\n\t        this.iziApi = iziApi;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set dispatcher\r\n\t     * @member Izi.behavior.Config\r\n\t     * @private\r\n\t     * @param dispatcher\r\n\t     * @return {Izi.behavior.Config}\r\n\t     */\r\n\t    Config.prototype.withDispatcher = function (dispatcher) {\r\n\t        this.dispatcher = dispatcher;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set event type\r\n\t     * @member Izi.behavior.Config\r\n\t     * @private\r\n\t     * @param {Izi.events.EventConfig[]} events\r\n\t     * @return {Izi.behavior.Config}\r\n\t     */\r\n\t    Config.prototype.withEvents = function (events) {\r\n\t        this.events = events;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set event options\r\n\t     * @member Izi.behavior.Config\r\n\t     * @private\r\n\t     * @param eventOptions\r\n\t     * @return {Izi.behavior.Config}\r\n\t     */\r\n\t    Config.prototype.withEventOptions = function (eventOptions) {\r\n\t        this.eventOptions = eventOptions;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set action\r\n\t     * @member Izi.behavior.Config\r\n\t     * @private\r\n\t     * @param action\r\n\t     * @return {Izi.behavior.Config}\r\n\t     */\r\n\t    Config.prototype.withAction = function (action) {\r\n\t        this.action = action;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set scope\r\n\t     * @member Izi.behavior.Config\r\n\t     * @private\r\n\t     * @param scope\r\n\t     * @return {Izi.behavior.Config}\r\n\t     */\r\n\t    Config.prototype.withScope = function (scope) {\r\n\t        this.scope = scope;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set model properties\r\n\t     * @member Izi.behavior.Config\r\n\t     * @private\r\n\t     * @param modelProperties\r\n\t     * @return {Izi.behavior.Config}\r\n\t     */\r\n\t    Config.prototype.withModelProperties = function (modelProperties) {\r\n\t        this.modelProperties = modelProperties;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * In case of usage: <code>izi.perform(behavior)</code> - it will return <code>behavior.perform</code> function\r\n\t     * In case of usage: <code>izi.perform(scope.function)</code> - it will return <code>scope.function</code>\r\n\t     * @member Izi.behavior.Config\r\n\t     * @return {Function}\r\n\t     */\r\n\t    Config.prototype.getAction = function () {\r\n\t        if ((typeof this.action) !== \"function\" && (!this.scope)) {\r\n\t            return this.getScope()[this.getImpl().defaultPerformFunction];\r\n\t        }\r\n\t\r\n\t        return this.action;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * In case of usage: <code>izi.perform(behavior)</code> - it will return <code>behavior</code>\r\n\t     * In case of usage: <code>izi.perform(scope.function, scope)</code> - it will return <code>scope</code>\r\n\t     * @member Izi.behavior.Config\r\n\t     * @return {Object}\r\n\t     */\r\n\t    Config.prototype.getScope = function () {\r\n\t        if ((typeof this.action) !== \"function\" && (!this.scope)) {\r\n\t            return this.action;\r\n\t        }\r\n\t\r\n\t        return this.scope;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Get event type\r\n\t     * @member Izi.behavior.Config\r\n\t     * @return {Izi.events.EventConfig[]}\r\n\t     */\r\n\t    Config.prototype.getEvents = function () {\r\n\t        return this.events;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Get event options\r\n\t     * @member Izi.behavior.Config\r\n\t     * @return {Object}\r\n\t     */\r\n\t    Config.prototype.getEventOptions = function () {\r\n\t        return this.eventOptions;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Get event dispatcher\r\n\t     * @member Izi.behavior.Config\r\n\t     * @return {*}\r\n\t     */\r\n\t    Config.prototype.getDispatcher = function () {\r\n\t        return this.dispatcher.delegatedIn || this.dispatcher;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Get behavior implementation\r\n\t     * @member Izi.behavior.Config\r\n\t     * @return {*}\r\n\t     */\r\n\t    Config.prototype.getImpl = function () {\r\n\t        return this.impl;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Get model properties\r\n\t     * @member Izi.behavior.Config\r\n\t     * @return {String[]}\r\n\t     */\r\n\t    Config.prototype.getModelProperties = function () {\r\n\t        return this.modelProperties;\r\n\t    };\r\n\t\r\n\t    module.behavior.Config = Config;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires Perform.js\r\n\t * @requires Config.js\r\n\t * @requires ../utils/forEach.js\r\n\t */\r\n\t!function(module) {\r\n\t\r\n\t    /**\r\n\t     * @member Izi.behavior\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Object} impl\r\n\t     * @param {izi} iziApi\r\n\t     */\r\n\t    module.behavior.register = function (impl, iziApi) {\r\n\t\r\n\t        if (!impl.defaultPerformFunction) {\r\n\t            throw new Error(\"Behavior implementation must have defined property: defaultPerformFunction: 'someFunctionName'\");\r\n\t        }\r\n\t        if (!impl.observeWidget) {\r\n\t            throw new Error(\"Behavior implementation must have defined function observeWidget (widget, eventConfig, action, scope, options)\");\r\n\t        }\r\n\t        if (!impl.observeKeyStroke) {\r\n\t            throw new Error(\"Behavior implementation must have defined function observeKeyStroke (widget, keyboardConfig, action, scope, options)\");\r\n\t        }\r\n\t\r\n\t        /**\r\n\t         * @ignore\r\n\t         * @sanity izi.sanityOf(\"izi.perform()\").args().args(izi.arg(\"behavior\").ofObject().havingFunction(impl.defaultPerformFunction)).args(izi.arg(\"behaviorWrapper\").ofObject().havingProperty(\"delegatedIn\")).args(izi.arg(\"callback\").ofFunction()).args(izi.arg(\"callback\").ofFunction(), izi.arg(\"scope\").ofObject()).args(izi.arg(\"registrar\").ofObject().havingFunctions(\"register\", \"unregister\")).check(arguments);\r\n\t         */\r\n\t        return function (action, scope) {\r\n\t\r\n\t            if (arguments.length === 0) {\r\n\t                var configs = [];\r\n\t\r\n\t                var registerBehaviors = function (action, scope) {\r\n\t                    var config = new module.behavior.Config(impl, iziApi).withAction(action).withScope(scope);\r\n\t                    configs.push(config);\r\n\t                    return new module.behavior.Perform(config);\r\n\t                };\r\n\t\r\n\t                registerBehaviors.stopObserving = function () {\r\n\t                    module.utils.forEach(configs, function (config) {\r\n\t                        config.behavior.stopObserving();\r\n\t                    });\r\n\t                };\r\n\t\r\n\t                return registerBehaviors;\r\n\t            }\r\n\t\r\n\t            return new module.behavior.Perform(new module.behavior.Config(impl, iziApi).withAction(action).withScope(scope));\r\n\t        };\r\n\t    };\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Object} object host object\r\n\t     * @param {String} property to be examined to\r\n\t     */\r\n\t    module.utils.hasOwnProperty = function (object, property) {\r\n\t        return Object.prototype.hasOwnProperty.call(object, property);\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires hasOwnProperty.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Object...} vararg of any Objects\r\n\t     */\r\n\t    module.utils.mergeObjects = function () {\r\n\t\r\n\t        function copyProperties(source, target) {\r\n\t            for (var key in source) {\r\n\t                if (module.utils.hasOwnProperty(source, key)) {\r\n\t                    target[key] = source[key];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t\r\n\t        return function () {\r\n\t            var result = {};\r\n\t            for (var i = 0; i < arguments.length; i++) {\r\n\t                copyProperties(arguments[i], result);\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t    }();\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Array} array\r\n\t     * @param {*} item\r\n\t     * @return {Number}\r\n\t     */\r\n\t    module.utils.indexOf = (function () {\r\n\t\r\n\t        function byIndexOf(array, item) {\r\n\t            return Array.prototype.indexOf.call(array, item);\r\n\t        }\r\n\t\r\n\t        function byLoop(array, item) {\r\n\t            var i, ln = array.length;\r\n\t\r\n\t            for (i = 0; i < ln; i = i + 1) {\r\n\t                if (array[i] === item) {\r\n\t                    return i;\r\n\t                }\r\n\t            }\r\n\t\r\n\t            return -1;\r\n\t        }\r\n\t\r\n\t        function hasIndexOf() {\r\n\t            return (typeof Array.prototype.indexOf) === 'function';\r\n\t        }\r\n\t\r\n\t        return hasIndexOf() ? byIndexOf : byLoop;\r\n\t    }());\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires indexOf.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Array} array\r\n\t     * @param {*} item\r\n\t     */\r\n\t    module.utils.removeItem = function (array, item) {\r\n\t        var start = module.utils.indexOf(array, item);\r\n\t        if (start !== -1) {\r\n\t            array.splice(start, 1);\r\n\t        }\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/mergeObjects.js\r\n\t * @requires ../utils/removeItem.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * Internal configuration used in binding fluent API\r\n\t     * @private\r\n\t     * @class Izi.binding.Config\r\n\t     * @constructor\r\n\t     * @param {Object} impl izi binding implementation\r\n\t     */\r\n\t    var Config = function Izi_binding_Config(impl) {\r\n\t        this.options = {\r\n\t            auto: true,\r\n\t            executeAtStartup: true,\r\n\t            debug: false\r\n\t        };\r\n\t        this.impl = impl;\r\n\t        this.triggerProperties = [];\r\n\t        this.bindings = [];\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param {Object} options\r\n\t     * @return {Izi.binding.Config}\r\n\t     * @since 1.1.0\r\n\t     */\r\n\t    Config.prototype.withOptions = function (options) {\r\n\t        this.options = module.utils.mergeObjects(this.options, options);\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param {Izi.binding.Binding[]} bindings\r\n\t     * @return {Izi.binding.Config}\r\n\t     * @since 1.1.0\r\n\t     */\r\n\t    Config.prototype.withBindings = function (bindings) {\r\n\t        this.bindings = bindings;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param {Function} callerLineProvider\r\n\t     * @return {Izi.binding.Config}\r\n\t     * @since 1.1.0\r\n\t     */\r\n\t    Config.prototype.withCallerLineProvider = function (callerLineProvider) {\r\n\t        this.callerLineProvider = callerLineProvider;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param source\r\n\t     * @return {Izi.binding.Config}\r\n\t     */\r\n\t    Config.prototype.withSource = function (source) {\r\n\t        this.source = source;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param sourceProperties\r\n\t     * @return {Izi.binding.Config}\r\n\t     */\r\n\t    Config.prototype.withSourceProperties = function (sourceProperties) {\r\n\t        this.sourceProperties = sourceProperties.constructor === Array ? sourceProperties : [sourceProperties];\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param target\r\n\t     * @return {Izi.binding.Config}\r\n\t     */\r\n\t    Config.prototype.withTarget = function (target) {\r\n\t        this.target = target;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param value\r\n\t     * @return {Izi.binding.Config}\r\n\t     */\r\n\t    Config.prototype.withTargetProperty = function (value) {\r\n\t        this.targetProperty = value;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param formatter\r\n\t     * @return {Izi.binding.Config}\r\n\t     */\r\n\t    Config.prototype.withFormatter = function (formatter) {\r\n\t        this.formatter = formatter;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param property\r\n\t     */\r\n\t    Config.prototype.addTriggerProperty = function (property) {\r\n\t        this.triggerProperties.push(property);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param {Izi.binding.Binding} binding\r\n\t     */\r\n\t    Config.prototype.addBinding = function (binding) {\r\n\t        this.bindings.push(binding);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Config\r\n\t     * @private\r\n\t     * @param {Izi.binding.Binding} binding\r\n\t     */\r\n\t    Config.prototype.removeBinding = function (binding) {\r\n\t        module.utils.removeItem(this.bindings, binding);\r\n\t    };\r\n\t\r\n\t    module.binding.Config = Config;\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @since 1.1.0\r\n\t     * @private\r\n\t     * @param {Function} fn\r\n\t     * @param {Object} scope\r\n\t     * @return {Function}\r\n\t     */\r\n\t    module.utils.curry = function (fn, scope) {\r\n\t        return function () {\r\n\t            fn.apply(scope, arguments);\r\n\t        }\r\n\t    };\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Array} factories\r\n\t     * @param {Array} args\r\n\t     * @param {Object} scope\r\n\t     */\r\n\t    module.utils.findClosure = function Izi_utils_findClosure(factories, args, scope) {\r\n\t        var i, factory, closure;\r\n\t        for (i = 0; i < factories.length; i = i + 1) {\r\n\t            factory = factories[i];\r\n\t            closure = factory.apply(scope, args);\r\n\t            if (closure) {\r\n\t                return closure;\r\n\t            }\r\n\t        }\r\n\t\r\n\t        throw new Error(\"Closure not found\");\r\n\t    };\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @since 1.1.0\r\n\t     * @private\r\n\t     * @param {String} text\r\n\t     * @return {String}\r\n\t     */\r\n\t    module.utils.trim = function (text) {\r\n\t        return text.replace(/^\\W+/, '').replace(/\\W+$/, '');\r\n\t    };\r\n\t}(Izi);\r\n\t!function (module, global) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @since 1.2.0\r\n\t     * @private\r\n\t     */\r\n\t    var logImpl;\r\n\t    if (\"console\" in global) {\r\n\t        logImpl = function () {\r\n\t            if (global.console.log.apply) {\r\n\t                global.console.log.apply(global.console, arguments);\r\n\t            } else {\r\n\t                // IE :)\r\n\t                global.console.log(Array.prototype.slice.call(arguments));\r\n\t            }\r\n\t\r\n\t        }\r\n\t    } else {\r\n\t        logImpl = function () {\r\n\t            // no loggers other than window.console\r\n\t        }\r\n\t    }\r\n\t\r\n\t    module.utils.log = function () {\r\n\t        logImpl.apply(global, arguments);\r\n\t    }\r\n\t\r\n\t}(Izi, this);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires Config.js\r\n\t * @requires ../utils/typeOf.js\r\n\t * @requires ../utils/forEach.js\r\n\t * @requires ../utils/curry.js\r\n\t * @requires ../utils/findClosure.js\r\n\t * @requires ../utils/trim.js\r\n\t * @requires ../utils/log.js\r\n\t */\r\n\t!function (module) {\r\n\t    var forEach = module.utils.forEach,\r\n\t        curry = module.utils.curry,\r\n\t        findClosure = module.utils.findClosure,\r\n\t        trim = module.utils.trim,\r\n\t        log = module.utils.log,\r\n\t        INVALID_VALUE = {};\r\n\t\r\n\t    function onlyOnceError() {\r\n\t        throw new Error(\"twoWay() method may be used only once\");\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Binding initializer - the last part of\r\n\t     * <code>izi.bind().valueOf(source, 'sourceProperty').to(target, 'targetProperty')</code> fluent API\r\n\t     * @class Izi.binding.Binding\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.binding.Config} config\r\n\t     */\r\n\t    var Binding = function Izi_binding_Binding(config) {\r\n\t\r\n\t        this.impl = config.impl;\r\n\t        this.source = config.source.delegatedIn || config.source;\r\n\t        this.sourceProperties = config.sourceProperties;\r\n\t        this.triggerProperties = config.triggerProperties;\r\n\t        this.target = config.target.delegatedIn || config.target;\r\n\t        this.targetProperty = config.targetProperty;\r\n\t        this.formatter = config.formatter;\r\n\t        this.sourceReaders = {};\r\n\t        this.targetReader = undefined;\r\n\t        this.targetWriter = undefined;\r\n\t        this.observers = [];\r\n\t        this.options = config.options;\r\n\t        this.getCallerLine = config.callerLineProvider;\r\n\t\r\n\t        this.registerReadersAndWriters();\r\n\t\r\n\t        if (this.options.auto) {\r\n\t            if (this.options.executeAtStartup) {\r\n\t                this.transferValue();\r\n\t            }\r\n\t            this.bind();\r\n\t        }\r\n\t\r\n\t        config.addBinding(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Binding\r\n\t     * @private\r\n\t     * @param object\r\n\t     * @param properties\r\n\t     * @return {*}\r\n\t     */\r\n\t    Binding.prototype.getFormattedValues = function (object, properties) {\r\n\t        var values = [],\r\n\t            sourceReader,\r\n\t            sourceReaders = this.sourceReaders,\r\n\t            formatter = this.formatter;\r\n\t\r\n\t\r\n\t        forEach(properties, function (property) {\r\n\t            sourceReader = sourceReaders[property];\r\n\t            values.push(sourceReader(object, property));\r\n\t        });\r\n\t\r\n\t        if (formatter && (typeof formatter === \"function\")) {\r\n\t            return formatter.apply(null, values);\r\n\t        } else if (values.length === 1) {\r\n\t            return values[0];\r\n\t        } else {\r\n\t            throw new Error(\"You must use formatter if you want to bind more properties than one. Ex: izi.bind().valueOf(model, 'firstName', 'lastName').through(concatFormatter)...\");\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @private\r\n\t     * @param sourceValue\r\n\t     */\r\n\t    Binding.prototype.debugBinding = function (sourceValue) {\r\n\t        var callerLine;\r\n\t\r\n\t        if (this.options.debug) {\r\n\t            callerLine = trim(this.getCallerLine());\r\n\t            log('[BINDING] ' + callerLine, {\r\n\t                source: this.source,\r\n\t                sourceProperties: this.sourceProperties,\r\n\t                target: this.target,\r\n\t                targetProperty: this.targetProperty,\r\n\t                triggerProperties: this.triggerProperties,\r\n\t                value: sourceValue\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Binding\r\n\t     * @private\r\n\t     */\r\n\t    Binding.prototype.transferValue = function () {\r\n\t        var source = this.source,\r\n\t            sourceProperties = this.sourceProperties,\r\n\t            sourceValue = this.getFormattedValues(source, sourceProperties),\r\n\t            targetReader = this.targetReader,\r\n\t            targetWriter = this.targetWriter,\r\n\t            target = this.target,\r\n\t            targetProperty = this.targetProperty,\r\n\t            targetValue;\r\n\t\r\n\t        try {\r\n\t            targetValue = targetReader(target, targetProperty);\r\n\t        } catch (error) {\r\n\t            targetValue = INVALID_VALUE;\r\n\t        }\r\n\t\r\n\t        if (sourceValue !== targetValue) {\r\n\t            this.debugBinding(sourceValue);\r\n\t            targetWriter(target, targetProperty, sourceValue);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Binding\r\n\t     * @private\r\n\t     * @param source\r\n\t     * @param sourceProperty\r\n\t     * @param target\r\n\t     * @param targetProperty\r\n\t     * @param transferValueFn\r\n\t     * @return {*}\r\n\t     */\r\n\t    Binding.prototype.getChangeObserver = function (source, sourceProperty, target, targetProperty, transferValueFn) {\r\n\t        var impl = this.impl;\r\n\t\r\n\t        try {\r\n\t            return findClosure(impl.changeObservers, [source, sourceProperty, target, targetProperty, transferValueFn], this);\r\n\t        } catch (error) {\r\n\t            if (!this.options.allowNotWatchable) {\r\n\t                throw new Error(\"Could not find change observer for: \" + source + \" and property: \" + sourceProperty);\r\n\t            }\r\n\t\r\n\t            if (module.isDebug) {\r\n\t                log(\"[BINDING] Could not find change observer for:\", source, \"and property:\", sourceProperty);\r\n\t            }\r\n\t\r\n\t            return function notWatchableObserver() {\r\n\t                return function doNothing() {\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Binding\r\n\t     * @private\r\n\t     */\r\n\t    Binding.prototype.registerReadersAndWriters = function () {\r\n\t        var source = this.source,\r\n\t            target = this.target,\r\n\t            targetProperty = this.targetProperty,\r\n\t            sourceProperties = this.sourceProperties,\r\n\t            sourceReaders = this.sourceReaders,\r\n\t            valueReaders = this.impl.valueReaders,\r\n\t            valueWriters = this.impl.valueWriters,\r\n\t            me = this;\r\n\t\r\n\t        forEach(sourceProperties, function (sourceProperty) {\r\n\t            try {\r\n\t                sourceReaders[sourceProperty] = findClosure(valueReaders, [source, sourceProperty, \"sourceReader\"], this);\r\n\t            } catch (e) {\r\n\t                throw new Error(\"Could not find reader function for: \" + source + \" using property: \" + sourceProperty);\r\n\t            }\r\n\t        });\r\n\t\r\n\t        try {\r\n\t            this.targetReader = findClosure(valueReaders, [target, targetProperty, \"targetReader\"], this);\r\n\t        } catch (e) {\r\n\t            this.targetReader = function () {\r\n\t                return INVALID_VALUE;\r\n\t            }\r\n\t        }\r\n\t\r\n\t        try {\r\n\t            this.targetWriter = findClosure(valueWriters, [target, targetProperty], this);\r\n\t        } catch (e) {\r\n\t            throw new Error(\"Could not find writer function for: \" + target + \" using property: \" + targetProperty);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Bind target to source (start listening for source changes). When you use <code>izi.bind()</code> this is called\r\n\t     * automatically. You should call it only when you use <code>izi.bind({auto:false})</code> option.\r\n\t     * This method doesn't transfer value from source to target - {@link Izi.binding.Binding#execute} does it.\r\n\t     * @member Izi.binding.Binding\r\n\t     * @since 1.1.0\r\n\t     */\r\n\t    Binding.prototype.bind = function () {\r\n\t        var sourceProperties = this.sourceProperties,\r\n\t            triggerProperties = this.triggerProperties,\r\n\t            source = this.source,\r\n\t            target = this.target,\r\n\t            targetProperty = this.targetProperty,\r\n\t            allTriggerProperties = triggerProperties.concat(sourceProperties),\r\n\t            observers = this.observers,\r\n\t            transferValueFn = curry(this.transferValue, this),\r\n\t            me = this;\r\n\t\r\n\t        forEach(allTriggerProperties, function (sourceProperty) {\r\n\t            var changeObserver = me.getChangeObserver(source, sourceProperty, target, targetProperty, transferValueFn);\r\n\t            observers.push(changeObserver(source, sourceProperty, target, targetProperty, transferValueFn));\r\n\t        });\r\n\t\r\n\t        this.reverseBinding && this.reverseBinding.bind();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Binding\r\n\t     * @deprecated 1.1.0 Use {@link Izi.binding.Binding#unbind} instead.\r\n\t     * @return {void}\r\n\t     */\r\n\t    Binding.prototype.stopObserving = function () {\r\n\t        this.unbind();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Unbind target from source (stop listening for source changes).\r\n\t     * @member Izi.binding.Binding\r\n\t     * @since 1.1.0\r\n\t     */\r\n\t    Binding.prototype.unbind = function () {\r\n\t        forEach(this.observers, function (observer) {\r\n\t            observer();\r\n\t        });\r\n\t\r\n\t        this.reverseBinding && this.reverseBinding.unbind()\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates two way binding between source and target. There are following limitations for using this feature:\r\n\t     *\r\n\t     *  * source property must be only one\r\n\t     *  * `through()` function can't be defined\r\n\t     *  * target can't be a function\r\n\t     *\r\n\t     * @member Izi.binding.Binding\r\n\t     * @since 1.5.0\r\n\t     * @returns {*}\r\n\t     */\r\n\t    Binding.prototype.twoWay = function () {\r\n\t        if (this.formatter) {\r\n\t            throw new Error(\"Two way binding doesn't allow to use .through(fn) function\");\r\n\t        }\r\n\t\r\n\t        if (module.utils.typeOf(this.target) === \"Function\") {\r\n\t            throw new Error(\"Two way binding doesn't allow to use function as a target\");\r\n\t        }\r\n\t\r\n\t        var reverseConfig = new module.binding.Config(this.impl)\r\n\t            .withOptions(this.options)\r\n\t            .withSource(this.target)\r\n\t            .withSourceProperties(this.targetProperty)\r\n\t            .withTarget(this.source)\r\n\t            .withTargetProperty(this.sourceProperties[0])\r\n\t            .withCallerLineProvider(this.getCallerLine);\r\n\t\r\n\t        this.reverseBinding = new module.binding.Binding(reverseConfig);\r\n\t        this.twoWay = onlyOnceError;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Execute binding (transfer value from source to target). In case of two way binding it will be triggered\r\n\t     * just binging from source to target.\r\n\t     * @member Izi.binding.Binding\r\n\t     * @since 1.1.0\r\n\t     */\r\n\t    Binding.prototype.execute = function () {\r\n\t        this.transferValue();\r\n\t    };\r\n\t\r\n\t    module.binding.Binding = Binding;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires Binding.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * After `izi.bind().valueOf(widget)...` fluent API\r\n\t     * @class Izi.binding.ValueOf\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.binding.Config} config\r\n\t     */\r\n\t    var ValueOf = function Izi_binding_ValueOf(config) {\r\n\t        this.config = config;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Binding target setup.\r\n\t     * You can pass directly target instance or object containing target on <strong>delegatedIn</strong> property.\r\n\t     * \r\n\t     *     var label = new Label();\r\n\t     *     var wrapper = {\r\n\t     *         delegatedIn: label\r\n\t     *     }\r\n\t     *     izi.bind().valueOf(model).to(label, \"text\");\r\n\t     *\r\n\t     *     //will work also for:\r\n\t     *     izi.bind().valueOf(model).to(wrapper, \"text\");\r\n\t     * \r\n\t     * You can skip both parameters in order to more elegant notation:\r\n\t     * \r\n\t     *     izi.bind().valueOf(model).to().textOf(label);\r\n\t     * \r\n\t     *\r\n\t     * As a target you can also use a function with given scope:\r\n\t     *\r\n\t     *     var scope = {\r\n\t     *         firstName: null,\r\n\t     *\r\n\t     *         firstNameChangeHandler: function (value) {\r\n\t     *             this.firstName = value;\r\n\t     *         }\r\n\t     *     }\r\n\t     *\r\n\t     *     izi.bind().valueOf(model, \"firstName\").to(scope.firstNameChangeHandler, scope);\r\n\t     *     model.firstName(\"John\");\r\n\t     *\r\n\t     * You can also skip the scope:\r\n\t     *\r\n\t     *     function firstNameChangeHandler(value) {\r\n\t     *         console.log(value); // \"John\"\r\n\t     *     }\r\n\t     *\r\n\t     *     izi.bind().valueOf(model, \"firstName\").to(firstNameChangeHandler);\r\n\t     *     model.firstName(\"John\");\r\n\t     *\r\n\t     * @member Izi.binding.ValueOf\r\n\t     * @sanity izi.sanityOf(\"to()\").args().args(izi.arg(\"targetFunction\").ofFunction()).args(izi.arg(\"targetFunction\").ofFunction(), izi.arg(\"scope\").ofObject()).args(izi.arg(\"target\").ofObject(), izi.arg(\"targetProperty\").ofString()).args(izi.arg(\"target\").ofObject().havingProperty(\"delegatedIn\"), izi.arg(\"targetProperty\").ofString()).check(arguments);\r\n\t     * @param {Object/Function} [target] Model or widget or Function\r\n\t     * @param {String/Object} [targetProperty] Target property name or Function scope\r\n\t     * @return {Izi.binding.Binding|Izi.binding.ValueOf} `.to()` returns Izi.binding.ValueOf, `.to(target, \"property\")` returns Izi.binding.Binding\r\n\t     */\r\n\t    ValueOf.prototype.to = function (target, targetProperty) {\r\n\t        if (arguments.length === 0) {\r\n\t            return this;\r\n\t        } else {\r\n\t            return new module.binding.Binding(this.config.withTarget(target).withTargetProperty(targetProperty));\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Binding target setup for 'value' property.\r\n\t     *\r\n\t     * @member Izi.binding.ValueOf\r\n\t     * @sanity izi.sanityOf(\"valueOf()\").args(izi.arg(\"target\").ofObject()).args(izi.arg(\"target\").ofObject().havingProperty(\"delegatedIn\")).check(arguments);\r\n\t     * @param {Object} target\r\n\t     * @return {Izi.binding.Binding}\r\n\t     */\r\n\t    ValueOf.prototype.valueOf = function (target) {\r\n\t        return this.to(target, \"value\");\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Binding target setup for 'text' property.\r\n\t     *\r\n\t     * @member Izi.binding.ValueOf\r\n\t     * @sanity izi.sanityOf(\"textOf()\").args(izi.arg(\"target\").ofObject()).args(izi.arg(\"target\").ofObject().havingProperty(\"delegatedIn\")).check(arguments);\r\n\t     * @param {Object} target\r\n\t     * @return {Izi.binding.Binding}\r\n\t     */\r\n\t    ValueOf.prototype.textOf = function (target) {\r\n\t        return this.to(target, \"text\");\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Binding target setup for 'selectedItems' property.\r\n\t     *\r\n\t     * @member Izi.binding.ValueOf\r\n\t     * @sanity izi.sanityOf(\"selectedItemsOf()\").args(izi.arg(\"target\").ofObject()).args(izi.arg(\"target\").ofObject().havingProperty(\"delegatedIn\")).check(arguments);\r\n\t     * @param {Object} target\r\n\t     * @return {Izi.binding.Binding}\r\n\t     */\r\n\t    ValueOf.prototype.selectedItemsOf = function (target) {\r\n\t        return this.to(target, \"selectedItems\");\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Formatter function which is used before set value on target.\r\n\t     * If you specified more than one source properties - you must also specify formatter function.\r\n\t     * \r\n\t     *     var fullNameFormatter = function (firstName, lastName) {\r\n\t     *         return firstName + ' ' + lastName;\r\n\t     *     }\r\n\t     *     izi.bind().valueOf(model, 'firstName', 'lastName').through(fullNameFormatter)\r\n\t     * \r\n\t     *\r\n\t     * @member Izi.binding.ValueOf\r\n\t     * @param {Function} formatter Function that combines all source values to one value\r\n\t     * @return {Izi.binding.ValueOf}\r\n\t     */\r\n\t    ValueOf.prototype.through = function (formatter) {\r\n\t        this.config.withFormatter(formatter);\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Additional source property which change will trigger binding execution.\r\n\t     * \r\n\t     *     var label = new Label();\r\n\t     *     var model = new User();\r\n\t     *     model.getFullName = function () {\r\n\t     *       return this.get(\"firstName\") + ' ' + this.get(\"lastName\");\r\n\t     *     }\r\n\t     *\r\n\t     *     izi.bind().valueOf(model, \"fullName\")\r\n\t     *               .onChangeOf(\"firstName\")\r\n\t     *               .onChangeOf(\"lastName\")\r\n\t     *               .to().textOf(label);\r\n\t     * \r\n\t     *\r\n\t     * @member Izi.binding.ValueOf\r\n\t     * @param {String} property Model property that triggers binding execution\r\n\t     * @return {Izi.binding.ValueOf}\r\n\t     */\r\n\t    ValueOf.prototype.onChangeOf = function (property) {\r\n\t        this.config.addTriggerProperty(property);\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    module.binding.ValueOf = ValueOf;\r\n\t\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Number} stackOffset\r\n\t     * @return {Function}\r\n\t     */\r\n\t    module.utils.getCallerLineProvider = function (stackOffset) {\r\n\t        if (!module.isDebug) {\r\n\t            return function () {\r\n\t                return \"Line numbers are available only in debug version of izi-js\";\r\n\t            }\r\n\t        }\r\n\t        var error = Error();\r\n\t\r\n\t        return function getCallerLine() {\r\n\t            if (error.stack) {\r\n\t                // WebKit / FireFox / Opera\r\n\t                var callStack = error.stack.split(\"\\n\");\r\n\t                var index = navigator.userAgent.indexOf(\"WebKit\") > -1\r\n\t                    ? 3 + stackOffset // Chrome\r\n\t                    : 1 + stackOffset; // Firefox and Opera\r\n\t                return callStack[index];\r\n\t            } else {\r\n\t                // IE\r\n\t                return \" [IE doesn't provide line number in call stack]\";\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ValueOf.js\r\n\t * @requires Config.js\r\n\t * @requires ../utils/getCallerLineProvider.js\r\n\t * @requires ../utils/forEach.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * After `izi.bind()...` fluent API\r\n\t     * @class Izi.binding.Bind\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.binding.Config} config\r\n\t     */\r\n\t    var Bind = function Izi_binding_Bind(config) {\r\n\t        this.config = config;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @param source\r\n\t     * @param sourceProperty\r\n\t     * @return {Izi.binding.ValueOf}\r\n\t     * @private\r\n\t     */\r\n\t    Bind.prototype._valueOf = function (source, sourceProperty) {\r\n\t\r\n\t        if (arguments.length > 2) {\r\n\t            sourceProperty = Array.prototype.slice.call(arguments, 1);\r\n\t        }\r\n\t        var config = this.cloneConfig()\r\n\t            .withSource(source)\r\n\t            .withSourceProperties(sourceProperty || \"value\")\r\n\t            .withCallerLineProvider(module.utils.getCallerLineProvider(2));\r\n\t\r\n\t        return new module.binding.ValueOf(config);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Binding source setup.\r\n\t     *\r\n\t     * You can pass directly source instance or object containing source on <strong>delegatedIn</strong> property.\r\n\t     *\r\n\t     *     var model = new User();\r\n\t     *     var wrapper = {\r\n\t     *         delegatedIn: model\r\n\t     *     }\r\n\t     *     izi.bind().valueOf(model, 'firstName');\r\n\t     *\r\n\t     *     // will work also for:\r\n\t     *     izi.bind().valueOf(wrapper, 'firstName');\r\n\t     *\r\n\t     * You can also specify more than one property:\r\n\t     *\r\n\t     *     izi.bind().valueOf(model, 'firstName', 'lastName', 'title');\r\n\t     *\r\n\t     *\r\n\t     * @sanity izi.sanityOf(\"valueOf()\").args(izi.arg(\"source\").ofObject()).args(izi.arg(\"source\").ofObject().havingProperty(\"delegatedIn\")).args(izi.arg(\"source\").ofObject(), izi.varargOf(izi.arg(\"sourceProperty\").ofString())).args(izi.arg(\"source\").ofObject().havingProperty(\"delegatedIn\"), izi.varargOf(izi.arg(\"sourceProperty\").ofString())).check(arguments);\r\n\t     * @member Izi.binding.Bind\r\n\t     * @param {*} source Model or widget\r\n\t     * @param {String...} [sourceProperty=\"value\"] Property name or properties names\r\n\t     * @return {Izi.binding.ValueOf}\r\n\t     */\r\n\t    Bind.prototype.valueOf = function (source, sourceProperty) {\r\n\t        return this._valueOf.apply(this, arguments);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Binding source setup for selected items of lists, grids, etc.\r\n\t     * This is an alias to `this.valueOf(source, \"selectedItems\")`\r\n\t     * You can pass directly model instance or object containing model on <strong>delegatedIn</strong> property.\r\n\t     *\r\n\t     *     var dataGrid = new DataGrid();\r\n\t     *     var wrapper = {\r\n\t     *         delegatedIn: dataGrid\r\n\t     *     }\r\n\t     *     izi.bind().selectedItemsOf(dataGrid);\r\n\t     *\r\n\t     *     // will work also for:\r\n\t     *     izi.bind().selectedItemsOf(wrapper);\r\n\t     *\r\n\t     * @member Izi.binding.Bind\r\n\t     * @sanity izi.sanityOf(\"selectedItemsOf()\").args(izi.arg(\"source\").ofObject()).args(izi.arg(\"source\").ofObject().havingProperty(\"delegatedIn\")).check(arguments);\r\n\t     * @param {*} source Grid, list or any other 'selectedItems' holder\r\n\t     * @return {Izi.binding.ValueOf}\r\n\t     */\r\n\t    Bind.prototype.selectedItemsOf = function (source) {\r\n\t        return this._valueOf(source, \"selectedItems\");\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.binding.Bind\r\n\t     * @private\r\n\t     * @return {Izi.binding.Config}\r\n\t     */\r\n\t    Bind.prototype.cloneConfig = function () {\r\n\t        return new module.binding.Config(this.config.impl)\r\n\t            .withBindings(this.config.bindings)\r\n\t            .withOptions(this.config.options);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Unbind all registered bindings created by one `izi.bind()` instance.\r\n\t     *\r\n\t     *     var model = new User();\r\n\t     *     var firstNameEditor, lastNameEditor;\r\n\t     *\r\n\t     *     var bind = izi.bind();\r\n\t     *\r\n\t     *     bind.valueOf(model, \"firstName\").to().valueOf(firstNameEditor);\r\n\t     *     bind.valueOf(model, \"lastName\").to().valueOf(lastNameEditor);\r\n\t     *\r\n\t     *     bind.unbindAll(); // will stop listening for changes of both properties (firstName and lastName)\r\n\t     *\r\n\t     * @since 1.1.0\r\n\t     * @member Izi.binding.Bind\r\n\t     */\r\n\t    Bind.prototype.unbindAll = function () {\r\n\t        module.utils.forEach(this.config.bindings, function (binding) {\r\n\t            binding.unbind();\r\n\t        })\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Execute manually all registered bindings created by one `izi.bind({auto: false})` instance.\r\n\t     *\r\n\t     *     var model = new User();\r\n\t     *     var firstNameEditor, lastNameEditor;\r\n\t     *\r\n\t     *     var bind = izi.bind();\r\n\t     *\r\n\t     *     bind.valueOf(model, \"firstName\").to().valueOf(firstNameEditor);\r\n\t     *     bind.valueOf(model, \"lastName\").to().valueOf(lastNameEditor);\r\n\t     *\r\n\t     *     bind.executeAll(); // will execute bindings for both properties (firstName and lastName)\r\n\t     *\r\n\t     * @since 1.1.0\r\n\t     * @member Izi.binding.Bind\r\n\t     */\r\n\t    Bind.prototype.executeAll = function () {\r\n\t        module.utils.forEach(this.config.bindings, function (binding) {\r\n\t            binding.execute();\r\n\t        })\r\n\t    };\r\n\t\r\n\t    module.binding.Bind = Bind;\r\n\t\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    module.binding.impl.createObserver = function (matcher, observer) {\r\n\t        return function () {\r\n\t            return matcher.apply(this, arguments) ? observer : null;\r\n\t        }\r\n\t    };\r\n\t}(Izi);\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * @requires createObserver.js\r\n\t */\r\n\t!function(module) {\r\n\t\r\n\t    function matcher(source, sourceProperty, target, targetProperty, transferValueFn) {\r\n\t        return source.iziObserveProperty;\r\n\t    }\r\n\t\r\n\t    function observer(source, sourceProperty, target, targetProperty, transferValueFn) {\r\n\t        return source.iziObserveProperty(sourceProperty, transferValueFn);\r\n\t    }\r\n\t\r\n\t    module.binding.impl.customPropertyObserver = module.binding.impl.createObserver(matcher, observer);\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    module.binding.impl.createReader = function (matcher, reader) {\r\n\t        return function () {\r\n\t            return matcher.apply(this, arguments) ? reader : null;\r\n\t        }\r\n\t    };\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {String} text\r\n\t     * @return {String}\r\n\t     */\r\n\t    module.utils.capitalize = function (text) {\r\n\t        return text.charAt(0).toUpperCase() + text.substr(1);\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires capitalize.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @since 1.5.0\r\n\t     * @private\r\n\t     * @param {String} name\r\n\t     * @return {String}\r\n\t     */\r\n\t    module.utils.getterOf = function (name) {\r\n\t        return \"get\" + module.utils.capitalize(name);\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires createReader.js\r\n\t * @requires ../../utils/getterOf.js\r\n\t * @requires ../../utils/typeOf.js\r\n\t * @requires ../../utils/hasOwnProperty.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    module.binding.impl.readByGet = function () {\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return (typeof object.get) === \"function\";\r\n\t        }\r\n\t\r\n\t        function reader(object, property) {\r\n\t            return object.get(property);\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createReader(matcher, reader);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.readByCapitalizedGetter = function () {\r\n\t\r\n\t        function reader(object, property) {\r\n\t            return object[module.utils.getterOf(property)]();\r\n\t        }\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return module.utils.typeOf(property) === \"String\" &&  (typeof object[module.utils.getterOf(property)]) === \"function\";\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createReader(matcher, reader);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.readByFunction = function () {\r\n\t\r\n\t        function reader(object, property) {\r\n\t            return object[property]();\r\n\t        }\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return (typeof object[property] === 'function');\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createReader(matcher, reader);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.readFromProperty = function () {\r\n\t\r\n\t        function reader(object, property) {\r\n\t            return object[property];\r\n\t        }\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return true;\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createReader(matcher, reader);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.readFromOwnedProperty = function () {\r\n\t\r\n\t        function reader(object, property) {\r\n\t            return object[property];\r\n\t        }\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return module.utils.hasOwnProperty(object, property);\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createReader(matcher, reader);\r\n\t    }();\r\n\t    \r\n\t}(Izi);\r\n\t!function(module) {\r\n\t    module.binding.impl.createWriter = function (matcher, writer) {\r\n\t        return function () {\r\n\t            return matcher.apply(this, arguments) ? writer : null;\r\n\t        }\r\n\t    };\r\n\t}(Izi);\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * @requires createWriter.js\r\n\t * @requires ../../utils/capitalize.js\r\n\t * @requires ../../utils/typeOf.js\r\n\t * @requires ../../utils/hasOwnProperty.js\r\n\t */\r\n\t!function(module){\r\n\t\r\n\t    module.binding.impl.writeBySet = function () {\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return (typeof object.set) === \"function\";\r\n\t        }\r\n\t\r\n\t        function writer(object, property, value) {\r\n\t            object.set(property, value);\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createWriter(matcher, writer);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.writeByCapitalizedSetter = function () {\r\n\t\r\n\t        var capitalize = module.utils.capitalize;\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return module.utils.typeOf(property) === \"String\" &&  (typeof object[\"set\" + capitalize(property)]) === \"function\";\r\n\t        }\r\n\t\r\n\t        function writer(object, property, value) {\r\n\t            object[\"set\" + capitalize(property)](value);\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createWriter(matcher, writer);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.writeToProperty = function () {\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return true;\r\n\t        }\r\n\t\r\n\t        function writer(object, property, value) {\r\n\t            object[property] = value;\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createWriter(matcher, writer);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.writeToOwnedProperty = function () {\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return module.utils.hasOwnProperty(object, property);\r\n\t        }\r\n\t\r\n\t        function writer(object, property, value) {\r\n\t            object[property] = value;\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createWriter(matcher, writer);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.writeByFunction = function () {\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return module.utils.typeOf(object) === 'Function';\r\n\t        }\r\n\t\r\n\t        function writer(fn, scope, value) {\r\n\t            fn.call(scope, value);\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createWriter(matcher, writer);\r\n\t    }();\r\n\t\r\n\t    module.binding.impl.writeToFunction = function () {\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            return module.utils.typeOf(object[property]) === 'Function';\r\n\t        }\r\n\t\r\n\t        function writer(object, property, value) {\r\n\t            object[property](value);\r\n\t        }\r\n\t\r\n\t        return module.binding.impl.createWriter(matcher, writer);\r\n\t    }();\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../../../utils/typeOf.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    module.binding.impl.nested.isNestedProperty = function Izi_binding_impl_nested_isNestedProperty(property) {\r\n\t        return module.utils.typeOf(property) === \"String\" && property.indexOf(\".\") > -1\r\n\t    }\r\n\t}(Izi);\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * @requires isNestedProperty.js\r\n\t * @requires ../createObserver.js\r\n\t * @requires ../../../utils/curry.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    function matcher(source, sourceProperty, target, targetProperty, transferValueFn) {\r\n\t        return module.binding.impl.nested.isNestedProperty(sourceProperty);\r\n\t    }\r\n\t\r\n\t    function observer(source, sourceProperty, target, targetProperty, transferValueFn) {\r\n\t\r\n\t        var nestedWatcher = source.iziNestedWatchers[sourceProperty];\r\n\t        nestedWatcher.onValueChanged(transferValueFn);\r\n\t\r\n\t        return module.utils.curry(nestedWatcher.stopObserving, nestedWatcher);\r\n\t    }\r\n\t\r\n\t    module.binding.impl.nested.nestedObserver = module.binding.impl.createObserver(matcher, observer);\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../../../utils/findClosure.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    var TargetFinder = function Izi_binding_impl_nested_TargetFinder(path, readers) {\r\n\t        this.path = path.split(\".\");\r\n\t        this.path.pop();\r\n\t        this.readers = readers;\r\n\t    };\r\n\t\r\n\t    TargetFinder.prototype.findFor = function (object) {\r\n\t        var currentObject = object;\r\n\t        for (var i = 0; i < this.path.length; i++) {\r\n\t            var property = this.path[i];\r\n\t\r\n\t            try {\r\n\t                var reader = module.utils.findClosure(this.readers, [currentObject, property, \"targetReader\"]);\r\n\t                currentObject = reader(currentObject, property);\r\n\t                if (!currentObject) {\r\n\t                    break;\r\n\t                }\r\n\t            } catch (e) {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t\r\n\t        if (i === this.path.length) {\r\n\t            return currentObject;\r\n\t        } else {\r\n\t            return undefined;\r\n\t        }\r\n\t    };\r\n\t\r\n\t    module.binding.impl.nested.TargetFinder = TargetFinder;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../../../utils/findClosure\r\n\t */\r\n\t!function (module){\r\n\t\r\n\t    var TargetWriter = function Izi_binding_impl_nested_TargetWriter(path, writers) {\r\n\t        this.property = path.split(\".\").pop();\r\n\t        this.writers = writers;\r\n\t    };\r\n\t\r\n\t    TargetWriter.prototype.writeValue = function (object, value) {\r\n\t        try {\r\n\t            var writer = module.utils.findClosure(this.writers, [object, this.property, value]);\r\n\t            writer(object, this.property, value);\r\n\t        } catch (e) {\r\n\t        }\r\n\t    };\r\n\t\r\n\t    module.binding.impl.nested.TargetWriter = TargetWriter;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires isNestedProperty.js\r\n\t * @requires TargetFinder.js\r\n\t * @requires TargetWriter.js\r\n\t * @requires ../../../utils/log.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    module.binding.impl.nested.nestedWriter = function () {\r\n\t        var impl = this.impl, targetFinder, targetWriter;\r\n\t\r\n\t        function matcher(object, property) {\r\n\t            var result = module.binding.impl.nested.isNestedProperty(property);\r\n\t            if (result) {\r\n\t                targetFinder = new module.binding.impl.nested.TargetFinder(property, impl.valueReaders);\r\n\t                targetWriter = new module.binding.impl.nested.TargetWriter(property, impl.valueWriters);\r\n\t\r\n\t                if (module.isDebug && property.split(\".\").length > 3) {\r\n\t                    module.utils.log(\"[BINDING]\" + this.getCallerLine() + \" Binding target path \\\"\" + property +\"\\\" has more than 3 parts. Consider using .to(function(value) { target.x.y.x = value; }) instead.\");\r\n\t                }\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t\r\n\t        function writer(object, property, value) {\r\n\t            var target = targetFinder.findFor(object);\r\n\t\r\n\t            if (target) {\r\n\t                targetWriter.writeValue(target, value);\r\n\t            }\r\n\t        }\r\n\t\r\n\t        return matcher.apply(this, arguments) ? writer : null;\r\n\t    }\r\n\t\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    module.utils.inherit = function (Child, Parent) {\r\n\t        var Proxy = function () {\r\n\t        };\r\n\t        Proxy.prototype = Parent.prototype;\r\n\t        Child.prototype = new Proxy();\r\n\t        Child.upper = Parent.prototype;\r\n\t        Child.prototype.constructor = Child;\r\n\t    };\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Array} array\r\n\t     * @param {Function} item\r\n\t     * @param {Object} scope\r\n\t     */\r\n\t    module.utils.every = (function () {\r\n\t\r\n\t        function byEvery(array, fn, scope) {\r\n\t            return Array.prototype.every.call(array, fn, scope);\r\n\t        }\r\n\t\r\n\t        function byLoop(array, fn, scope) {\r\n\t\r\n\t            var len = array.length >>> 0;\r\n\t\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                if (i in array && !fn.call(scope, array[i], i, array))\r\n\t                    return false;\r\n\t            }\r\n\t\r\n\t            return true;\r\n\t        }\r\n\t\r\n\t        function hasEvery() {\r\n\t            return (typeof Array.prototype.every) === 'function';\r\n\t        }\r\n\t\r\n\t        return hasEvery() ? byEvery : byLoop;\r\n\t    }());\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/forEach.js\r\n\t * @requires ../utils/every.js\r\n\t * @requires ../utils/removeItem.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    var forEach = module.utils.forEach,\r\n\t        every = module.utils.every;\r\n\t\r\n\t    var Observable = function Izi_model_Observable() {\r\n\t        this.listeners = {};\r\n\t    };\r\n\t\r\n\t    Observable.prototype = {\r\n\t\r\n\t        constructor: Observable,\r\n\t\r\n\t        /**\r\n\t         * @member Izi.model.Observable\r\n\t         * @noSanity\r\n\t         * @param {String} type\r\n\t         * @return {Object[]} array of objects containing fields: 'fn' and 'scope'\r\n\t         */\r\n\t        findListeners: function (type) {\r\n\t\r\n\t            if (this.listeners[type] === undefined) {\r\n\t                this.listeners[type] = [];\r\n\t            }\r\n\t\r\n\t            return this.listeners[type];\r\n\t        },\r\n\t\r\n\t        /**\r\n\t         * @member Izi.model.Observable\r\n\t         * @noSanity\r\n\t         * @param {String} type\r\n\t         * @param {Array|Arguments} [args]\r\n\t         */\r\n\t        dispatchEvent: function (type, args) {\r\n\t            var me = this;\r\n\t            forEach(this.findListeners(type), function (listener) {\r\n\t                listener.fn.apply(listener.scope || me, args || []);\r\n\t            })\r\n\t        },\r\n\t\r\n\t        /**\r\n\t         * @member Izi.model.Observable\r\n\t         * @noSanity\r\n\t         * @param {String} type\r\n\t         * @param {Function} fn\r\n\t         * @param {Object} [scope]\r\n\t         */\r\n\t        addListener: function (type, fn, scope) {\r\n\t            this.findListeners(type).push({fn: fn, scope: scope});\r\n\t        },\r\n\t\r\n\t        /**\r\n\t         * @member Izi.model.Observable\r\n\t         * @noSanity\r\n\t         * @param {String} type\r\n\t         * @param {Function} fn\r\n\t         */\r\n\t        removeListener: function (type, fn) {\r\n\t            var listeners = this.findListeners(type),\r\n\t                listenerToRemove;\r\n\t\r\n\t\r\n\t            every(listeners, function (listener) {\r\n\t                if (listener.fn === fn) {\r\n\t                    listenerToRemove = listener;\r\n\t                    return false;\r\n\t                }\r\n\t                return true;\r\n\t            });\r\n\t\r\n\t            if (listenerToRemove) {\r\n\t                module.utils.removeItem(listeners, listenerToRemove);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t\r\n\t    module.model.Observable = Observable;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../../Binding.js\r\n\t * @requires ../../Config.js\r\n\t * @requires ../../../utils/inherit.js\r\n\t * @requires ../../../model/Observable.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    function extractFirstField(field) {\r\n\t        if (field.indexOf(\".\") === -1) {\r\n\t            return field;\r\n\t        }\r\n\t        return field.substr(0, field.indexOf(\".\"));\r\n\t    }\r\n\t\r\n\t    function extractNextFields(field) {\r\n\t        if (field.indexOf(\".\") === -1) {\r\n\t            return undefined;\r\n\t        }\r\n\t\r\n\t        return field.substr(field.indexOf(\".\") + 1);\r\n\t    }\r\n\t\r\n\t    var NestedWatcher = function Izi_binding_impl_NestedWatcher(path, bindingImpl) {\r\n\t        this.path = path;\r\n\t        this.bindingImpl = bindingImpl;\r\n\t        this.sourceProperty = extractFirstField(path);\r\n\t\r\n\t        var nextFields = extractNextFields(path);\r\n\t        if (nextFields) {\r\n\t            this.child = new NestedWatcher(nextFields, this.bindingImpl);\r\n\t            this.child.onValueChanged(this.fireChange, this);\r\n\t        }\r\n\t\r\n\t        NestedWatcher.upper.constructor.apply(this);\r\n\t    };\r\n\t\r\n\t    module.utils.inherit(NestedWatcher, module.model.Observable);\r\n\t\r\n\t\r\n\t    NestedWatcher.prototype.setSource = function (source) {\r\n\t        this.stopObserving();\r\n\t        this.source = source;\r\n\t        this.startObserving();\r\n\t    };\r\n\t\r\n\t    NestedWatcher.prototype.onValueChanged = function (callback, scope) {\r\n\t        this.addListener(\"valueChanged\", callback, scope);\r\n\t    };\r\n\t\r\n\t    NestedWatcher.prototype.stopObserving = function () {\r\n\t        if (this.handler) {\r\n\t            this.handler.unbind();\r\n\t        }\r\n\t\r\n\t        if (this.child) {\r\n\t            this.child.stopObserving();\r\n\t        }\r\n\t    };\r\n\t\r\n\t    NestedWatcher.prototype.startObserving = function () {\r\n\t        if (this.source) {\r\n\t            var config = new module.binding.Config(this.bindingImpl)\r\n\t                .withOptions({allowNotWatchable: true})\r\n\t                .withSource(this.source)\r\n\t                .withSourceProperties(this.sourceProperty)\r\n\t                .withTarget(this.valueChanged)\r\n\t                .withTargetProperty(this);\r\n\t            this.handler = new module.binding.Binding(config);\r\n\t        } else {\r\n\t            this.fireChange(undefined);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    NestedWatcher.prototype.valueChanged = function (value) {\r\n\t        if (this.child) {\r\n\t            this.child.setSource(value);\r\n\t        } else {\r\n\t            this.fireChange(value);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    NestedWatcher.prototype.fireChange = function (value) {\r\n\t        this.dispatchEvent(\"valueChanged\", [value]);\r\n\t    };\r\n\t\r\n\t    module.binding.impl.nested.NestedWatcher = NestedWatcher;\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires NestedWatcher.js\r\n\t * @requires isNestedProperty.js\r\n\t * @requires ../createReader.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    function watchForCurrentValue(object, property, bindingImpl) {\r\n\t        var nestedWatcher;\r\n\t\r\n\t        if (!object.iziNestedWatchers) {\r\n\t            object.iziNestedWatchers = {};\r\n\t        }\r\n\t\r\n\t        if (!object.iziNestedWatchers[property]) {\r\n\t            nestedWatcher = new module.binding.impl.nested.NestedWatcher(property, bindingImpl);\r\n\t            nestedWatcher.onValueChanged(function (value) {\r\n\t                this.currentValue = value;\r\n\t            }, nestedWatcher);\r\n\t            nestedWatcher.setSource(object);\r\n\t            object.iziNestedWatchers[property] = nestedWatcher;\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function matcher(bindingImpl) {\r\n\t\r\n\t        return function (object, property, type) {\r\n\t            var isWatchableNestedProperty = type === \"sourceReader\" && module.binding.impl.nested.isNestedProperty(property);\r\n\t\r\n\t            if (isWatchableNestedProperty) {\r\n\t                watchForCurrentValue(object, property, bindingImpl);\r\n\t            }\r\n\t\r\n\t            return isWatchableNestedProperty;\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function reader(object, property) {\r\n\t        return object.iziNestedWatchers[property].currentValue;\r\n\t    }\r\n\t\r\n\t    module.binding.impl.nested.nestedReader = function (bindingImpl) {\r\n\t        return module.binding.impl.createReader(matcher(bindingImpl), reader);\r\n\t    };\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires Bind.js\r\n\t * @requires Config.js\r\n\t *\r\n\t * @requires impl/customPropertyObserver.js\r\n\t * @requires impl/genericValueReaders.js\r\n\t * @requires impl/genericValueWriters.js\r\n\t *\r\n\t * @requires impl/nested/nestedObserver.js\r\n\t * @requires impl/nested/nestedWriter.js\r\n\t * @requires impl/nested/nestedReader.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.binding\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Object} impl\r\n\t     */\r\n\t    module.binding.register = function (impl) {\r\n\t        var nestedImpl = {};\r\n\t        nestedImpl.changeObservers = [module.binding.impl.nested.nestedObserver,\r\n\t                                      module.binding.impl.customPropertyObserver].concat(impl.changeObservers);\r\n\t        nestedImpl.valueWriters = [module.binding.impl.nested.nestedWriter].concat(impl.valueWriters);\r\n\t        nestedImpl.valueReaders = [module.binding.impl.nested.nestedReader(nestedImpl)].concat(impl.valueReaders);\r\n\t\r\n\t        return function (options) {\r\n\t            return new module.binding.Bind(new module.binding.Config(nestedImpl).withOptions(options || {}));\r\n\t        };\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/curry.js\r\n\t */\r\n\t!function (module) {\r\n\t    var curry = module.utils.curry;\r\n\t\r\n\t    /**\r\n\t     * @class Izi.queue.TimeoutGuard\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param {Izi.queue.Queue} queue\r\n\t     */\r\n\t    var TimeoutGuard = function Izi_queue_TimeoutGuard(queue) {\r\n\t        this.queue = queue;\r\n\t        queue.onTaskStarted(this.startCountDown, this);\r\n\t        queue.onTaskFinished(this.stopCountDown, this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.TimeoutGuard\r\n\t     * @private\r\n\t     * @param event\r\n\t     */\r\n\t    TimeoutGuard.prototype.startCountDown = function (event) {\r\n\t        var timeout = this.queue.timeoutForTask(event.task);\r\n\t        if (timeout > 0) {\r\n\t            this.timeoutId = setTimeout(curry(this.timeoutTask, this), timeout);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.TimeoutGuard\r\n\t     * @private\r\n\t     */\r\n\t    TimeoutGuard.prototype.timeoutTask = function () {\r\n\t        this.queue.currentTaskTimeouted();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.TimeoutGuard\r\n\t     * @private\r\n\t     */\r\n\t    TimeoutGuard.prototype.stopCountDown = function () {\r\n\t        clearTimeout(this.timeoutId);\r\n\t    };\r\n\t\r\n\t    module.queue.TimeoutGuard = TimeoutGuard;\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Array} array\r\n\t     * @param {Function} item\r\n\t     * @param {Object} scope\r\n\t     */\r\n\t    module.utils.some = (function () {\r\n\t\r\n\t        function bySome(array, fn, scope) {\r\n\t            return Array.prototype.some.call(array, fn, scope);\r\n\t        }\r\n\t\r\n\t        function byLoop(array, fn, scope) {\r\n\t\r\n\t            var len = array.length >>> 0;\r\n\t            if (typeof fn != \"function\")\r\n\t                throw new TypeError();\r\n\t\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                if (i in array && fn.call(scope, array[i], i, array))\r\n\t                    return true;\r\n\t            }\r\n\t\r\n\t            return false;\r\n\t        }\r\n\t\r\n\t        function hasSome() {\r\n\t            return (typeof Array.prototype.some) === 'function';\r\n\t        }\r\n\t\r\n\t        return hasSome() ? bySome : byLoop;\r\n\t    }());\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires forEach.js\r\n\t * @requires some.js\r\n\t * @requires removeItem.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    var Map = function org_izi_utils_Map() {\r\n\t        this.items = [];\r\n\t    };\r\n\t\r\n\t    Map.prototype.set = function (key, value) {\r\n\t        this.getItemOrCreate(key).value = value;\r\n\t    };\r\n\t\r\n\t    Map.prototype.get = function (key) {\r\n\t        var item = this.getItem(key);\r\n\t        return item ? item.value : undefined;\r\n\t    };\r\n\t\r\n\t    Map.prototype.remove = function (key) {\r\n\t        var item = this.getItem(key);\r\n\t        if (item) {\r\n\t            module.utils.removeItem(this.items, item);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    Map.prototype.getKeys = function () {\r\n\t        var keys = [];\r\n\t        module.utils.forEach(this.items, function (item) {\r\n\t            keys.push(item.key);\r\n\t        });\r\n\t        return keys;\r\n\t    };\r\n\t\r\n\t    Map.prototype.getKeysOf = function (value) {\r\n\t        var keys = [];\r\n\t        module.utils.forEach(this.items, function (item) {\r\n\t            if (item.value === value) {\r\n\t                keys.push(value);\r\n\t            }\r\n\t        });\r\n\t        return keys;\r\n\t    };\r\n\t\r\n\t    Map.prototype.getValues = function () {\r\n\t        var values = [];\r\n\t        module.utils.forEach(this.items, function (item) {\r\n\t            values.push(item.value);\r\n\t        });\r\n\t        return values;\r\n\t    };\r\n\t\r\n\t    Map.prototype.count = function () {\r\n\t        return this.items.length;\r\n\t    };\r\n\t\r\n\t    Map.prototype.countValues = function (value) {\r\n\t        var count = 0;\r\n\t        module.utils.forEach(this.items, function (item) {\r\n\t            if (item.value === value) {\r\n\t                count++;\r\n\t            }\r\n\t        });\r\n\t        return count;\r\n\t    };\r\n\t\r\n\t    Map.prototype.getItemOrCreate = function (key) {\r\n\t        return this.getItem(key) || this.createItem(key);\r\n\t    };\r\n\t\r\n\t    Map.prototype.createItem = function (key) {\r\n\t        var item = {\r\n\t            key: key\r\n\t        };\r\n\t        this.items.push(item);\r\n\t        return item;\r\n\t    };\r\n\t\r\n\t    Map.prototype.getItem = function (key) {\r\n\t        var foundItem = undefined;\r\n\t        module.utils.some(this.items, function (item) {\r\n\t            if (item.key === key) {\r\n\t                foundItem = item;\r\n\t                return true;\r\n\t            }\r\n\t            return false;\r\n\t        });\r\n\t        return foundItem;\r\n\t    };\r\n\t\r\n\t    module.utils.Map = Map;\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../model/Observable.js\r\n\t * @requires ../utils/inherit.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * @class Izi.queue.SynchronizedFunction\r\n\t     * @private\r\n\t     * @param originalFunction\r\n\t     * @param scope\r\n\t     */\r\n\t    var SynchronizedFunction = function Izi_queue_SynchronizedFunction(originalFunction, scope) {\r\n\t        SynchronizedFunction.upper.constructor.apply(this);\r\n\t        this.originalFunction = originalFunction;\r\n\t        this.scope = scope;\r\n\t        this.logLabel = \"synchronize.onCallback()\";\r\n\t    };\r\n\t    module.utils.inherit(SynchronizedFunction, module.model.Observable);\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.SynchronizedFunction\r\n\t     * @private\r\n\t     * @return {Function}\r\n\t     */\r\n\t    SynchronizedFunction.prototype.synchronizedFunction = function () {\r\n\t        try\r\n\t        {\r\n\t            if (this.originalFunction)\r\n\t                return this.originalFunction.apply(this.scope, arguments);\r\n\t        }\r\n\t        finally\r\n\t        {\r\n\t            this.dispatchEvent(\"synchronized\", [this]);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    module.queue.SynchronizedFunction = SynchronizedFunction;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../model/Observable.js\r\n\t * @requires ../utils/inherit.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * @class Izi.queue.SynchronizedOnEvent\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param {izi} iziApi\r\n\t     * @param {Object} dispatcher\r\n\t     * @param {Array|Arguments} events\r\n\t     */\r\n\t    var SynchronizedOnEvent = function Izi_queue_SynchronizedOnEvent(iziApi, dispatcher, events) {\r\n\t        SynchronizedOnEvent.upper.constructor.apply(this);\r\n\t        var perform = iziApi.perform(this.doSynchronized, this);\r\n\t        this.handler = perform.when.apply(perform, events).on(dispatcher);\r\n\t        this.logLabel = \"synchronize.onEvent()\";\r\n\t    };\r\n\t    module.utils.inherit(SynchronizedOnEvent, module.model.Observable);\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.SynchronizedOnEvent\r\n\t     * @private\r\n\t     */\r\n\t    SynchronizedOnEvent.prototype.doSynchronized = function () {\r\n\t        this.handler.stopObserving();\r\n\t        this.dispatchEvent(\"synchronized\", [this]);\r\n\t    };\r\n\t\r\n\t    module.queue.SynchronizedOnEvent = SynchronizedOnEvent;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../model/Observable.js\r\n\t * @requires ../utils/inherit.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * @class Izi.queue.SynchronizedResponder\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param {Object} responder\r\n\t     * @param {String} [resultFunctionName=\"result\"]\r\n\t     * @param {String} [errorFunctionName=\"error\"]\r\n\t     */\r\n\t    var SynchronizedResponder = function Izi_queue_SynchronizedResponder(responder, resultFunctionName, errorFunctionName) {\r\n\t        SynchronizedResponder.upper.constructor.apply(this);\r\n\t\r\n\t        var me = this;\r\n\t        resultFunctionName = resultFunctionName || \"result\";\r\n\t        errorFunctionName = errorFunctionName || \"error\";\r\n\t\r\n\t        this.synchronizedResponder = {};\r\n\t        this.synchronizedResponder[resultFunctionName] = function () {\r\n\t            try {\r\n\t                responder[resultFunctionName].apply(responder, arguments);\r\n\t            } finally {\r\n\t                me.dispatchEvent(\"synchronized\", [me]);\r\n\t            }\r\n\t        };\r\n\t        this.synchronizedResponder[errorFunctionName] = function () {\r\n\t            try {\r\n\t                responder[errorFunctionName].apply(responder, arguments);\r\n\t            } finally {\r\n\t                me.dispatchEvent(\"synchronized\", [me]);\r\n\t            }\r\n\t        };\r\n\t        this.logLabel = \"synchronize.responder()\";\r\n\t    };\r\n\t\r\n\t    module.utils.inherit(SynchronizedResponder, module.model.Observable);\r\n\t\r\n\t    module.queue.SynchronizedResponder = SynchronizedResponder;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/Map.js\r\n\t * @requires ../utils/curry.js\r\n\t * @requires ../utils/forEach.js\r\n\t * @requires SynchronizedFunction.js\r\n\t * @requires SynchronizedOnEvent.js\r\n\t * @requires SynchronizedResponder.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * Synchronizer is a utility that allows you to synchronize current task in the easiest way. Instance of this\r\n\t     * class is available as first argument of `execute()` method when the task is defined as an `Object` or directly\r\n\t     * as first argument of function, when the task is defined as a `Function`:\r\n\t     *\r\n\t     *     var task1 = {\r\n\t     *             execute: function (synchronize) {\r\n\t     *                 // synchronize.onCallback(...)\r\n\t     *                 // synchronize.onEvent(...)\r\n\t     *                 // synchronize.responder(...)\r\n\t     *             }\r\n\t     *         },\r\n\t     *         task2 = function (synchronize) {\r\n\t     *             // synchronize.onCallback(...)\r\n\t     *             // synchronize.onEvent(...)\r\n\t     *             // synchronize.responder(...)\r\n\t     *         }\r\n\t     *     };\r\n\t     *     izi.queue().execute(task1, task2);\r\n\t     *\r\n\t     * When one of:\r\n\t     *\r\n\t     *  * {@link Izi.queue.Synchronizer#onCallback synchronize.onCallback}\r\n\t     *  * {@link Izi.queue.Synchronizer#onEvent synchronize.onEvent}\r\n\t     *  * {@link Izi.queue.Synchronizer#responder synchronize.responder}\r\n\t     *\r\n\t     * is called, it informs the queue that this task calls some asynchronous code, so queue should wait until all asynchronous callbacks\r\n\t     * return. There may be synchronized more than one asynchronous code - the queue will be waiting for all of them.\r\n\t     *\r\n\t     * There is also available access to queue.cancel() method directly in synchronizer:\r\n\t     *\r\n\t     *     var task1 = {\r\n\t     *         execute: function (synchronize) {\r\n\t     *             // store handler of cancelQueue for later execution\r\n\t     *             this.cancelQueue = synchronize.cancelQueue;\r\n\t     *\r\n\t     *             setTimeout(synchronize.onCallback(this.doOnCallback, this), 1000);\r\n\t     *         },\r\n\t     *\r\n\t     *         doOnCallback: function () {\r\n\t     *             if (someCondition) {\r\n\t     *                 this.cancelQueue();\r\n\t     *             }\r\n\t     *         }\r\n\t     *     }\r\n\t     *\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @class Izi.queue.Synchronizer\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Izi.queue.Queue} queue\r\n\t     */\r\n\t    var Synchronizer = function org_izi_queue_Synchronizer(queue) {\r\n\t        this.queue = queue;\r\n\t        this.synchronizations = new module.utils.Map();\r\n\t        this.awaitedTasks = new module.utils.Map();\r\n\t\r\n\t        /**\r\n\t         * Delegates to queue.cancel()\r\n\t         * @member Izi.queue.Synchronizer\r\n\t         */\r\n\t        this.cancelQueue = function () {\r\n\t            queue.cancel();\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Synchronizes the queue after `nonSynchronized` callback will be called by external caller. This method returns\r\n\t     * a closure which executes first `nonSynchronized` function and after that notifies the queue to execute next task.\r\n\t     * If `nonSynchronized` is not given, then queue will just execute next task when callback triggers.\r\n\t     *\r\n\t     * Example 1 - just synchronize on callback\r\n\t     *\r\n\t     *     var task1 = {\r\n\t     *         execute: function(synchronize) {\r\n\t     *             // when setTimeout() callback triggers after 1000ms, then queue will execute `task2`\r\n\t     *             setTimeout(synchronize.onCallback(), 1000);\r\n\t     *         }\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.queue().execute(task1, task2);\r\n\t     *\r\n\t     * Example 2 - synchronize on callback and execute some extra callback code\r\n\t     *\r\n\t     *     var task1 = {\r\n\t     *         execute: function(synchronize) {\r\n\t     *             setTimeout(synchronize.onCallback(this.doOnCallback, this), 1000);\r\n\t     *         }\r\n\t     *\r\n\t     *         doOnCallback: function () {\r\n\t     *             // do some extra code when callback called\r\n\t     *             // after this code the queue will execute `task2`\r\n\t     *         }\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.queue().execute(task1, task2);\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @param {Function} [nonSynchronized]\r\n\t     * @param {Object} [scope]\r\n\t     * @return {Function}\r\n\t     */\r\n\t    Synchronizer.prototype.onCallback = function (nonSynchronized, scope) {\r\n\t        var task = this.obtainTask(),\r\n\t            synchronization = new module.queue.SynchronizedFunction(nonSynchronized, scope);\r\n\t\r\n\t        this.recordSynchronization(synchronization, task);\r\n\t\r\n\t        return module.utils.curry(synchronization.synchronizedFunction, synchronization);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Synchronizes the queue when dispatcher will fire an event of given type\r\n\t     *\r\n\t     * Example - synchronize task when user clicks OK button\r\n\t     *\r\n\t     *     var task1 = {\r\n\t     *         alertPopup: new AlertPopup(),\r\n\t     *\r\n\t     *         execute: function(synchronize) {\r\n\t     *             synchronize.onEvent(this.alertPopup.okButton, izi.events.click());\r\n\t     *         }\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.queue().execute(task1, task2);\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @param {Object} dispatcher\r\n\t     * @param {String...|Izi.events.EventConfig...} vararg of event types as String or `izi.events.*`\r\n\t     */\r\n\t    Synchronizer.prototype.onEvent = function (dispatcher, event) {\r\n\t        var task = this.obtainTask(),\r\n\t            synchronization = new module.queue.SynchronizedOnEvent(this.queue.iziApi, dispatcher, Array.prototype.slice.call(arguments, 1));\r\n\t        this.recordSynchronization(synchronization, task);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Synchronizes the queue when service triggers the responder either on `result()` or `error()` methods.\r\n\t     * If you have reponder with methods different than `result()` or `error()`, then you can specify the custom ones.\r\n\t     *\r\n\t     * Example - synchronize task when any of `result()` or `error()` methods will be triggered\r\n\t     *\r\n\t     *     var task1 = {\r\n\t     *\r\n\t     *         execute: function(synchronize) {\r\n\t     *             Ajax.request(\"/someUrl\", someParameters, synchronize.responder(this));\r\n\t     *         },\r\n\t     *\r\n\t     *         result: function (ajaxResponse) {\r\n\t     *             // some code for handling Ajax response\r\n\t     *             // after this code the queue will execute `task2`\r\n\t     *         },\r\n\t     *\r\n\t     *         error: function (ajaxFailure) {\r\n\t     *             // some code for handling Ajax error\r\n\t     *             // after this code the queue will execute `task2`\r\n\t     *         },\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.queue().execute(task1, task2);\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @param {Object} responder\r\n\t     * @param {String} [resultFunctionName=\"result\"]\r\n\t     * @param {String} [errorFunctionName=\"error\"]\r\n\t     * @return {*}\r\n\t     */\r\n\t    Synchronizer.prototype.responder = function (responder, resultFunctionName, errorFunctionName) {\r\n\t        var task = this.obtainTask(),\r\n\t            synchronization = new module.queue.SynchronizedResponder(responder, resultFunctionName, errorFunctionName);\r\n\t        return this.recordSynchronization(synchronization, task).synchronizedResponder;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @private\r\n\t     * @param synchronization\r\n\t     * @param task\r\n\t     * @return {*}\r\n\t     */\r\n\t    Synchronizer.prototype.recordSynchronization = function (synchronization, task) {\r\n\t        this.queue.log(\"        \" + synchronization.logLabel + \" was used by task: \" + this.queue.getCurrentTaskIndex() + \" of \" + this.queue.countTasks());\r\n\t        this.synchronizations.set(synchronization, task);\r\n\t        synchronization.addListener(\"synchronized\", this.removeSynchronization, this);\r\n\t        return synchronization;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @private\r\n\t     * @param synchronization\r\n\t     */\r\n\t    Synchronizer.prototype.removeSynchronization = function (synchronization) {\r\n\t        var task = this.synchronizations.get(synchronization);\r\n\t        this.synchronizations.remove(synchronization);\r\n\t\r\n\t        var pendingSynchronizationsOnTask = this.countSynchronizations(task);\r\n\t        this.queue.log(\"        \" + synchronization.logLabel + \" completed by task: \" + this.queue.getCurrentTaskIndex() + \" of \" + this.queue.countTasks());\r\n\t        if (pendingSynchronizationsOnTask == 0)\r\n\t            this.taskSynchronized(task);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @private\r\n\t     * @param task\r\n\t     */\r\n\t    Synchronizer.prototype.taskSynchronized = function (task) {\r\n\t        var awaitedTasks = this.awaitedTasks;\r\n\t\r\n\t        var proceedClosure = awaitedTasks.get(task);\r\n\t        if (proceedClosure) {\r\n\t            try {\r\n\t                proceedClosure.fn.apply(proceedClosure.scope);\r\n\t            }\r\n\t            finally {\r\n\t                awaitedTasks.remove(task);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @private\r\n\t     * @param task\r\n\t     * @return {*}\r\n\t     */\r\n\t    Synchronizer.prototype.countSynchronizations = function (task) {\r\n\t        return this.synchronizations.countValues(task);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @private\r\n\t     * @return {*}\r\n\t     */\r\n\t    Synchronizer.prototype.obtainTask = function () {\r\n\t        var task = this.queue.currentTask;\r\n\t        if (!task)\r\n\t            throw new Error(\"There is no task executed. Please use izi.queue().execute(someTask) and use this method.\");\r\n\t        return task;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @private\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    Synchronizer.prototype.hasPendingSynchronizations = function () {\r\n\t        return !!this.synchronizations.count();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @private\r\n\t     * @param task\r\n\t     * @param proceedClosure\r\n\t     */\r\n\t    Synchronizer.prototype.afterSynchronizingTaskCall = function (task, proceedClosure) {\r\n\t        this.awaitedTasks.set(task, proceedClosure);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Synchronizer\r\n\t     * @private\r\n\t     * @param task\r\n\t     */\r\n\t    Synchronizer.prototype.taskTimeout = function (task) {\r\n\t        var synchronizations = this.synchronizations,\r\n\t            synchronizationsToRemove = synchronizations.getKeysOf(task);\r\n\t\r\n\t        this.queue.log(\"    Time outed task: \" + this.queue.getCurrentTaskIndex() + \" of \" + this.queue.countTasks());\r\n\t        this.awaitedTasks.remove(task);\r\n\t\r\n\t        module.utils.forEach(synchronizationsToRemove, function (synchronization) {\r\n\t            synchronizations.remove(synchronization);\r\n\t        });\r\n\t    };\r\n\t\r\n\t    module.queue.Synchronizer = Synchronizer;\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * @class Izi.queue.GenericTask\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param functionToExecute\r\n\t     * @param scope\r\n\t     */\r\n\t    var GenericTask = function Izi_queue_GenericTask(functionToExecute, scope) {\r\n\t        this.functionToExecute = functionToExecute;\r\n\t        this.scope = scope;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.GenericTask\r\n\t     * @private\r\n\t     */\r\n\t    GenericTask.prototype.execute = function () {\r\n\t        this.functionToExecute.apply(this.scope, arguments);\r\n\t    };\r\n\t\r\n\t    module.queue.GenericTask = GenericTask;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/typeOf.js\r\n\t * @requires ../utils/mergeObjects.js\r\n\t * @requires ../utils/forEach.js\r\n\t * @requires ../utils/log.js\r\n\t * @requires TimeoutGuard.js\r\n\t * @requires Synchronizer.js\r\n\t * @requires GenericTask.js\r\n\t */\r\n\t!function (module, global) {\r\n\t\r\n\t    var typeOf = module.utils.typeOf,\r\n\t        mergeObjects = module.utils.mergeObjects,\r\n\t        forEach = module.utils.forEach,\r\n\t        log = module.utils.log,\r\n\t        queueUniqueId = 0;\r\n\t\r\n\t    function formatTimeStamp() {\r\n\t        var now = new Date();\r\n\t        return padding(now.getHours(), 2) +\r\n\t               \":\" +\r\n\t               padding(now.getMinutes(), 2) +\r\n\t               \":\" +\r\n\t               padding(now.getSeconds(), 2) +\r\n\t               \".\" +\r\n\t               padding(now.getMilliseconds(), 3);\r\n\t    }\r\n\t\r\n\t    function padding(value, padding) {\r\n\t        var number = \"\" + value;\r\n\t        return new Array(padding - number.length + 1).join(\"0\") + number;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * `izi.queue()` allows you to define and execute sequence of synchronous and asynchronous tasks. Task may be defined\r\n\t     * as a `Function` or an `Object` with `execute()` function.\r\n\t     *\r\n\t     *     var taskAsFunction = function () {\r\n\t     *         // some code of task\r\n\t     *     }\r\n\t     *\r\n\t     *     var taskAsObject = {\r\n\t     *         execute: function () {\r\n\t     *             // some code of task\r\n\t     *         }\r\n\t     *     }\r\n\t     *\r\n\t     * Example - two equivalent ways for defining and running the queue:\r\n\t     *\r\n\t     *     izi.queue().execute(task1,\r\n\t     *                         task2,\r\n\t     *                         task3);\r\n\t     *\r\n\t     *     // is a shortcut of:\r\n\t     *     izi.queue().push(task1,\r\n\t     *                      task2,\r\n\t     *                      task3).start();\r\n\t     *\r\n\t     * The second example allows you to define a queue once and run many times and also it allows to add event listeners\r\n\t     * before starting the queue:\r\n\t     *\r\n\t     *     var queue = izi.queue().push(task1,\r\n\t     *                                  task2,\r\n\t     *                                  task3);\r\n\t     *\r\n\t     *     queue.onTaskStarted(doSomethingWhenTaskStarted);\r\n\t     *     queue.onTaskFinished(doSomethingWhenTaskFinished);\r\n\t     *\r\n\t     *     queue.start();\r\n\t     *\r\n\t     * When the task executes some asynchronous code and the queue should wait until it finish - then we can say the task\r\n\t     * is asynchronous and we need to notify somehow the queue to not execute next task immediately. This problem is\r\n\t     * solved by usage of **{@link Izi.queue.Synchronizer synchronize}** argument passed to each task, like in example below:\r\n\t     *\r\n\t     *     var asynchronousTask = {\r\n\t     *         execute: function (synchronize) {\r\n\t     *             setTimeout(synchronize.onCallback(), 1000);\r\n\t     *         }\r\n\t     *     };\r\n\t     *     var synchronousTask = {\r\n\t     *         execute: function () {\r\n\t     *             // do some synchronous code\r\n\t     *         }\r\n\t     *     }\r\n\t     *\r\n\t     *     izi.queue().execute(asynchronousTask,\r\n\t     *                         synchronousTask);\r\n\t     *\r\n\t     * You can find more synchronization methods in {@link Izi.queue.Synchronizer} documentation\r\n\t     *\r\n\t     * @class Izi.queue.Queue\r\n\t     * @since 1.2.0\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Object} impl framework queue implementation\r\n\t     * @param {Object} config queue configuration\r\n\t     * @param {izi} iziApi\r\n\t     */\r\n\t    var Queue = function Izi_queue_Queue(impl, config, iziApi) {\r\n\t        var defaultConfig = {\r\n\t            scope: global,\r\n\t            defaultTimeout: 0,\r\n\t            debug: undefined\r\n\t        };\r\n\t\r\n\t        this.config = mergeObjects(defaultConfig, config);\r\n\t        this.iziApi = iziApi;\r\n\t        this.queue = [];\r\n\t        this.originalQueue = [];\r\n\t        if (this.config.debug) {\r\n\t            queueUniqueId++;\r\n\t            this.id = this.config.debug + \":\" + queueUniqueId;\r\n\t        }\r\n\t\r\n\t        this.delegatedIn = impl.createEventDispatcher();\r\n\t        this.dispatchEvent = impl.dispatchEvent;\r\n\t\r\n\t        this.synchronizer = new module.queue.Synchronizer(this);\r\n\t        new module.queue.TimeoutGuard(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Enqueue all given functions and tasks (object with execute function), and execute them sequentially\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @member Izi.queue.Queue\r\n\t     * @param {Function...|Object~execute()...} vararg of tasks or functions\r\n\t     * @return {Izi.queue.Queue}\r\n\t     */\r\n\t    Queue.prototype.execute = function () {\r\n\t        this.pushAll(arguments);\r\n\t        this.start();\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Enqueue all given functions and tasks (object with execute function)\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @member Izi.queue.Queue\r\n\t     * @param {Function...|Object~execute...} vararg of tasks or functions\r\n\t     * @return {Izi.queue.Queue}\r\n\t     */\r\n\t    Queue.prototype.push = function () {\r\n\t        this.pushAll(arguments);\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Start executing tasks synchronously\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @member Izi.queue.Queue\r\n\t     * @return {Izi.queue.Queue}\r\n\t     */\r\n\t    Queue.prototype.start = function () {\r\n\t        if (this.isExecutedTask()) {\r\n\t            throw new Error(\"Can't start already started queue until it's finished\");\r\n\t        }\r\n\t\r\n\t        this.queue = this.originalQueue.slice();\r\n\t        this.log(\"Queue started. Total tasks to execute: \" + this.countTasks());\r\n\t        this.proceed();\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Cancel executing tasks.\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @member Izi.queue.Queue\r\n\t     */\r\n\t    Queue.prototype.cancel = function () {\r\n\t        this.log(\"Queue canceled at executing task: \" + this.getCurrentTaskIndex() + \" of \" + this.countTasks());\r\n\t        this.dispatchTaskEvent(\"queueCanceled\", true);\r\n\t        this.queue = [];\r\n\t        this.clearAndProceed();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Add \"taskStarted\" event listener\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @param {Function} fn\r\n\t     * @param {Object} [scope]\r\n\t     * @return {Izi.behavior.OnWidget}\r\n\t     */\r\n\t    Queue.prototype.onTaskStarted = function (fn, scope) {\r\n\t        return this.iziApi.perform(fn, scope || global).when(\"taskStarted\").on(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Add \"taskFinished\" event listener\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @param {Function} fn\r\n\t     * @param {Object} [scope]\r\n\t     * @return {Izi.behavior.OnWidget}\r\n\t     */\r\n\t    Queue.prototype.onTaskFinished = function (fn, scope) {\r\n\t        return this.iziApi.perform(fn, scope || global).when(\"taskFinished\").on(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Add \"taskTimeouted\" event listener\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @param {Function} fn\r\n\t     * @param {Object} [scope]\r\n\t     * @return {Izi.behavior.OnWidget}\r\n\t     */\r\n\t    Queue.prototype.onTaskTimeouted = function (fn, scope) {\r\n\t        return this.iziApi.perform(fn, scope || global).when(\"taskTimeouted\").on(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Add \"queueFinished\" event listener\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @param {Function} fn\r\n\t     * @param {Object} [scope]\r\n\t     * @return {Izi.behavior.OnWidget}\r\n\t     */\r\n\t    Queue.prototype.onQueueFinished = function (fn, scope) {\r\n\t        return this.iziApi.perform(fn, scope || global).when(\"queueFinished\").on(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Add \"queueCanceled\" event listener\r\n\t     *\r\n\t     * @since 1.2.0\r\n\t     * @param {Function} fn\r\n\t     * @param {Object} [scope]\r\n\t     * @return {Izi.behavior.OnWidget}\r\n\t     */\r\n\t    Queue.prototype.onQueueCanceled = function (fn, scope) {\r\n\t        return this.iziApi.perform(fn, scope || global).when(\"queueCanceled\").on(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @param tasksOrFunctions\r\n\t     */\r\n\t    Queue.prototype.pushAll = function (tasksOrFunctions) {\r\n\t        var me = this;\r\n\t\r\n\t        forEach(tasksOrFunctions, function (taskOrFunction, index) {\r\n\t\r\n\t            if (typeOf(taskOrFunction) === 'Function') {\r\n\t                me.pushFunction(taskOrFunction);\r\n\t            } else if (typeOf(taskOrFunction) === 'Object' && typeOf(taskOrFunction.execute) === 'Function') {\r\n\t                me.pushTask(taskOrFunction);\r\n\t            } else {\r\n\t                throw new Error(\"Invalid queue element given at index: \" + index + \". Expected Function or Object with execute() function.\");\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @param task\r\n\t     */\r\n\t    Queue.prototype.pushTask = function (task) {\r\n\t        this.originalQueue.push(task);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @param fn\r\n\t     */\r\n\t    Queue.prototype.pushFunction = function (fn) {\r\n\t        this.pushTask(new module.queue.GenericTask(fn, this.getScope()));\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @return {*}\r\n\t     */\r\n\t    Queue.prototype.getScope = function () {\r\n\t        return this.config.scope;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     */\r\n\t    Queue.prototype.proceed = function () {\r\n\t        if (this.isExecutedTask())\r\n\t            return;\r\n\t\r\n\t        if (this.isEmptyQueue()) {\r\n\t            this.log(\"\");\r\n\t            this.log(\"Queue finished\");\r\n\t            this.dispatchTaskEvent(\"queueFinished\");\r\n\t            return;\r\n\t        }\r\n\t\r\n\t        this.executeSynchronously(this.queue.shift());\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    Queue.prototype.isEmptyQueue = function () {\r\n\t        return this.queue.length === 0\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    Queue.prototype.isExecutedTask = function () {\r\n\t        return !!this.currentTask;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @param task\r\n\t     */\r\n\t    Queue.prototype.executeSynchronously = function (task) {\r\n\t        this.currentTask = task;\r\n\t        this.log(\"\");\r\n\t        this.log(\"    Task started: \" + this.getCurrentTaskIndex() + \" of \" + this.countTasks());\r\n\t        this.dispatchTaskEvent(\"taskStarted\", true);\r\n\t        task.execute(this.synchronizer);\r\n\t        this.awaitSynchronizerOrProceed();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     */\r\n\t    Queue.prototype.awaitSynchronizerOrProceed = function () {\r\n\t        if (this.synchronizer.hasPendingSynchronizations()) {\r\n\t            this.synchronizer.afterSynchronizingTaskCall(this.currentTask, {fn: this.taskSynchronized, scope: this});\r\n\t        }\r\n\t        else {\r\n\t            this.log(\"        No synchronizations used by task: \" + this.getCurrentTaskIndex() + \" of \" + this.countTasks());\r\n\t            this.taskSynchronized();\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     */\r\n\t    Queue.prototype.taskSynchronized = function () {\r\n\t        this.log(\"    Task finished: \" + this.getCurrentTaskIndex() + \" of \" + this.countTasks());\r\n\t        this.dispatchTaskEvent(\"taskFinished\", true);\r\n\t        this.clearAndProceed();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     */\r\n\t    Queue.prototype.clearAndProceed = function () {\r\n\t        this.currentTask = undefined;\r\n\t        this.proceed();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @param type\r\n\t     * @param addStatistics\r\n\t     */\r\n\t    Queue.prototype.dispatchTaskEvent = function (type, addStatistics) {\r\n\t        var event = {\r\n\t            type: type,\r\n\t            queue: this,\r\n\t            task: this.currentTask\r\n\t        };\r\n\t        if (addStatistics) {\r\n\t            event.currentTask = this.getCurrentTaskIndex();\r\n\t            event.totalTasks = this.countTasks();\r\n\t        }\r\n\t        this.dispatchEvent(this.delegatedIn, type, event)\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @return {number}\r\n\t     */\r\n\t    Queue.prototype.getCurrentTaskIndex = function () {\r\n\t        return this.originalQueue.length - this.queue.length;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @return {Number}\r\n\t     */\r\n\t    Queue.prototype.countTasks = function () {\r\n\t        return this.originalQueue.length;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     * @param task\r\n\t     * @return {Number}\r\n\t     */\r\n\t    Queue.prototype.timeoutForTask = function (task) {\r\n\t        // todo - specific timeouts for tasks\r\n\t        return this.config.defaultTimeout;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.queue.Queue\r\n\t     * @private\r\n\t     */\r\n\t    Queue.prototype.currentTaskTimeouted = function () {\r\n\t        this.synchronizer.taskTimeout(this.currentTask);\r\n\t        this.dispatchTaskEvent(\"taskTimeouted\", true);\r\n\t        this.clearAndProceed();\r\n\t    };\r\n\t\r\n\t    Queue.prototype.log = function (message) {\r\n\t        if (this.config.debug) {\r\n\t            log(\"[izi.queue:\" + this.id + \"] \" + formatTimeStamp() + \" \" + message);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    module.queue.Queue = Queue;\r\n\t\r\n\t}(Izi, this);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires Queue.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.binding\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Object} impl\r\n\t     * @param {izi} iziApi\r\n\t     */\r\n\t    module.queue.register = function (impl, iziApi) {\r\n\t\r\n\t        return function (config) {\r\n\t            return new module.queue.Queue(impl, config, iziApi);\r\n\t        };\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires indexOf.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {Array} array\r\n\t     * @param {*} item\r\n\t     * @return {Boolean}\r\n\t     */\r\n\t    module.utils.arrayContains = function (array, item) {\r\n\t        return module.utils.indexOf(array, item) !== -1;\r\n\t    };\r\n\t}(Izi);\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @param {String} classString\r\n\t     * @private\r\n\t     * @constructor\r\n\t     */\r\n\t    module.utils.ClassNotFound = function (classString) {\r\n\t        this.message = \"Class name given as string: \\\"\" + classString + \"\\\" couldn't be resolved as a class\";\r\n\t    };\r\n\t\r\n\t    module.utils.ClassNotFound.prototype = new Error();\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires forEach.js\r\n\t * @requires ClassNotFound.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @private\r\n\t     * @param {String} classString\r\n\t     * @param {Object} globals\r\n\t     * @return {Function}\r\n\t     */\r\n\t    module.utils.getClassByName = function (classString, globals) {\r\n\t        var currentPart,\r\n\t            parts = classString.split(\".\");\r\n\t        currentPart = globals;\r\n\t\r\n\t        module.utils.forEach(parts, function (part) {\r\n\t            var nextPart = currentPart[part];\r\n\t            if (nextPart === undefined) {\r\n\t                throw new module.utils.ClassNotFound(classString);\r\n\t            }\r\n\t            currentPart = nextPart;\r\n\t        });\r\n\t\r\n\t        return currentPart;\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/typeOf.js\r\n\t * @requires ../utils/getClassByName.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * Configuration used in IoC/DI fluent API\r\n\t     * @class Izi.ioc.Config\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Function|String|Object} Class Class constructor, dotted class definition string or ready instance of bean\r\n\t     * @param {Function} Strategy Strategy constructor\r\n\t     * @param {Object} globals\r\n\t     */\r\n\t    var Config = function Izi_ioc_Config(Class, Strategy, globals) {\r\n\t        this.Clazz = this._resolveClass(Class, globals);\r\n\t        this.Strategy = Strategy;\r\n\t        this.args = [];\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.ioc.Config\r\n\t     * @private\r\n\t     * @return {*}\r\n\t     */\r\n\t    Config.prototype.createStrategy = function () {\r\n\t        return new this.Strategy(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.ioc.Config\r\n\t     * @private\r\n\t     * @return {Array}\r\n\t     */\r\n\t    Config.prototype.getArguments = function () {\r\n\t        return this.args;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.ioc.Config\r\n\t     * @private\r\n\t     * @return {Array}\r\n\t     */\r\n\t    Config.prototype.getProperties = function () {\r\n\t        return this.props;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.ioc.Config\r\n\t     * @private\r\n\t     * @return {Function|String|Object}\r\n\t     */\r\n\t    Config.prototype.getClazz = function () {\r\n\t        return this.Clazz;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Arguments that will be used to object creation. It accept also {@link izi#inject izi.inject()} values.\r\n\t     *     izi.bakeBeans({\r\n\t     *         bean: izi.instantiate(Class).withArgs(\"Value\", izi.inject(\"beanId\")\r\n\t     *     });\r\n\t     *\r\n\t     * @member Izi.ioc.Config\r\n\t     * @noSanity\r\n\t     * @param {Object...|Izi.ioc.Injection...} vararg arguments\r\n\t     * @return {Izi.ioc.Config}\r\n\t     */\r\n\t    Config.prototype.withArgs = function () {\r\n\t        if (arguments.length > 10) {\r\n\t            throw new Error(\"Too many arguments passed. Ten arguments is maximum.\");\r\n\t        }\r\n\t\r\n\t        this.args = arguments;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Properties that will be used to overwrite on created bean. It accept also {@link izi#inject izi.inject()} values.\r\n\t     *     izi.bakeBeans({\r\n\t     *         bean: izi.instantiate(Class).withProps({field1: \"Value 1\", field2: izi.inject(\"beanId\")})\r\n\t     *     });\r\n\t     *\r\n\t     * @member Izi.ioc.Config\r\n\t     * @noSanity\r\n\t     * @param {Object} props Map of property=>value used to overwrite on bean\r\n\t     * @return {Izi.ioc.Config}\r\n\t     */\r\n\t    Config.prototype.withProps = function (props) {\r\n\t        this.props = props;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    Config.prototype._resolveClass = function (Class, globals) {\r\n\t        if (module.utils.typeOf(Class) === \"String\") {\r\n\t            Class = module.utils.getClassByName(Class, globals);\r\n\t        }\r\n\t        return Class;\r\n\t    };\r\n\t\r\n\t    module.ioc.Config = Config;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../../utils/forEach.js\r\n\t * @requires ../../utils/getClassByName.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    function matchesById(selfId, otherId) {\r\n\t        return selfId === otherId;\r\n\t    }\r\n\t\r\n\t    function matchesByType(factory, type) {\r\n\t        return factory.matchesByType(type);\r\n\t    }\r\n\t\r\n\t    function injectDependenciesOnProperties(context, bean) {\r\n\t        var prop;\r\n\t        bean.iziInjectingInProgress = true;\r\n\t        for (prop in bean) {\r\n\t            var injection = bean[prop];\r\n\t            if (injection && injection.isIziInjection) {\r\n\t                injection.injector(bean, prop, injection.resolveBean(context));\r\n\t            }\r\n\t        }\r\n\t        delete bean.iziInjectingInProgress;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Bean instance builder based on given strategy.\r\n\t     * @class Izi.ioc.bean.BeanBuilder\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param {String} id\r\n\t     * @param {Object} strategy\r\n\t     * @param {Function} strategy.init\r\n\t     * @param {Function} strategy.create\r\n\t     * @param {Function} strategy.matchesByType\r\n\t     * @param {Function} strategy.getArguments\r\n\t     * @param {Object} globals\r\n\t     */\r\n\t    var BeanBuilder = function Izi_ioc_bean_BeanBuilder(id, strategy, globals) {\r\n\t        this.id = id;\r\n\t        this.strategy = strategy;\r\n\t        this.globals = globals;\r\n\t        this.createdBeans = [];\r\n\t        if (!globals) {\r\n\t            throw new Error(\"`globals` not defined\");\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Delegates init on strategy\r\n\t     * @member Izi.ioc.bean.BeanBuilder\r\n\t     * @private\r\n\t     * @param beansContext\r\n\t     * @return {*}\r\n\t     */\r\n\t    BeanBuilder.prototype.init = function (beansContext) {\r\n\t        return this.strategy.init(beansContext);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Delegates create on strategy\r\n\t     * @member Izi.ioc.bean.BeanBuilder\r\n\t     * @private\r\n\t     * @param context\r\n\t     * @return {*}\r\n\t     */\r\n\t    BeanBuilder.prototype.create = function (context) {\r\n\t        var bean = this.strategy.create(context);\r\n\t\r\n\t        if (bean.iziInjectingInProgress) {\r\n\t            return bean;\r\n\t        }\r\n\t\r\n\t        injectDependenciesOnProperties(context, bean);\r\n\t\r\n\t        if (bean.iziContext && !bean.iziContextCalled) {\r\n\t            bean.iziContextCalled = true;\r\n\t            bean.iziContext(context);\r\n\t        }\r\n\t        if (bean.iziInit && !bean.iziInitCalled) {\r\n\t            bean.iziInitCalled = true;\r\n\t            bean.iziInit();\r\n\t        }\r\n\t\r\n\t        this.createdBeans.push(bean);\r\n\t\r\n\t        return bean;\r\n\t    };\r\n\t\r\n\t    BeanBuilder.prototype.destroyCreatedBeans = function () {\r\n\t        module.utils.forEach(this.createdBeans, function (createdBean) {\r\n\t            if (createdBean.iziDestroy) {\r\n\t                try {\r\n\t                    createdBean.iziDestroy();\r\n\t                } catch (e) {\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t\r\n\t        this.id = undefined;\r\n\t        this.strategy = undefined;\r\n\t        this.createdBeans = undefined;\r\n\t    };\r\n\t\r\n\t    BeanBuilder.prototype.preDestroyCreatedBeans = function () {\r\n\t        module.utils.forEach(this.createdBeans, function (createdBean) {\r\n\t            if (createdBean.iziPreDestroy) {\r\n\t                createdBean.iziPreDestroy();\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Matches factory by id or class type\r\n\t     * @member Izi.ioc.bean.BeanBuilder\r\n\t     * @private\r\n\t     * @param {String|Function} idOrType\r\n\t     * @return {Boolean}\r\n\t     */\r\n\t    BeanBuilder.prototype.matches = function (idOrType) {\r\n\t        if ((typeof idOrType) === \"string\") {\r\n\t            return idOrType.indexOf(\".\") !== -1\r\n\t                ? matchesByType(this.strategy, module.utils.getClassByName(idOrType, this.globals))\r\n\t                : matchesById(this.id, idOrType);\r\n\t        } else {\r\n\t            return matchesByType(this.strategy, idOrType);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Get bean factories that are set as argument dependencies\r\n\t     * @member Izi.ioc.bean.BeanBuilder\r\n\t     * @private\r\n\t     * @param context\r\n\t     * @return {*}\r\n\t     */\r\n\t    BeanBuilder.prototype.getArgumentsDependencies = function (context) {\r\n\t\r\n\t        function findArgumentsDependencies(args) {\r\n\t            var results = [];\r\n\t            module.utils.forEach(args, function (arg) {\r\n\t                if (arg && arg.isIziInjection) {\r\n\t                    results.push(arg.findBeanBuilder(context));\r\n\t                }\r\n\t            });\r\n\t            return results;\r\n\t        }\r\n\t\r\n\t        return findArgumentsDependencies(this.strategy.getArguments());\r\n\t    };\r\n\t\r\n\t    module.ioc.bean.BeanBuilder = BeanBuilder;\r\n\t}(Izi);\r\n\t!function(module){\r\n\t    /**\r\n\t     * Ready instance strategy used in {@link Izi.ioc.bean.BeanBuilder}\r\n\t     * @class Izi.ioc.bean.InstanceStrategy\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param {*} instance\r\n\t     */\r\n\t    var InstanceStrategy = function Izi_ioc_bean_InstanceStrategy(instance) {\r\n\t        this.instance = instance;\r\n\t    };\r\n\t\r\n\t    InstanceStrategy.prototype.init = function (beansContext) {\r\n\t        return this.instance;\r\n\t    };\r\n\t\r\n\t    InstanceStrategy.prototype.create = function (beansContext) {\r\n\t        return this.instance;\r\n\t    };\r\n\t\r\n\t    InstanceStrategy.prototype.matchesByType = function (type) {\r\n\t        return this.instance instanceof type;\r\n\t    };\r\n\t\r\n\t    InstanceStrategy.prototype.getArguments = function () {\r\n\t        return [];\r\n\t    };\r\n\t\r\n\t    module.ioc.bean.InstanceStrategy = InstanceStrategy;\r\n\t}(Izi);\r\n\t!function(module) {\r\n\t    /**\r\n\t     * @private\r\n\t     * @param {String|Function} beanIdOrType\r\n\t     * @constructor\r\n\t     */\r\n\t    module.ioc.bean.NoBeanMatched = function (beanIdOrType) {\r\n\t        this.message = \"No bean matched: \" + beanIdOrType;\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/typeOf.js\r\n\t * @requires ../utils/forEach.js\r\n\t * @requires ../utils/hasOwnProperty.js\r\n\t * @requires ../utils/every.js\r\n\t * @requires ../model/Observable.js\r\n\t * @requires Config.js\r\n\t * @requires bean/BeanBuilder.js\r\n\t * @requires bean/InstanceStrategy.js\r\n\t * @requires bean/NoBeanMatched.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    function normalizeBeans(beans) {\r\n\t        if (module.utils.typeOf(beans) === 'Array') {\r\n\t            return mergeBeans(beans);\r\n\t        } else {\r\n\t            return beans;\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function mergeBeans(beansCollection) {\r\n\t        var result = {};\r\n\t        module.utils.forEach(beansCollection, function (beans) {\r\n\t            iterateOwnProperties(beans, function (key, value) {\r\n\t                if (result[key] === undefined) {\r\n\t                    result[key] = value;\r\n\t                } else {\r\n\t                    throw new Error('Found duplicated bean ID: \"' + key + '\" in multiple configurations');\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t        return result;\r\n\t    }\r\n\t\r\n\t    function iterateOwnProperties(object, callback) {\r\n\t        for (var key in object) {\r\n\t            if (module.utils.hasOwnProperty(object, key)) {\r\n\t                callback(key, object[key]);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function createBeansBuilders(beans, beansBuilders, globals) {\r\n\t        var beanId, beanConfig, beanBuilder;\r\n\t\r\n\t        for (beanId in beans) {\r\n\t            if (module.utils.hasOwnProperty(beans, beanId)) {\r\n\t                beanConfig = beans[beanId];\r\n\t\r\n\t                if (beanConfig instanceof module.ioc.Config) {\r\n\t                    beanBuilder = new module.ioc.bean.BeanBuilder(beanId, beanConfig.createStrategy(), globals);\r\n\t                } else if (module.utils.typeOf(beanConfig) === \"Function\") {\r\n\t                    var config = new module.ioc.Config(beanConfig, module.ioc.bean.SingletonStrategy, globals);\r\n\t                    beanBuilder = new module.ioc.bean.BeanBuilder(beanId, config.createStrategy(), globals);\r\n\t                } else {\r\n\t                    beanBuilder = new module.ioc.bean.BeanBuilder(beanId, new module.ioc.bean.InstanceStrategy(beanConfig), globals);\r\n\t                }\r\n\t\r\n\t                beansBuilders.push(beanBuilder);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function findCircularDependencies(beansContext, beanBuilder) {\r\n\t\r\n\t        function visitDependencies(visitedBuilder) {\r\n\t            var dependencies = visitedBuilder.getArgumentsDependencies(beansContext);\r\n\t\r\n\t            module.utils.forEach(dependencies, function (dependency) {\r\n\t                if (dependency === beanBuilder) {\r\n\t                    throw new Error(\"Circular dependencies found. If it is possible try inject those dependencies by properties instead by arguments.\");\r\n\t                }\r\n\t                visitDependencies(dependency);\r\n\t            });\r\n\t        }\r\n\t\r\n\t        visitDependencies(beanBuilder);\r\n\t    }\r\n\t\r\n\t    function initBean(beansContext, beanBuilder) {\r\n\t        findCircularDependencies(beansContext, beanBuilder);\r\n\t        return beanBuilder.init(beansContext);\r\n\t    }\r\n\t\r\n\t    function initAllBeans(beansContext, beansBuilders) {\r\n\t        var bean, beansToCreate = [];\r\n\t\r\n\t        module.utils.forEach(beansBuilders, function (beanBuilder) {\r\n\t            bean = initBean(beansContext, beanBuilder);\r\n\t            if (bean) {\r\n\t                beansToCreate.push(beanBuilder);\r\n\t            }\r\n\t        });\r\n\t\r\n\t        module.utils.forEach(beansToCreate, function (beanToCreate) {\r\n\t            beanToCreate.create(beansContext);\r\n\t        });\r\n\t    }\r\n\t\r\n\t    function createPreDestroyEvent() {\r\n\t        return {\r\n\t\r\n\t            isPrevented: false,\r\n\t\r\n\t            isDestroyPrevented: function () {\r\n\t                return this.isPrevented;\r\n\t            },\r\n\t\r\n\t            preventDestroy: function () {\r\n\t                this.isPrevented = true;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * @ignore\r\n\t     * @param {Izi.ioc.BeansContext} beansContext\r\n\t     */\r\n\t    function handleDestroyFromParentContext(beansContext) {\r\n\t        var parentContext = beansContext.parentContext,\r\n\t            childrenDispatcher = beansContext.destroyDispatcher,\r\n\t            parentDispatcher = parentContext && parentContext.destroyDispatcher;\r\n\t\r\n\t        if (!parentDispatcher) {\r\n\t            return;\r\n\t        }\r\n\t\r\n\t        function handlePreDestroy(event) {\r\n\t            childrenDispatcher.dispatchEvent(\"preDestroy\", arguments);\r\n\t            if (event.isDestroyPrevented()) {\r\n\t                return;\r\n\t            }\r\n\t\r\n\t            var shouldDestroy = beansContext.doPreDestroy();\r\n\t            if (!shouldDestroy) {\r\n\t                event.preventDestroy();\r\n\t            }\r\n\t        }\r\n\t\r\n\t        function handleDestroy(event) {\r\n\t            parentDispatcher.removeListener(\"destroy\", handleDestroy);\r\n\t            parentDispatcher.removeListener(\"preDestroy\", handlePreDestroy);\r\n\t\r\n\t            childrenDispatcher.dispatchEvent(\"destroy\", arguments);\r\n\t            beansContext.doDestroy();\r\n\t        }\r\n\t\r\n\t        parentDispatcher.addListener(\"preDestroy\", handlePreDestroy);\r\n\t        parentDispatcher.addListener(\"destroy\", handleDestroy);\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * BeansContext instance is returned by {@link izi#bakeBeans izi.bakeBeans()} function. It is also available\r\n\t     * in <code>.iziContext(context)</code> function implemented on any bean, ie:\r\n\t     *\r\n\t     *     izi.bakeBeans({\r\n\t     *\r\n\t     *         bean: izi.instantiate(SomeDependency),\r\n\t     *\r\n\t     *         myBean: {\r\n\t     *\r\n\t     *             dependency: izi.inject(SomeDependency),\r\n\t     *\r\n\t     *             iziContext: function (context) {\r\n\t     *                 // iziContext function is called when all dependencies are provided and ready to use\r\n\t     *             }\r\n\t     *\r\n\t     *             iziInit: function () {\r\n\t     *                 // iziInit() is called after iziContext()\r\n\t     *             }\r\n\t     *         }\r\n\t     *     });\r\n\t     *\r\n\t     *  When you have BeansContext reference, you can:\r\n\t     *\r\n\t     *   * wire dependencies to object created outside the context: <code>context.wire(objectContainingIziInjects)</code>\r\n\t     *   * create descendant context: <code>izi.bakeBeans({...}, parentContext);</code>\r\n\t     *   * destroy context: <code>context.destroy()</code>\r\n\t     *\r\n\t     * @class Izi.ioc.BeansContext\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {Object} globals\r\n\t     * @param {Object|Object[]} beans Beans configuration as a map of beanId:bean or array of maps.\r\n\t     * @param {Izi.ioc.BeansContext} [parentContext]\r\n\t     */\r\n\t    var BeansContext = function Izi_ioc_BeansContext(globals, beans, parentContext) {\r\n\t        this.globals = globals;\r\n\t        this.beans = normalizeBeans(beans);\r\n\t        this.destroyDispatcher = new module.model.Observable();\r\n\t        this.parentContext = parentContext;\r\n\t        this.beansBuilders = [];\r\n\t\r\n\t        handleDestroyFromParentContext(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Init context\r\n\t     * @member Izi.ioc.BeansContext\r\n\t     * @private\r\n\t     * @return {Izi.ioc.BeansContext}\r\n\t     */\r\n\t    BeansContext.prototype.initContext = function () {\r\n\t\r\n\t        createBeansBuilders(this.beans, this.beansBuilders, this.globals);\r\n\t        initAllBeans(this, this.beansBuilders);\r\n\t\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Find bean by its id or class name\r\n\t     * @member Izi.ioc.BeansContext\r\n\t     * @param {String|Function} beanIdOrType\r\n\t     * @return {*}\r\n\t     */\r\n\t    BeansContext.prototype.getBean = function (beanIdOrType) {\r\n\t\r\n\t        var beanBuilder = this.findBeanBuilder(beanIdOrType);\r\n\t\r\n\t        if (!beanBuilder) {\r\n\t            throw new module.ioc.bean.NoBeanMatched(beanIdOrType);\r\n\t        }\r\n\t\r\n\t        return beanBuilder.create(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Injects needed dependencies from this context into passed object.\r\n\t     * @member Izi.ioc.BeansContext\r\n\t     * @since 1.3.0\r\n\t     * @param {Object} objectContainingIziInjects\r\n\t     * @return {Object}\r\n\t     */\r\n\t    BeansContext.prototype.wire = function (objectContainingIziInjects) {\r\n\t        var strategy = new module.ioc.bean.InstanceStrategy(objectContainingIziInjects),\r\n\t            beanBuilder = new module.ioc.bean.BeanBuilder(\"\", strategy, this.globals);\r\n\t        this.beansBuilders.push(beanBuilder);\r\n\t        return beanBuilder.create(this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Destroys beans context and all descendant contexts. First it calls <code>.iziPreDestroy()</code> method on every\r\n\t     * created bean if implemented. Throwing an error inside <code>.iziPreDestroy()</code> stops destroying the context.\r\n\t     * After calling <code>.iziPreDestroy()</code> izi calls <code>.iziDestroy()</code> methods on every created bean\r\n\t     * if implemented. All thrown errors inside <code>.iziDestroy()</code> are caught and ignored.\r\n\t     *\r\n\t     * <code>.iziDestroy()</code> is a place where you should unregister all event listeners added within its class.\r\n\t     *\r\n\t     *     var context = izi.bakeBeans({\r\n\t     *\r\n\t     *         someBean: {\r\n\t     *\r\n\t     *             iziInit: function () {\r\n\t     *                 var bind = this.bind = izi.bind();\r\n\t     *\r\n\t     *                 bind.valueOf(loginInput).to(model, \"login\");\r\n\t     *                 bind.valueOf(passwordInput).to(model, \"password\");\r\n\t     *\r\n\t     *                 this.login = izi.perform(doLogin).when(\"click\").on(loginButton);\r\n\t     *             },\r\n\t     *\r\n\t     *             iziPreDestroy: function () {\r\n\t     *                 // you can throw new Error() here if you don't want to destroy context for any reason\r\n\t     *             }\r\n\t     *\r\n\t     *             iziDestroy: function () {\r\n\t     *                 this.bind.unbindAll();\r\n\t     *                 this.login.stopObserving();\r\n\t     *             }\r\n\t     *         }\r\n\t     *     });\r\n\t     *\r\n\t     *     context.destroy();\r\n\t     *\r\n\t     * @member Izi.ioc.BeansContext\r\n\t     * @return {boolean} true when destroying was successful, false when any of beans thrown an exception in iziPreDestroy() method\r\n\t     * @since 1.4.0\r\n\t     */\r\n\t    BeansContext.prototype.destroy = function () {\r\n\t        var destroyDispatcher = this.destroyDispatcher,\r\n\t            preDestroyEvent = createPreDestroyEvent();\r\n\t\r\n\t        destroyDispatcher.dispatchEvent(\"preDestroy\", [preDestroyEvent]);\r\n\t\r\n\t        if (preDestroyEvent.isDestroyPrevented()) {\r\n\t            return false;\r\n\t        }\r\n\t\r\n\t        var shouldDestroy = this.doPreDestroy();\r\n\t\r\n\t        if (!shouldDestroy) {\r\n\t            return false;\r\n\t        }\r\n\t\r\n\t        destroyDispatcher.dispatchEvent(\"destroy\");\r\n\t        this.doDestroy();\r\n\t\r\n\t        return true;\r\n\t    };\r\n\t\r\n\t    BeansContext.prototype.doPreDestroy = function () {\r\n\t        return module.utils.every(this.beansBuilders, function (beanBuilder) {\r\n\t            try {\r\n\t                beanBuilder.preDestroyCreatedBeans();\r\n\t                return true;\r\n\t            } catch (e) {\r\n\t                return false;\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t\r\n\t    BeansContext.prototype.doDestroy = function () {\r\n\t        module.utils.forEach(this.beansBuilders, function (beanBuilder) {\r\n\t            beanBuilder.destroyCreatedBeans();\r\n\t        });\r\n\t        this.beansBuilders = [];\r\n\t        this.beans = undefined;\r\n\t        this.parentContext = undefined;\r\n\t        this.destroyDispatcher = undefined;\r\n\t\r\n\t        return true;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Find bean builder by its id or type\r\n\t     * @member Izi.ioc.BeansContext\r\n\t     * @private\r\n\t     * @param {String/Function} beanIdOrType\r\n\t     * @return {Izi.ioc.bean.BeanBuilder}\r\n\t     */\r\n\t    BeansContext.prototype.findBeanBuilder = function (beanIdOrType) {\r\n\t        var foundBuilder = null;\r\n\t\r\n\t        module.utils.forEach(this.beansBuilders, function (factory) {\r\n\t            if (factory.matches(beanIdOrType)) {\r\n\t                if (foundBuilder) {\r\n\t                    throw new Error(\"Ambiguous reference to bean by type. Please refer by id.\");\r\n\t                }\r\n\t                foundBuilder = factory;\r\n\t            }\r\n\t        });\r\n\t\r\n\t        if (!foundBuilder && this.parentContext !== undefined) {\r\n\t            foundBuilder = this.parentContext.findBeanBuilder(beanIdOrType);\r\n\t        }\r\n\t\r\n\t        return foundBuilder;\r\n\t    };\r\n\t\r\n\t    module.ioc.BeansContext = BeansContext;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../utils/getCallerLineProvider.js\r\n\t * @requires ../utils/typeOf.js\r\n\t * @requires ../utils/ClassNotFound.js\r\n\t * @requires ../utils/typeOf.js\r\n\t * @requires bean/NoBeanMatched.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    function defaultInjector(target, prop, dependency) {\r\n\t        target[prop] = dependency;\r\n\t    }\r\n\t\r\n\t    function defaultDependencyConverter(dependency) {\r\n\t        return dependency;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Injection marker for beans arguments and properties.\r\n\t     * @class Izi.ioc.Injection\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {String|Function} beanIdOrType Bean id or constructor function or dotted string class definition\r\n\t     */\r\n\t    var Injection = function Izi_ioc_Injection(beanIdOrType) {\r\n\t        this.beanIdOrType = beanIdOrType;\r\n\t        this.getCallerLine = module.utils.getCallerLineProvider(2);\r\n\t        this.injector = defaultInjector;\r\n\t        this.dependencyConverter = defaultDependencyConverter;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @member Izi.ioc.Injection\r\n\t     * @private\r\n\t     * @return {String}\r\n\t     */\r\n\t    Injection.prototype.getBeanNotFoundMessage = function() {\r\n\t        var beanName;\r\n\t        if (module.utils.typeOf(this.beanIdOrType) === \"Function\") {\r\n\t            beanName = this.beanIdOrType.name || this.beanIdOrType;\r\n\t        } else {\r\n\t            beanName = this.beanIdOrType;\r\n\t        }\r\n\t        return \"Bean: `\" + beanName + \"` couldn't be found from injection at line:\\n\" + this.getCallerLine();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Delegates get bean\r\n\t     * @member Izi.ioc.Injection\r\n\t     * @private\r\n\t     * @param {Izi.ioc.BeansContext} beansContext\r\n\t     * @return {*}\r\n\t     */\r\n\t    Injection.prototype.resolveBean = function (beansContext) {\r\n\t        var bean;\r\n\t        try {\r\n\t            bean = beansContext.getBean(this.beanIdOrType);\r\n\t        } catch (e) {\r\n\t            if (e instanceof module.utils.ClassNotFound || e instanceof module.ioc.bean.NoBeanMatched) {\r\n\t                throw new Error(this.getBeanNotFoundMessage());\r\n\t            }\r\n\t            else {\r\n\t                throw e;\r\n\t            }\r\n\t        }\r\n\t        return this.dependencyConverter(bean);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Warning: use only for property injection! It doesn't work for constructor argument injection.\r\n\t     *\r\n\t     * The default property injection just set dependency as property in following code:\r\n\t     *\r\n\t     *     function defaultInjector(target, prop, dependency) {\r\n\t     *         target[prop] = dependency;\r\n\t     *     }\r\n\t     *\r\n\t     * If you want to inject dependency in different way you may use custom injector function:\r\n\t     *\r\n\t     *     userModel: izi.inject(\"userModel\").by(function (target, prop, dependency) {\r\n\t     *         target.setUserModel(dependency);\r\n\t     *     });\r\n\t     *\r\n\t     * Notice: `dependency` argument is processed by dependency converter set by `.through()` or set by `.property()`\r\n\t     *\r\n\t     * @member Izi.ioc.Injection\r\n\t     * @param {function(target, prop, dependency)} injector function which will be used to inject dependency as property.\r\n\t     * @return {Izi.ioc.Injection}\r\n\t     */\r\n\t    Injection.prototype.by = function (injector) {\r\n\t        if (module.utils.typeOf(injector) !== \"Function\") {\r\n\t            throw new Error(\"Injector should be a function with target, prop, dependency arguments\");\r\n\t        }\r\n\t        this.injector = injector;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * The default dependency converter returns just the dependency as in following code:\r\n\t     *\r\n\t     *     function defaultDependencyConverter(dependency) {\r\n\t     *         return dependency;\r\n\t     *     }\r\n\t     *\r\n\t     * If you want to inject transformed dependency, you may use custom dependency converter:\r\n\t     *\r\n\t     *     userModel: izi.inject(\"userModel\").trough(function (dependency) {\r\n\t     *         return dependency.toJSON();\r\n\t     *     });\r\n\t     *\r\n\t     * @member Izi.ioc.Injection\r\n\t     * @param {function(dependency):*} dependencyConverter function which will be used to inject dependency as property.\r\n\t     * @return {Izi.ioc.Injection}\r\n\t     */\r\n\t    Injection.prototype.through = function (dependencyConverter) {\r\n\t        if (module.utils.typeOf(dependencyConverter) !== \"Function\") {\r\n\t            throw new Error(\"Dependency converter should be a function with dependency argument\");\r\n\t        }\r\n\t        this.dependencyConverter = dependencyConverter;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Inject value of `dependency[property]` instead of `dependency`\r\n\t     *\r\n\t     *     firstName: izi.inject(\"userModel\").property(\"firstName\")\r\n\t     *\r\n\t     * @param {String} property\r\n\t     * @returns {Izi.ioc.Injection}\r\n\t     */\r\n\t    Injection.prototype.property = function (property) {\r\n\t        return this.through(function (dependency) {\r\n\t            return dependency[property];\r\n\t        });\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Delegates find bean builder\r\n\t     * @member Izi.ioc.Injection\r\n\t     * @private\r\n\t     * @param {Izi.ioc.BeansContext} beansContext\r\n\t     * @return {Izi.ioc.bean.BeanBuilder}\r\n\t     */\r\n\t    Injection.prototype.findBeanBuilder = function (beansContext) {\r\n\t        var beanBuilder = beansContext.findBeanBuilder(this.beanIdOrType);\r\n\t        if (beanBuilder === null) {\r\n\t            throw new Error(this.getBeanNotFoundMessage());\r\n\t        }\r\n\t        return beanBuilder;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Marker field to use instead of: ... instanceof Izi.ioc.Injection\r\n\t     * @member Izi.ioc.Injection\r\n\t     * @private\r\n\t     * @type {Boolean}\r\n\t     */\r\n\t    Injection.prototype.isIziInjection = true;\r\n\t\r\n\t    module.ioc.Injection = Injection;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires ../../utils/hasOwnProperty.js\r\n\t * @requires ../../utils/getClassByName.js\r\n\t */\r\n\t!function(module) {\r\n\t    module.ioc.bean.createInstance = function (Clazz, args, props, beansContext) {\r\n\t\r\n\t        function resolveArguments(args, beansContext) {\r\n\t            var i, arg, result = [];\r\n\t            for (i = 0; i < args.length; i = i + 1) {\r\n\t                arg = args[i];\r\n\t                if (arg && arg.isIziInjection) {\r\n\t                    result.push(arg.resolveBean(beansContext));\r\n\t                } else {\r\n\t                    result.push(arg);\r\n\t                }\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t\r\n\t        function applyProps(instance, props) {\r\n\t            if (props !== undefined) {\r\n\t                for (var prop in props) {\r\n\t                    if (module.utils.hasOwnProperty(props, prop)) {\r\n\t                        instance[prop] = props[prop];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t\r\n\t        if (module.utils.typeOf(Clazz) === \"String\") {\r\n\t            Clazz = module.utils.getClassByName(Clazz, beansContext.globals);\r\n\t        }\r\n\t\r\n\t        var a = resolveArguments(args, beansContext),\r\n\t            argsCount = a.length,\r\n\t            instance;\r\n\t\r\n\t        if (argsCount === 0) {\r\n\t            instance = new Clazz();\r\n\t        } else if (argsCount === 1) {\r\n\t            instance = new Clazz(a[0]);\r\n\t        } else if (argsCount === 2) {\r\n\t            instance = new Clazz(a[0], a[1]);\r\n\t        } else if (argsCount === 3) {\r\n\t            instance = new Clazz(a[0], a[1], a[2]);\r\n\t        } else if (argsCount === 4) {\r\n\t            instance = new Clazz(a[0], a[1], a[2], a[3]);\r\n\t        } else if (argsCount === 5) {\r\n\t            instance = new Clazz(a[0], a[1], a[2], a[3], a[4]);\r\n\t        } else if (argsCount === 6) {\r\n\t            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5]);\r\n\t        } else if (argsCount === 7) {\r\n\t            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\r\n\t        } else if (argsCount === 8) {\r\n\t            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);\r\n\t        } else if (argsCount === 9) {\r\n\t            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\r\n\t        } else if (argsCount === 10) {\r\n\t            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]);\r\n\t        } else {\r\n\t            throw new Error(\"Too many arguments given\");\r\n\t        }\r\n\t\r\n\t        applyProps(instance, props);\r\n\t\r\n\t        return instance;\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires createInstance.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * Singleton strategy used in {@link Izi.ioc.bean.BeanBuilder}\r\n\t     * @class Izi.ioc.bean.SingletonStrategy\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param {Izi.ioc.Config} config\r\n\t     */\r\n\t    var SingletonStrategy = function Izi_ioc_bean_SingletonStrategy(config) {\r\n\t        this.Clazz = config.getClazz();\r\n\t        this.args = config.getArguments();\r\n\t        this.props = config.getProperties();\r\n\t        this.instance = undefined;\r\n\t    };\r\n\t\r\n\t    SingletonStrategy.prototype.createInstance = function (beansContext) {\r\n\t        if (!this.instance) {\r\n\t            this.instance = module.ioc.bean.createInstance(this.Clazz, this.args, this.props, beansContext);\r\n\t        }\r\n\t\r\n\t        return this.instance;\r\n\t    };\r\n\t\r\n\t    SingletonStrategy.prototype.init = function (beansContext) {\r\n\t        return this.createInstance(beansContext);\r\n\t    };\r\n\t\r\n\t    SingletonStrategy.prototype.create = function (beansContext) {\r\n\t        return this.createInstance(beansContext);\r\n\t    };\r\n\t\r\n\t    SingletonStrategy.prototype.matchesByType = function (type) {\r\n\t        return type === this.Clazz;\r\n\t    };\r\n\t\r\n\t    SingletonStrategy.prototype.getArguments = function () {\r\n\t        return this.args;\r\n\t    };\r\n\t\r\n\t    module.ioc.bean.SingletonStrategy = SingletonStrategy;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires createInstance.js\r\n\t */\r\n\t!function(module) {\r\n\t    /**\r\n\t     * Lazy Singleton strategy used in {@link Izi.ioc.bean.BeanBuilder}\r\n\t     * @class Izi.ioc.bean.LazySingletonStrategy\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param {Izi.ioc.Config} config\r\n\t     */\r\n\t    var LazySingletonStrategy = function Izi_ioc_bean_LazySingletonStrategy(config) {\r\n\t        this.Clazz = config.getClazz();\r\n\t        this.args = config.getArguments();\r\n\t        this.props = config.getProperties();\r\n\t        this.instance = undefined;\r\n\t    };\r\n\t\r\n\t    LazySingletonStrategy.prototype.init = function (context) {\r\n\t        return null;\r\n\t    };\r\n\t\r\n\t    LazySingletonStrategy.prototype.create = function (context) {\r\n\t        if (!this.instance) {\r\n\t            this.instance = module.ioc.bean.createInstance(this.Clazz, this.args, this.props, context);\r\n\t        }\r\n\t\r\n\t        return this.instance;\r\n\t    };\r\n\t\r\n\t    LazySingletonStrategy.prototype.matchesByType = function (type) {\r\n\t        return type === this.Clazz;\r\n\t    };\r\n\t\r\n\t    LazySingletonStrategy.prototype.getArguments = function () {\r\n\t        return this.args;\r\n\t    };\r\n\t    \r\n\t    module.ioc.bean.LazySingletonStrategy = LazySingletonStrategy;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires createInstance.js\r\n\t */\r\n\t!function(module) {\r\n\t    /**\r\n\t     * Prototype strategy used in {@link Izi.ioc.bean.BeanBuilder}\r\n\t     * @class Izi.ioc.bean.PrototypeStrategy\r\n\t     * @private\r\n\t     * @constructor\r\n\t     * @param {Izi.ioc.Config} config\r\n\t     */\r\n\t    var PrototypeStrategy = function Izi_ioc_bean_PrototypeStrategy(config) {\r\n\t        this.Clazz = config.getClazz();\r\n\t        this.args = config.getArguments();\r\n\t        this.props = config.getProperties();\r\n\t    };\r\n\t\r\n\t    PrototypeStrategy.prototype.init = function (beansContext) {\r\n\t        return null;\r\n\t    };\r\n\t\r\n\t    PrototypeStrategy.prototype.create = function (beansContext) {\r\n\t        return module.ioc.bean.createInstance(this.Clazz, this.args, this.props, beansContext);\r\n\t    };\r\n\t\r\n\t    PrototypeStrategy.prototype.matchesByType = function (type) {\r\n\t        return type === this.Clazz;\r\n\t    };\r\n\t\r\n\t    PrototypeStrategy.prototype.getArguments = function () {\r\n\t        return this.args;\r\n\t    };\r\n\t\r\n\t    module.ioc.bean.PrototypeStrategy = PrototypeStrategy;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires capitalize.js\r\n\t */\r\n\t!function (module) {\r\n\t    /**\r\n\t     * @member Izi.utils\r\n\t     * @method\r\n\t     * @since 1.5.0\r\n\t     * @private\r\n\t     * @param {String} name\r\n\t     * @return {String}\r\n\t     */\r\n\t    module.utils.setterOf = function (name) {\r\n\t        return \"set\" + module.utils.capitalize(name);\r\n\t    };\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires Observable.js\r\n\t * @requires ../utils/getterOf.js\r\n\t * @requires ../utils/setterOf.js\r\n\t * @requires ../utils/typeOf.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    var forEach = module.utils.forEach;\r\n\t\r\n\t    function normalizeFields(fields) {\r\n\t        var result = [];\r\n\t        forEach(fields, function (field) {\r\n\t            field = module.utils.typeOf(field) === \"Object\" ? field : {name: field};\r\n\t            field.getter = module.utils.getterOf(field.name);\r\n\t            field.setter = module.utils.setterOf(field.name);\r\n\t            result.push(field);\r\n\t        });\r\n\t        return result;\r\n\t    }\r\n\t\r\n\t    function hasToPlainObjectMethod(value) {\r\n\t        return value && module.utils.typeOf(value.toPlainObject) === \"Function\";\r\n\t    }\r\n\t\r\n\t    function implementGetterAndSetter(Class, name, getter, setter) {\r\n\t\r\n\t        Class.prototype[name] = function (value) {\r\n\t            if (arguments.length === 0) {\r\n\t                return this[getter]();\r\n\t            } else if (arguments.length === 1) {\r\n\t                return this[setter](value);\r\n\t            } else {\r\n\t                throw new Error(\"Too many arguments. Setter function requires exactly one argument\");\r\n\t            }\r\n\t        };\r\n\t\r\n\t        Class.prototype[getter] = function () {\r\n\t            return this.get(name);\r\n\t        };\r\n\t\r\n\t        Class.prototype[setter] = function (value) {\r\n\t            return this.set(name, value);\r\n\t        };\r\n\t    }\r\n\t\r\n\t    function createInitialData(fields) {\r\n\t        var data = {};\r\n\t\r\n\t        forEach(fields, function (field) {\r\n\t            if (field.hasOwnProperty(\"defaultValue\")) {\r\n\t                data[field.name] = field.defaultValue;\r\n\t            } else if (field.hasOwnProperty(\"initialValue\")) {\r\n\t                data[field.name] = field.initialValue;\r\n\t            }\r\n\t        });\r\n\t        return data;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * See [Model guide](#guide/model) for usage documentation.\r\n\t     *\r\n\t     * @extends Izi.model.Observable\r\n\t     * @class Izi.model.Model\r\n\t     * @constructor\r\n\t     */\r\n\t    var Model = function Izi_Model() {\r\n\t        Model.upper.constructor.apply(this, arguments);\r\n\t        this.init();\r\n\t    };\r\n\t\r\n\t    module.utils.inherit(Model, module.model.Observable);\r\n\t\r\n\t    /**\r\n\t     * @member Izi.model.Model\r\n\t     * @private\r\n\t     * @type {Boolean}\r\n\t     */\r\n\t    Model.prototype.isIziModel = true;\r\n\t\r\n\t    /**\r\n\t     * Abstract init method called from constructor\r\n\t     * @member Izi.model.Model\r\n\t     * @protected\r\n\t     */\r\n\t    Model.prototype.init = function () {\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Retrieves value of given property name\r\n\t     * @member Izi.model.Model\r\n\t     * @param {String} propertyName\r\n\t     * @return {*}\r\n\t     */\r\n\t    Model.prototype.get = function (propertyName) {\r\n\t        return this.data[propertyName];\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Updates value of given property name and returns own model instance (this).\r\n\t     * @member Izi.model.Model\r\n\t     * @fires change\r\n\t     * @fires propertyNameChange\r\n\t     * @param {String|Object} propertyName or map of pairs property=>value\r\n\t     * @param {*} [value]\r\n\t     * @return {Izi.model.Model}\r\n\t     */\r\n\t    Model.prototype.set = function (propertyName, value) {\r\n\t\r\n\t        if (arguments.length === 1 && module.utils.typeOf(propertyName) === \"Object\") {\r\n\t            for (var prop in propertyName) {\r\n\t                if (propertyName.hasOwnProperty(prop)) {\r\n\t                    this.set(prop, propertyName[prop]);\r\n\t                }\r\n\t            }\r\n\t            return this;\r\n\t        }\r\n\t\r\n\t        var currentValue = this.data[propertyName];\r\n\t\r\n\t        if (!this.equals(currentValue, value)) {\r\n\t            this.data[propertyName] = value;\r\n\t            this.dispatchChange(propertyName, value, currentValue);\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Fires notifications about value changes. This method is used internally by {@link Izi.model.Model#set} method.\r\n\t     * Firstly is fired event `\"change\"` and after that is fired event with name corresponding to `propertyName`.\r\n\t     * For example for `dispatchChange(\"firstName\")` will be fired two events: `\"change\"` and `\"firstNameChange\"`.\r\n\t     *\r\n\t     * @fires change\r\n\t     * @fires propertyNameChange\r\n\t     * @param {String} propertyName\r\n\t     * @param {*} [newValue]\r\n\t     * @param {*} [oldValue]\r\n\t     */\r\n\t    Model.prototype.dispatchChange = function (propertyName, newValue, oldValue) {\r\n\t        this.dispatchEvent(propertyName + \"Change\", [newValue, oldValue]);\r\n\t        this.dispatchEvent(\"change\", [propertyName, newValue, oldValue]);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Method used to detect if new value that is pretended to be set is different to the old one. Override\r\n\t     * this method if you want to use custom equals function.\r\n\t     *\r\n\t     * @param {*} val1\r\n\t     * @param {*} val2\r\n\t     * @returns {Boolean}\r\n\t     */\r\n\t    Model.prototype.equals = function (val1, val2) {\r\n\t        if (module.utils.typeOf(val1) === \"Array\" && module.utils.typeOf(val2) === \"Array\") {\r\n\t            return this.equalsArray(val1, val2);\r\n\t        }\r\n\t\r\n\t        return val1 === val2;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * This method is used in default {@link Izi.model.Model#equals} method.\r\n\t     *\r\n\t     * @param arr1\r\n\t     * @param arr2\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    Model.prototype.equalsArray = function (arr1, arr2) {\r\n\t        if (arr1.length !== arr2.length) {\r\n\t            return false;\r\n\t        }\r\n\t\r\n\t        for (var i = 0; i < arr1.length; i++) {\r\n\t            if (arr1[i] !== arr2[i]) {\r\n\t                return false;\r\n\t            }\r\n\t        }\r\n\t\r\n\t        return true;\r\n\t    };\r\n\t\r\n\t    Model.prototype.iziObserveProperty = function (property, propertyChangeCallback) {\r\n\t        var me = this,\r\n\t            propertyChangeEvent = property + \"Change\";\r\n\t\r\n\t        me.addListener(propertyChangeEvent, propertyChangeCallback);\r\n\t        return function () {\r\n\t            me.removeListener(propertyChangeEvent, propertyChangeCallback);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    Model.prototype.iziObserveWidget = function (eventConfig, action, scope, eventOptions) {\r\n\t        var me = this,\r\n\t            eventType = eventConfig.getEventType();\r\n\t\r\n\t        me.addListener(eventType, action, scope);\r\n\t        return function () {\r\n\t            me.removeListener(eventType, action);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Exports all declared fields in `field: []` section using short getters like `firstName()`.\r\n\t     *\r\n\t     *     var User = izi.modelOf({\r\n\t     *         fields: [\"firstName\", \"lastName\"]\r\n\t     *     });\r\n\t     *\r\n\t     *     var john = new User().firstName(\"John\").lastName(\"Smith\");\r\n\t     *     john.toPlainObject(); // {firstName: \"John\", lastName: \"Smith\"}\r\n\t     *\r\n\t     * When field value is an Array, then it will be converted to array of values. If any field or array item has\r\n\t     * `.toPlainObject()` method, then it will be called to get result.\r\n\t     *\r\n\t     * Circular references between models are resolved as circular references between plain objects.\r\n\t     *\r\n\t     *     var TreeItem = izi.modelOf({\r\n\t     *         fields: [\"children\", \"parent\"]\r\n\t     *     });\r\n\t     *\r\n\t     *     var root = new TreeItem();\r\n\t     *     var child1 = new TreeItem().parent(root);\r\n\t     *     var child2 = new TreeItem().parent(root);\r\n\t     *     root.children([child1, child2]);\r\n\t     *\r\n\t     *     root.toPlainObject(); // {children: [{parent: *refToRoot*},\r\n\t     *                           //             {parent: *refToRoot*}] }\r\n\t     *\r\n\t     * If you have custom getter which is not declared in `fields` section you may override toPlainObject method:\r\n\t     *\r\n\t     *     var User = izi.modelOf({\r\n\t     *         fields: [\"firstName\", \"lastName\"],\r\n\t     *\r\n\t     *         getFullName: function () {\r\n\t     *             return this.firstName() + \" \" + this.lastName();\r\n\t     *         },\r\n\t     *\r\n\t     *         toPlainObject: function () {\r\n\t     *\r\n\t     *             // call original implementation that converts firstName and lastName\r\n\t     *             var plainObject = User.upper.toPlainObject.call(this);\r\n\t     *\r\n\t     *             // add your custom getters here\r\n\t     *             plainObject.fullName = this.getFullName();\r\n\t     *\r\n\t     *             return plainObject;\r\n\t     *         }\r\n\t     *     });\r\n\t     *\r\n\t     *     var john = new User().firstName(\"John\").lastName(\"Smith\");\r\n\t     *     john.toPlainObject(); // {firstName: \"John\", lastName: \"Smith\", fullName: \"John Smith\"}\r\n\t     *\r\n\t     * @returns {Object}\r\n\t     * @since 1.5.0\r\n\t     */\r\n\t    Model.prototype.toPlainObject = function () {\r\n\t        var result = {},\r\n\t            arrayResult,\r\n\t            circularCopyProp = \"__iziCircularCopy__\",\r\n\t            wasVisited = circularCopyProp in this,\r\n\t            cache = this[circularCopyProp];\r\n\t\r\n\t        if (wasVisited) {\r\n\t            return cache();\r\n\t        }\r\n\t\r\n\t        this[circularCopyProp] = function () {\r\n\t            return result;\r\n\t        };\r\n\t\r\n\t        forEach(this.fields, function (field) {\r\n\t            var value = this[field.getter]();\r\n\t\r\n\t            if (hasToPlainObjectMethod(value)) {\r\n\t                result[field.name] = value.toPlainObject();\r\n\t            } else if (module.utils.typeOf(value) === \"Array\") {\r\n\t                arrayResult = [];\r\n\t                forEach(value, function (item) {\r\n\t                    if (hasToPlainObjectMethod(item)) {\r\n\t                        arrayResult.push(item.toPlainObject());\r\n\t                    } else {\r\n\t                        arrayResult.push(item);\r\n\t                    }\r\n\t                });\r\n\t                result[field.name] = arrayResult;\r\n\t            } else if (value && module.utils.typeOf(value.forEach) === \"Function\") {\r\n\t                arrayResult = [];\r\n\t                value.forEach(function (item) {\r\n\t                    if (hasToPlainObjectMethod(item)) {\r\n\t                        arrayResult.push(item.toPlainObject());\r\n\t                    } else {\r\n\t                        arrayResult.push(item);\r\n\t                    }\r\n\t                });\r\n\t                result[field.name] = arrayResult;\r\n\t            } else {\r\n\t                result[field.name] = value;\r\n\t            }\r\n\t        }, this);\r\n\t\r\n\t        delete this[circularCopyProp];\r\n\t        return result;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * @private\r\n\t     * @param config\r\n\t     * @return {Function}\r\n\t     */\r\n\t    Model.define = function (config) {\r\n\t\r\n\t        var fields = normalizeFields(config.fields),\r\n\t            Class = function () {\r\n\t                this.data = createInitialData(fields);\r\n\t                this.fields = fields;\r\n\t                Class.upper.constructor.apply(this);\r\n\t            };\r\n\t        module.utils.inherit(Class, Model);\r\n\t\r\n\t        forEach(fields, function (field) {\r\n\t            implementGetterAndSetter(Class, field.name, field.getter, field.setter);\r\n\t        });\r\n\t\r\n\t        for (var key in config) {\r\n\t            if (module.utils.hasOwnProperty(config, key) && key != 'fields') {\r\n\t                Class.prototype[key] = config[key];\r\n\t            }\r\n\t        }\r\n\t\r\n\t        return Class;\r\n\t    };\r\n\t\r\n\t\r\n\t    module.model.Model = Model;\r\n\t\r\n\t    /**\r\n\t     * @event propertyNameChange\r\n\t     * Fired when new value of property `\"propertyName\"` has been already set. Each property fires its own event so you should\r\n\t     * register listener of `firstName` property using following code: `model.addListener(\"firstNameChange\", handler)`\r\n\t     *\r\n\t     * @param {*} newValue new value\r\n\t     * @param {*} oldValue current value\r\n\t     */\r\n\t\r\n\t    /**\r\n\t     * @event change\r\n\t     * Fired when new value of property has been already set.\r\n\t     * @param {String} property property name that its value has changed\r\n\t     * @param {*} newValue current value\r\n\t     * @param {*} oldValue previous value\r\n\t     */\r\n\t\r\n\t    /** @ignore function: () { */\r\n\t}(Izi);\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * @requires EventConfig.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * @class Izi.events.KeyboardConfig\r\n\t     * @extends Izi.events.EventConfig\r\n\t     * @constructor\r\n\t     * @private\r\n\t     * @param {String} eventType\r\n\t     */\r\n\t    var KeyboardConfig = function Izi_events_KeyboardConfig(eventType) {\r\n\t        module.events.EventConfig.apply(this, arguments);\r\n\t        this.expectedKeyCode = 0;\r\n\t    };\r\n\t    KeyboardConfig.prototype = new module.events.EventConfig();\r\n\t    KeyboardConfig.prototype.constructor = KeyboardConfig;\r\n\t\r\n\t    /**\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @private\r\n\t     * @type {Boolean}\r\n\t     */\r\n\t    KeyboardConfig.prototype.isKeyboardEventConfig = true;\r\n\t\r\n\t    /**\r\n\t     * Setup custom expected keyCode. Use it only when you can't find desired key in methods below:\r\n\t     * <code>izi.events.keyDown().ENTER()</code> etc.\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @param {Number} value\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.keyCode = function (value) {\r\n\t        this.expectedKeyCode = value;\r\n\t        return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Returns expected key code\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @private\r\n\t     * @return {Number}\r\n\t     */\r\n\t    KeyboardConfig.prototype.getExpectedKeyCode = function () {\r\n\t        return this.expectedKeyCode;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup BACKSPACE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.BACKSPACE = function () {\r\n\t        return this.keyCode(8);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup TAB key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.TAB = function () {\r\n\t        return this.keyCode(9);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup NUM_CENTER key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_CENTER = function () {\r\n\t        return this.keyCode(12);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup ENTER key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.ENTER = function () {\r\n\t        return this.keyCode(13);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup RETURN key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.RETURN = function () {\r\n\t        return this.keyCode(13);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup SHIFT key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.SHIFT = function () {\r\n\t        this.shift(); // If you press SHIFT key - event modifier will be set to true, so we need to also expect that.\r\n\t        return this.keyCode(16);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup CTRL key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.CTRL = function () {\r\n\t        this.ctrl(); // If you press CTRL key - event modifier will be set to true, so we need to also expect that.\r\n\t        return this.keyCode(17);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup ALT key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.ALT = function () {\r\n\t        this.alt(); // If you press ALT key - event modifier will be set to true, so we need to also expect that.\r\n\t        return this.keyCode(18);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup PAUSE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.PAUSE = function () {\r\n\t        return this.keyCode(19);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup CAPS_LOCK key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.CAPS_LOCK = function () {\r\n\t        return this.keyCode(20);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup ESC key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.ESC = function () {\r\n\t        return this.keyCode(27);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup SPACE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.SPACE = function () {\r\n\t        return this.keyCode(32);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup PAGE_UP key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.PAGE_UP = function () {\r\n\t        return this.keyCode(33);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup PAGE_DOWN key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.PAGE_DOWN = function () {\r\n\t        return this.keyCode(34);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup END key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.END = function () {\r\n\t        return this.keyCode(35);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup HOME key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.HOME = function () {\r\n\t        return this.keyCode(36);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup LEFT key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.LEFT = function () {\r\n\t        return this.keyCode(37);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup UP key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.UP = function () {\r\n\t        return this.keyCode(38);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup RIGHT key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.RIGHT = function () {\r\n\t        return this.keyCode(39);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup DOWN key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.DOWN = function () {\r\n\t        return this.keyCode(40);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup PRINT_SCREEN key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.PRINT_SCREEN = function () {\r\n\t        return this.keyCode(44);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup INSERT key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.INSERT = function () {\r\n\t        return this.keyCode(45);\r\n\t    };\r\n\t                                                                //\r\n\t    /**\r\n\t     * Setup DELETE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.DELETE = function () {\r\n\t        return this.keyCode(46);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup ZERO key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.ZERO = function () {\r\n\t        return this.keyCode(48);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup ONE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.ONE = function () {\r\n\t        return this.keyCode(49);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup TWO key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.TWO = function () {\r\n\t        return this.keyCode(50);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup THREE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.THREE = function () {\r\n\t        return this.keyCode(51);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup FOUR key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.FOUR = function () {\r\n\t        return this.keyCode(52);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup FIVE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.FIVE = function () {\r\n\t        return this.keyCode(53);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup SIX key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.SIX = function () {\r\n\t        return this.keyCode(54);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup SEVEN key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.SEVEN = function () {\r\n\t        return this.keyCode(55);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup EIGHT key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.EIGHT = function () {\r\n\t        return this.keyCode(56);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * Setup NINE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NINE = function () {\r\n\t        return this.keyCode(57);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup A key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.A = function () {\r\n\t        return this.keyCode(65);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup B key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.B = function () {\r\n\t        return this.keyCode(66);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup C key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.C = function () {\r\n\t        return this.keyCode(67);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup D key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.D = function () {\r\n\t        return this.keyCode(68);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup E key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.E = function () {\r\n\t        return this.keyCode(69);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F = function () {\r\n\t        return this.keyCode(70);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup G key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.G = function () {\r\n\t        return this.keyCode(71);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup H key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.H = function () {\r\n\t        return this.keyCode(72);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup I key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.I = function () {\r\n\t        return this.keyCode(73);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup J key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.J = function () {\r\n\t        return this.keyCode(74);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup K key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.K = function () {\r\n\t        return this.keyCode(75);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup L key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.L = function () {\r\n\t        return this.keyCode(76);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup M key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.M = function () {\r\n\t        return this.keyCode(77);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup N key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.N = function () {\r\n\t        return this.keyCode(78);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup O key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.O = function () {\r\n\t        return this.keyCode(79);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup P key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.P = function () {\r\n\t        return this.keyCode(80);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup Q key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.Q = function () {\r\n\t        return this.keyCode(81);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup R key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.R = function () {\r\n\t        return this.keyCode(82);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup S key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.S = function () {\r\n\t        return this.keyCode(83);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup T key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.T = function () {\r\n\t        return this.keyCode(84);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup U key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.U = function () {\r\n\t        return this.keyCode(85);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup V key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.V = function () {\r\n\t        return this.keyCode(86);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup W key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.W = function () {\r\n\t        return this.keyCode(87);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup X key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.X = function () {\r\n\t        return this.keyCode(88);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup Y key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.Y = function () {\r\n\t        return this.keyCode(89);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup Z key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.Z = function () {\r\n\t        return this.keyCode(90);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_ZERO key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_ZERO = function () {\r\n\t        return this.keyCode(96);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_ONE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_ONE = function () {\r\n\t        return this.keyCode(97);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_TWO key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_TWO = function () {\r\n\t        return this.keyCode(98);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_THREE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_THREE = function () {\r\n\t        return this.keyCode(99);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_FOUR key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_FOUR = function () {\r\n\t        return this.keyCode(100);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_FIVE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_FIVE = function () {\r\n\t        return this.keyCode(101);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_SIX key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_SIX = function () {\r\n\t        return this.keyCode(102);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_SEVEN key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_SEVEN = function () {\r\n\t        return this.keyCode(103);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_EIGHT key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_EIGHT = function () {\r\n\t        return this.keyCode(104);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_NINE key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_NINE = function () {\r\n\t        return this.keyCode(105);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_MULTIPLY key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_MULTIPLY = function () {\r\n\t        return this.keyCode(106);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_PLUS key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_PLUS = function () {\r\n\t        return this.keyCode(107);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_MINUS key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_MINUS = function () {\r\n\t        return this.keyCode(109);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_PERIOD key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_PERIOD = function () {\r\n\t        return this.keyCode(110);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup NUM_DIVISION key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.NUM_DIVISION = function () {\r\n\t        return this.keyCode(111);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F1 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F1 = function () {\r\n\t        return this.keyCode(112);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F2 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F2 = function () {\r\n\t        return this.keyCode(113);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F3 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F3 = function () {\r\n\t        return this.keyCode(114);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F4 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F4 = function () {\r\n\t        return this.keyCode(115);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F5 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F5 = function () {\r\n\t        return this.keyCode(116);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F6 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F6 = function () {\r\n\t        return this.keyCode(117);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F7 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F7 = function () {\r\n\t        return this.keyCode(118);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F8 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F8 = function () {\r\n\t        return this.keyCode(119);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F9 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F9 = function () {\r\n\t        return this.keyCode(120);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F10 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F10 = function () {\r\n\t        return this.keyCode(121);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F11 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F11 = function () {\r\n\t        return this.keyCode(122);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Setup F12 key as expected to be pressed\r\n\t     * @member Izi.events.KeyboardConfig\r\n\t     * @method\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    KeyboardConfig.prototype.F12 = function () {\r\n\t        return this.keyCode(123);\r\n\t    };\r\n\t\r\n\t    module.events.KeyboardConfig = KeyboardConfig;\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires EventConfig.js\r\n\t * @requires KeyboardConfig.js\r\n\t */\r\n\t!function (module) {\r\n\t\r\n\t    /**\r\n\t     * <code>izi.events.*</code> fluent API entry points. You can use them to define izi behaviors based on more complex events, like:\r\n\t     *\r\n\t     *      izi.perform(behavior).when(izi.events.click().shift()).on(button);\r\n\t     *\r\n\t     *      izi.perform(behavior).when(izi.events.keyDown().ENTER()).on(textInput);\r\n\t     *\r\n\t     *      izi.perform(behavior).when(izi.events.keyDown().F5().preventDefault()).on(document);\r\n\t     *\r\n\t     *      izi.perform(behavior).when(izi.events.keyDown().ctrl().alt().ONE()).on(document);\r\n\t     *\r\n\t     * @class Izi.events.Events\r\n\t     */\r\n\t    var Events = function Izi_events_Events() {\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for desired event type. If you need to watch keyboard events, please use\r\n\t     * <code>izi.events.keyDown()</code> or <code>izi.events.keyUp()</code> or <code>izi.events.keyboardEvent('keypress')</code>\r\n\t     * @member Izi.events.Events\r\n\t     * @param {String} eventType\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.event = function (eventType) {\r\n\t        return new module.events.EventConfig(eventType);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder. It is recommended to use only\r\n\t     * <code>izi.events.keyDown()</code> or <code>izi.events.keyUp()</code>, because of not cross browsers\r\n\t     * compatibility of \"keyPress\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @param {String} eventType\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    Events.prototype.keyboardEvent = function (eventType) {\r\n\t        return new module.events.KeyboardConfig(eventType);\r\n\t    };\r\n\t\r\n\t    // -------------------- Keyboard -----------------\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for keyboard \"keydown\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    Events.prototype.keyDown = function () {\r\n\t        return this.keyboardEvent('keydown');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for keyboard \"keyup\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.KeyboardConfig}\r\n\t     */\r\n\t    Events.prototype.keyUp = function () {\r\n\t        return this.keyboardEvent('keyup');\r\n\t    };\r\n\t\r\n\t    // -------------------- HTML Window -----------------\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"afterprint\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.afterPrint = function () {\r\n\t        return this.event('afterprint');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"beforeprint\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.beforePrint = function () {\r\n\t        return this.event('beforeprint');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"beforeonload\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.beforeOnLoad = function () {\r\n\t        return this.event('beforeonload');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"error\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.error = function () {\r\n\t        return this.event('error');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"haschange\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.hasChange = function () {\r\n\t        return this.event('haschange');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"load\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.load = function () {\r\n\t        return this.event('load');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"message\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.message = function () {\r\n\t        return this.event('message');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"offline\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.offline = function () {\r\n\t        return this.event('offline');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"line\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.line = function () {\r\n\t        return this.event('line');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"pagehide\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.pageHide = function () {\r\n\t        return this.event('pagehide');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"pageshow\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.pageShow = function () {\r\n\t        return this.event('pageshow');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"popstate\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.popState = function () {\r\n\t        return this.event('popstate');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"redo\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.redo = function () {\r\n\t        return this.event('redo');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"resize\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.resize = function () {\r\n\t        return this.event('resize');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"storage\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.storage = function () {\r\n\t        return this.event('storage');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"undo\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.undo = function () {\r\n\t        return this.event('undo');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for html window \"unload\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.unload = function () {\r\n\t        return this.event('unload');\r\n\t    };\r\n\t\r\n\t    // -------------------- Form element -----------------\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"blur\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.blur = function () {\r\n\t        return this.event('blur');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"change\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.change = function () {\r\n\t        return this.event('change');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"contextmenu\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.contextMenu = function () {\r\n\t        return this.event('contextmenu');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"focus\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.focus = function () {\r\n\t        return this.event('focus');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"formchange\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.formChange = function () {\r\n\t        return this.event('formchange');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"forminput\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.formInput = function () {\r\n\t        return this.event('forminput');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"input\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.input = function () {\r\n\t        return this.event('input');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"invalid\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.invalid = function () {\r\n\t        return this.event('invalid');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"reset\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.reset = function () {\r\n\t        return this.event('reset');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"select\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.select = function () {\r\n\t        return this.event('select');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for form element \"submit\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.submit = function () {\r\n\t        return this.event('submit');\r\n\t    };\r\n\t\r\n\t    // -------------------- Mouse -----------------\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"click\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.click = function () {\r\n\t        return this.event('click');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"dblclick\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.dblClick = function () {\r\n\t        return this.event('dblclick');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"drag\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.drag = function () {\r\n\t        return this.event('drag');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"dragend\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.dragEnd = function () {\r\n\t        return this.event('dragend');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"dragenter\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.dragEnter = function () {\r\n\t        return this.event('dragenter');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"dragleave\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.dragLeave = function () {\r\n\t        return this.event('dragleave');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"dragover\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.dragOver = function () {\r\n\t        return this.event('dragover');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"dragstart\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.dragStart = function () {\r\n\t        return this.event('dragstart');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"drop\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.drop = function () {\r\n\t        return this.event('drop');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"mousedown\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.mouseDown = function () {\r\n\t        return this.event('mousedown');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"mousemove\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.mouseMove = function () {\r\n\t        return this.event('mousemove');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"mouseout\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.mouseOut = function () {\r\n\t        return this.event('mouseout');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"mouseover\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.mouseOver = function () {\r\n\t        return this.event('mouseover');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"mouseup\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.mouseUp = function () {\r\n\t        return this.event('mouseup');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"mousewheel\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.mouseWheel = function () {\r\n\t        return this.event('mousewheel');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mouse \"scroll\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.scroll = function () {\r\n\t        return this.event('scroll');\r\n\t    };\r\n\t\r\n\t    // -------------------- Media -----------------\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"abort\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.abort = function () {\r\n\t        return this.event('abort');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"canplay\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.canPlay = function () {\r\n\t        return this.event('canplay');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"canplaythrough\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.canPlayThrough = function () {\r\n\t        return this.event('canplaythrough');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"durationchange\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.durationChange = function () {\r\n\t        return this.event('durationchange');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"emptied\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.emptied = function () {\r\n\t        return this.event('emptied');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"ended\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.ended = function () {\r\n\t        return this.event('ended');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"loadeddata\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.loadedData = function () {\r\n\t        return this.event('loadeddata');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"loadedmetadata\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.loadedMetaData = function () {\r\n\t        return this.event('loadedmetadata');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"loadstart\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.loadStart = function () {\r\n\t        return this.event('loadstart');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"pause\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.pause = function () {\r\n\t        return this.event('pause');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"play\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.play = function () {\r\n\t        return this.event('play');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"playing\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.playing = function () {\r\n\t        return this.event('playing');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"progress\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.progress = function () {\r\n\t        return this.event('progress');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"ratechange\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.rateChange = function () {\r\n\t        return this.event('ratechange');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"readystatechange\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.readyStateChange = function () {\r\n\t        return this.event('readystatechange');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"seeked\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.seeked = function () {\r\n\t        return this.event('seeked');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"seeking\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.seeking = function () {\r\n\t        return this.event('seeking');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"stalled\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.stalled = function () {\r\n\t        return this.event('stalled');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"suspend\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.suspend = function () {\r\n\t        return this.event('suspend');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"timeupdate\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.timeUpdate = function () {\r\n\t        return this.event('timeupdate');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"volumechange\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.volumeChange = function () {\r\n\t        return this.event('volumechange');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for media \"waiting\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.waiting = function () {\r\n\t        return this.event('waiting');\r\n\t    };\r\n\t\r\n\t    // -------------------- Mobile -----------------\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"touchstart\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.touchStart = function () {\r\n\t        return this.event('touchstart');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"touchmove\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.touchMove = function () {\r\n\t        return this.event('touchmove');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"touchend\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.touchEnd = function () {\r\n\t        return this.event('touchend');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"touchcancel\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.touchCancel = function () {\r\n\t        return this.event('touchcancel');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"touchenter\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.touchEnter = function () {\r\n\t        return this.event('touchenter');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"touchlave\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.touchLave = function () {\r\n\t        return this.event('touchlave');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"gesturestart\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.gestureStart = function () {\r\n\t        return this.event('gesturestart');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"gesturechange\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.gestureChange = function () {\r\n\t        return this.event('gesturechange');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"gestureend\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.gestureEnd = function () {\r\n\t        return this.event('gestureend');\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates fluent builder for mobile \"orientationchange\" event.\r\n\t     * @member Izi.events.Events\r\n\t     * @return {Izi.events.EventConfig}\r\n\t     */\r\n\t    Events.prototype.orientationChange = function () {\r\n\t        return this.event('orientationchange');\r\n\t    };\r\n\t\r\n\t    module.events.Events = Events;\r\n\t\r\n\t}(Izi);\r\n\t/**\r\n\t * @ignore\r\n\t * @requires debug.js\r\n\t * @requires behavior/register.js\r\n\t * @requires binding/register.js\r\n\t * @requires queue/register.js\r\n\t * @requires utils/typeOf.js\r\n\t * @requires utils/forEach.js\r\n\t * @requires utils/arrayContains.js\r\n\t * @requires ioc/BeansContext.js\r\n\t * @requires ioc/Config.js\r\n\t * @requires ioc/Injection.js\r\n\t * @requires ioc/bean/SingletonStrategy.js\r\n\t * @requires ioc/bean/LazySingletonStrategy.js\r\n\t * @requires ioc/bean/PrototypeStrategy.js\r\n\t * @requires model/Model.js\r\n\t * @requires events/Events.js\r\n\t */\r\n\t!function (module, global) {\r\n\t\r\n\t    var frameworks = {},\r\n\t        sanityCheckMethods = [\"arg\", \"sanityInjectTo\", \"sanityOf\", \"varargOf\"];\r\n\t\r\n\t    function initFramework(izi, framework) {\r\n\t        if (framework.behavior) {\r\n\t            izi.registerBehaviorImpl(framework.behavior);\r\n\t        }\r\n\t        if (framework.binding) {\r\n\t            izi.registerBindingImpl(framework.binding);\r\n\t        }\r\n\t        if (framework.queue) {\r\n\t            izi.registerQueueImpl(framework.queue);\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function enableCompatibility(izi) {\r\n\t        if (global.izi) {\r\n\t            module.utils.forEach(sanityCheckMethods, function (method) {\r\n\t                if (global.izi[method]) {\r\n\t                    izi[method] = global.izi[method];\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * @class izi\r\n\t     * @constructor\r\n\t     * @param {String|Object} [framework]\r\n\t     * @param {Object} [globals]\r\n\t     *\r\n\t     * All <strong>izi</strong> fluent API entry points.\r\n\t     */\r\n\t    var Api = function Izi_Api(framework, globals) {\r\n\t        this.globals = globals || global;\r\n\t\r\n\t        enableCompatibility(this);\r\n\t\r\n\t        if (module.utils.typeOf(framework) === \"String\") {\r\n\t            framework = frameworks[framework];\r\n\t        }\r\n\t\r\n\t        if (framework) {\r\n\t            this._framework = framework;\r\n\t            initFramework(this, framework);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates beans context using passed config. It can be one configuration, like:\r\n\t     *\r\n\t     *     izi.bakeBeans({beanId: 'value'});\r\n\t     *\r\n\t     * Or multiple configurations as an array:\r\n\t     *\r\n\t     *     var config1 = {\r\n\t     *         bean1: 'value 1'\r\n\t     *     };\r\n\t     *     var config2 = {\r\n\t     *         bean2: 'value 2'\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.bakeBeans([config1, config2]);\r\n\t     *\r\n\t     * @param {Object|Object[]} config One or multiple configurations\r\n\t     * @param {Izi.ioc.BeansContext} [parentContext]\r\n\t     * @return {Izi.ioc.BeansContext}\r\n\t     */\r\n\t    Api.prototype.bakeBeans = function (config, parentContext) {\r\n\t        return new module.ioc.BeansContext(this.globals, config, parentContext).initContext();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates singleton bean definition using passed class type\r\n\t     *\r\n\t     * @param {Function|String} clazz constructor function or dotted string class definition\r\n\t     * @return {Izi.ioc.Config}\r\n\t     */\r\n\t    Api.prototype.instantiate = function (clazz) {\r\n\t        return new module.ioc.Config(clazz, module.ioc.bean.SingletonStrategy, this.globals);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates lazy singleton bean definition using passed class type\r\n\t     *\r\n\t     * @param {Function|String} clazz constructor function or dotted string class definition\r\n\t     * @return {Izi.ioc.Config}\r\n\t     */\r\n\t    Api.prototype.lazy = function (clazz) {\r\n\t        return new module.ioc.Config(clazz, module.ioc.bean.LazySingletonStrategy, this.globals);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates prototype bean definition using passed class type\r\n\t     * @param {Function|String} clazz constructor function or dotted string class definition\r\n\t     * @return {Izi.ioc.Config}\r\n\t     */\r\n\t    Api.prototype.protoOf = function (clazz) {\r\n\t        return new module.ioc.Config(clazz, module.ioc.bean.PrototypeStrategy, this.globals);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Injects dependency by its beanId or class type. It can be used as constructor dependency injection or by\r\n\t     * property dependency injection.\r\n\t     *\r\n\t     * @param {String|Function} beanIdOrType Bean id or constructor function or dotted string class definition\r\n\t     * @return {Izi.ioc.Injection}\r\n\t     */\r\n\t    Api.prototype.inject = function (beanIdOrType) {\r\n\t        if (!beanIdOrType) {\r\n\t            throw new Error(\"Trying to inject invalid empty bean\");\r\n\t        }\r\n\t        return new module.ioc.Injection(beanIdOrType);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Init behavior API. You can specify function and scope:\r\n\t     *\r\n\t     *     izi.perform(behavior.perform, behavior).when('click').on(button)\r\n\t     *\r\n\t     * ... or only behavior ('perform' function will be called by default):\r\n\t     *\r\n\t     *     izi.perform(behavior).when('click').on(button)\r\n\t     *\r\n\t     * ... or custom event registrar ('register' and 'unregister' functions are required):\r\n\t     *\r\n\t     *     var registrar = {\r\n\t     *\r\n\t     *         register: function (target) {\r\n\t     *             target.addEventListener(...);\r\n\t     *             target.addEventListener(...);\r\n\t     *             target.addEventListener(...);\r\n\t     *         },\r\n\t     *\r\n\t     *         unregister: function (target) {\r\n\t     *             target.removeEventListener(...);\r\n\t     *             target.removeEventListener(...);\r\n\t     *             target.removeEventListener(...);\r\n\t     *         }\r\n\t     *     };\r\n\t     *\r\n\t     *     izi.perform(registrar).on(target);\r\n\t     *\r\n\t     * ... or nothing to get grouping method:\r\n\t     *\r\n\t     *     var perform = izi.perform();\r\n\t     *\r\n\t     *     perform(behavior1).when(\"click\").on(button1);\r\n\t     *     perform(behavior2).when(\"click\").on(button2);\r\n\t     *\r\n\t     *     perform.stopObserving(); // will stop observing them all\r\n\t     *\r\n\t     * @noSanity\r\n\t     * @param {Function|Object} functionOrBehaviorOrRegistrar\r\n\t     * @param {Object} [scope]\r\n\t     * @return {Izi.behavior.Perform}\r\n\t     */\r\n\t    Api.prototype.perform = function (functionOrBehaviorOrRegistrar, scope) {\r\n\t        throw new Error(\"Register your behavior implementation first: izi.registerBehaviorImpl(Izi.behavior.impl.SomeImpl)\");\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Registers behavior implementation\r\n\t     *\r\n\t     * @sanity izi.sanityOf(\"registerBehaviorImpl()\").args(izi.arg(\"impl\").ofObject().havingFunctions(\"observeWidget\", \"observeKeyStroke\").havingProperty(\"defaultPerformFunction\")).check(arguments);\r\n\t     * @param {Object} impl Behavior implementation config\r\n\t     * @param {String} impl.defaultPerformFunction Name of default perform function called on behavior\r\n\t     * @param {Function} impl.observeWidget Function that starts observing widget and returns function that stops observing. This function gets following arguments: <code>widget, eventConfig, action, scope, options</code>\r\n\t     * @param {Function} impl.observeKeyStroke Function that starts observing keyboard and returns function that stops observing. This function gets following arguments: <code>widget, keyboardConfig, action, scope, options</code>\r\n\t     */\r\n\t    Api.prototype.registerBehaviorImpl = function (impl) {\r\n\t        this.perform = module.behavior.register(impl, this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Init binding API\r\n\t     * @sanity izi.sanityOf(\"bind()\").args().args(izi.arg(\"options\").ofObject()).check(arguments);\r\n\t     * @param {Object} [options] Advanced options\r\n\t     * @param {Boolean} [options.auto=true] Start listen for changes automatically.\r\n\t     * @param {Boolean} [options.executeAtStartup=true] Execute binding immediately after creation. It works only when <code>auto=true</code>.\r\n\t     * @param {Boolean} [options.debug=false] Log every binding execution on browser's console.\r\n\t     * @return {Izi.binding.Bind}\r\n\t     */\r\n\t    Api.prototype.bind = function (options) {\r\n\t        throw new Error(\"Register your binding implementation first: izi.registerBindingImpl(Izi.binding.impl.SomeImpl)\");\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Registers binding implementation\r\n\t     * @sanity izi.sanityOf(\"registerBindingImpl()\").args(izi.arg(\"impl\").ofObject().havingProperties(\"changeObservers\", \"valueReaders\", \"valueWriters\")).check(arguments);izi.sanityOf(\"impl.changeObservers\").args(izi.varargOf(izi.arg().ofFunction())).check(impl.changeObservers);izi.sanityOf(\"impl.valueReaders\").args(izi.varargOf(izi.arg().ofFunction())).check(impl.valueReaders);izi.sanityOf(\"impl.valueWriters\").args(izi.varargOf(izi.arg().ofFunction())).check(impl.valueWriters);\r\n\t     * @param impl Binding implementation config\r\n\t     * @param {Function[]} impl.changeObservers Array of change observers functions. These functions get following parameters: <code>source, sourceProperty, target, targetProperty, transferValueFn</code>\r\n\t     * @param {Function[]} impl.valueReaders Array of functions that can read value from given object and property. These functions get following arguments: <code>object, property</code>\r\n\t     * @param {Function[]} impl.valueWriters Array of functions that can write value on given object and property. These functions get following arguments: <code>object, property, value</code>\r\n\t     */\r\n\t    Api.prototype.registerBindingImpl = function (impl) {\r\n\t        this.bind = module.binding.register(impl);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Creates class of izi model. Use this model in your project for data binding only when your framework\r\n\t     * doesn't provide 'observable' model.\r\n\t     *\r\n\t     * @sanity izi.sanityOf(\"izi.modelOf()\").args(izi.arg(\"config\").ofObject().havingProperty(\"fields\")).check(arguments);izi.sanityOf(\"config.fields\").args(izi.varargOf(izi.arg(\"field\").ofObject().havingProperty(\"name\"), izi.arg(\"fieldName\").ofString())).check(config.fields);\r\n\t     * @param {Object} config Model fields configuration. It must contain <strong>fields</strong> array of fields objects.\r\n\t     * @param {Array} config.fields Configuration of model fields\r\n\t     * @return {Function}\r\n\t     */\r\n\t    Api.prototype.modelOf = function (config) {\r\n\t        return module.model.Model.define(config);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     *\r\n\t     * @type {Izi.events.Events}\r\n\t     */\r\n\t    Api.prototype.events = new module.events.Events();\r\n\t\r\n\t    /**\r\n\t     * Init synchronized queue API\r\n\t     * @nosanity\r\n\t     * @param {Object} [config] Queue configuration\r\n\t     * @param {Object} [config.scope] default scope for all functions executions\r\n\t     * @param {Number} [config.timeout=\"0\"] default timeout for synchronized tasks - 0 is a default which means no timeout\r\n\t     * @param {String} [config.debug] use any String as an identifier of the queue that will be logged in browser console\r\n\t     * @return {Izi.queue.Queue}\r\n\t     */\r\n\t    Api.prototype.queue = function (config) {\r\n\t        throw new Error(\"Register your queue implementation first: izi.registerQueueImpl(Izi.queue.impl.SomeImpl)\");\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Registers queue implementation\r\n\t     * @sanity izi.sanityOf(\"registerQueueImpl()\").args(izi.arg(\"impl\").ofObject().havingFunctions(\"dispatchEvent\", \"createEventDispatcher\")).check(arguments);\r\n\t     * @param {Object} impl\r\n\t     * @param {Function} impl.dispatchEvent\r\n\t     * @param {Function} impl.createEventDispatcher\r\n\t     */\r\n\t    Api.prototype.registerQueueImpl = function (impl) {\r\n\t        this.queue = module.queue.register(impl, this);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     *\r\n\t     * @param {String|Object|null} [framework]\r\n\t     * @param {Object} [globals]\r\n\t     * @returns {izi}\r\n\t     */\r\n\t    Api.prototype.newInstance = function (framework, globals) {\r\n\t        return new Api(framework || this._framework, globals);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     *\r\n\t     * @param {Object} globals\r\n\t     * @returns {izi}\r\n\t     */\r\n\t    Api.prototype.sandboxed = function (globals) {\r\n\t        return this.newInstance(null, globals);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     *\r\n\t     * @param {String} name\r\n\t     * @param {Object} impl\r\n\t     * @param {Object} impl.behavior\r\n\t     * @param {Object} impl.binding\r\n\t     * @param {Object} impl.queue\r\n\t     */\r\n\t    module.registerFramework = function (name, impl) {\r\n\t        frameworks[name] = impl;\r\n\t    };\r\n\t\r\n\t    Api.prototype.module = module;\r\n\t    module.Api = Api;\r\n\t\r\n\t    izi = new Api();\r\n\t\r\n\t}(Izi, this);\r\n\t        return izi;\r\n\t    }\r\n\t    if (\"function\" === \"function\" && typeof __webpack_require__(3) === \"object\" && __webpack_require__(3).vendor !== \"dojotoolkit.org\") {\r\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (amdFactory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t    } else if (true) {\r\n\t        module.exports = amdFactory();\r\n\t    } else {\r\n\t        global.izi = amdFactory();\r\n\t    }\r\n\t})(this);\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, {}))\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = MainViewFactory;\n\t\n\tvar _classCallCheck2 = __webpack_require__(5);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(6);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction MainViewFactory(Vue) {\n\t\n\t    return function () {\n\t        function MainView(_ref) {\n\t            var _ref$replace = _ref.replace;\n\t            var replace = _ref$replace === undefined ? false : _ref$replace;\n\t            var component = _ref.component;\n\t            var el = _ref.el;\n\t            (0, _classCallCheck3.default)(this, MainView);\n\t\n\t            this.el = el;\n\t            this.component = component;\n\t            this.replace = replace;\n\t\n\t            requireOption(\"el\", el);\n\t            requireOption(\"component\", component);\n\t        }\n\t\n\t        (0, _createClass3.default)(MainView, [{\n\t            key: \"iziContext\",\n\t            value: function iziContext(context) {\n\t                this.context = context;\n\t                this.vueInstance = this._createVueInstance();\n\t            }\n\t        }, {\n\t            key: \"iziDestroy\",\n\t            value: function iziDestroy() {\n\t                this.vueInstance.$destroy(true);\n\t            }\n\t        }, {\n\t            key: \"_createVueInstance\",\n\t            value: function _createVueInstance() {\n\t                var context = this.context;\n\t\n\t                return new Vue({\n\t\n\t                    el: this.el,\n\t                    replace: this.replace,\n\t                    template: \"<view-component></view-component>\",\n\t\n\t                    components: {\n\t                        \"view-component\": this.component\n\t                    },\n\t\n\t                    events: {\n\t                        \"izi.wireMe\": function iziWireMe(child) {\n\t                            context.wire(child);\n\t                            return false;\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        }]);\n\t        return MainView;\n\t    }();\n\t}\n\t\n\tfunction requireOption(name, value) {\n\t    if (!value) {\n\t        throw new Error(\"Option \" + name + \" is required\");\n\t    }\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\texports.default = function (instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tvar _defineProperty = __webpack_require__(7);\n\t\n\tvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = (function () {\n\t  function defineProperties(target, props) {\n\t    for (var i = 0; i < props.length; i++) {\n\t      var descriptor = props[i];\n\t      descriptor.enumerable = descriptor.enumerable || false;\n\t      descriptor.configurable = true;\n\t      if (\"value\" in descriptor) descriptor.writable = true;\n\t      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n\t    }\n\t  }\n\t\n\t  return function (Constructor, protoProps, staticProps) {\n\t    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t    if (staticProps) defineProperties(Constructor, staticProps);\n\t    return Constructor;\n\t  };\n\t})();\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(8), __esModule: true };\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar $ = __webpack_require__(9);\n\tmodule.exports = function defineProperty(it, key, desc){\n\t  return $.setDesc(it, key, desc);\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tvar $Object = Object;\n\tmodule.exports = {\n\t  create:     $Object.create,\n\t  getProto:   $Object.getPrototypeOf,\n\t  isEnum:     {}.propertyIsEnumerable,\n\t  getDesc:    $Object.getOwnPropertyDescriptor,\n\t  setDesc:    $Object.defineProperty,\n\t  setDescs:   $Object.defineProperties,\n\t  getKeys:    $Object.keys,\n\t  getNames:   $Object.getOwnPropertyNames,\n\t  getSymbols: $Object.getOwnPropertySymbols,\n\t  each:       [].forEach\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = vueDataInjectorFactory;\n\tfunction vueDataInjectorFactory(Vue) {\n\t\n\t    return function vueDataInjector(target, prop, dependency) {\n\t        if (dependency && !dependency.__ob__) {\n\t            new Vue({\n\t                data: {\n\t                    dependency: dependency\n\t                }\n\t            });\n\t        }\n\t        target.$set(prop, dependency);\n\t    };\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\texports.default = function (izi, vueDataInjector) {\n\t    return {\n\t        created: function created() {\n\t            unwrap$optionsIziInject(this.$options, izi, vueDataInjector);\n\t            moveInjectionsToVueInstance(this);\n\t            this.$dispatch(\"izi.wireMe\", this);\n\t        }\n\t    };\n\t};\n\t\n\tfunction unwrap$optionsIziInject($options, izi, vueDataInjector) {\n\t    if (!$options.iziInject) {\n\t        return;\n\t    }\n\t\n\t    for (var prop in $options.iziInject) {\n\t        var beanId = $options.iziInject[prop];\n\t        if (prop !== \"data\") {\n\t            $options[prop] = izi.inject(beanId);\n\t        } else {\n\t            unwrapDataInjection($options, izi, vueDataInjector);\n\t        }\n\t    }\n\t}\n\t\n\tfunction unwrapDataInjection($options, izi, vueDataInjector) {\n\t    var data = $options.iziInject.data;\n\t\n\t    if (!data) {\n\t        return;\n\t    }\n\t\n\t    for (var prop in data) {\n\t        var beanId = data[prop];\n\t        $options[prop] = izi.inject(beanId).by(vueDataInjector);\n\t    }\n\t}\n\t\n\tfunction moveInjectionsToVueInstance(vueInstance) {\n\t    for (var prop in vueInstance.$options) {\n\t        var injection = vueInstance.$options[prop];\n\t        if (injection && injection.isIziInjection) {\n\t            vueInstance[prop] = injection;\n\t        }\n\t    }\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** izi-vue.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b6926bb115919b0e408c\n **/","import izi from \"./vue-plugin\";\r\n\r\nmodule.exports = izi;\n\n\n/** WEBPACK FOOTER **\n ** ./src/main/js/izi-vue.js\n **/","import izi from \"izi-js/dist/izi-js-debug\";\r\nimport MainView from \"./MainViewFactory\";\r\nimport vueDataInjector from \"./vueDataInjectorFactory\";\r\nimport wireMeMixin from \"./wireMeMixin\";\r\n\r\nizi.VuePlugin = function (Vue, {vueDataInjector: dataInjector = vueDataInjector(Vue)} = {}) {\r\n\r\n    Vue.mixin(wireMeMixin(izi, dataInjector));\r\n\r\n    Vue.izi = {\r\n        vueDataInjector: dataInjector,\r\n        MainView: MainView(Vue)\r\n    };\r\n};\r\n\r\nexport default izi;\n\n\n/** WEBPACK FOOTER **\n ** ./src/main/js/vue-plugin/index.js\n **/","/**\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 izi-js contributors\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n(function (global) {\r\n    function amdFactory() {\r\n\r\nvar izi,\r\n    Izi = {\r\n        ioc: {\r\n            bean: {}\r\n        },\r\n        utils: {},\r\n        model: {},\r\n        behavior: {\r\n            impl: {}\r\n        },\r\n        binding: {\r\n            impl: {\r\n                nested: {}\r\n            }\r\n        },\r\n        events: {\r\n        },\r\n        queue: {\r\n            impl: {}\r\n        }\r\n    };\r\n// #ifdef DEBUG\r\nIzi.isDebug = true;\r\n// #endif\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Array} array\r\n     * @param {Function} item\r\n     * @param {Object} scope\r\n     */\r\n    module.utils.forEach = (function () {\r\n\r\n        function byForEach(array, fn, scope) {\r\n            Array.prototype.forEach.call(array, fn, scope);\r\n        }\r\n\r\n        function byLoop(array, fn, scope) {\r\n            var i,\r\n                ln = array.length;\r\n\r\n            for (i = 0; i < ln; i = i + 1) {\r\n                fn.call(scope, array[i], i, array);\r\n            }\r\n        }\r\n\r\n        function hasForEach() {\r\n            return (typeof Array.prototype.forEach) === 'function';\r\n        }\r\n\r\n        return hasForEach() ? byForEach : byLoop;\r\n    }());\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @private\r\n     * @param value\r\n     * @return {String}\r\n     */\r\n    module.utils.typeOf = function (value) {\r\n        if (value === undefined) {\r\n            return 'undefined';\r\n        } else if (value === null) {\r\n            return 'null';\r\n        }\r\n\r\n        switch (typeof value)  {\r\n            case 'string':\r\n                return 'String';\r\n            case 'number':\r\n                return 'Number';\r\n            case 'boolean':\r\n                return 'Boolean';\r\n            case 'function':\r\n                return 'Function';\r\n        }\r\n\r\n        switch (Object.prototype.toString.call(value)) {\r\n            case '[object Array]':\r\n                return 'Array';\r\n            case '[object Date]':\r\n                return 'Date';\r\n            case '[object RegExp]':\r\n                return 'RegExp';\r\n            case '[object Boolean]':\r\n                return 'Boolean';\r\n            case '[object Number]':\r\n                return 'Number';\r\n        }\r\n\r\n        if (typeof value === 'object') {\r\n            return 'Object';\r\n        } else {\r\n            throw new Error(\"Couldn't find type of given value\");\r\n        }\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/forEach.js\r\n * @requires ../utils/typeOf.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * After <code>izi.perform(behavior).when('click').on(widget)...</code> behavior API\r\n     * @class Izi.behavior.OnWidget\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.behavior.Config} config\r\n     */\r\n    var OnWidget = function Izi_behavior_OnWidget(config) {\r\n        var action = config.getAction(),\r\n            scope = config.getScope(),\r\n            events = config.getEvents(),\r\n            eventOptions = config.getEventOptions(),\r\n            widget = config.getDispatcher(),\r\n            impl = config.getImpl(),\r\n            me = this;\r\n\r\n\r\n        function startObserving() {\r\n            me.observers = [];\r\n\r\n            module.utils.forEach(events, function (eventConfig) {\r\n\r\n                if (eventConfig.isKeyboardEventConfig) {\r\n                    if (widget.iziObserveKeyStroke) {\r\n                        me.observers.push(widget.iziObserveKeyStroke(eventConfig, action, scope, eventOptions));\r\n                    } else {\r\n                        me.observers.push(impl.observeKeyStroke(widget, eventConfig, action, scope, eventOptions));\r\n                    }\r\n\r\n                } else if (eventConfig.isEventConfig) {\r\n                    if (widget.iziObserveWidget) {\r\n                        me.observers.push(widget.iziObserveWidget(eventConfig, action, scope, eventOptions));\r\n                    } else {\r\n                        me.observers.push(impl.observeWidget(widget, eventConfig, action, scope, eventOptions));\r\n                    }\r\n\r\n                } else if (module.utils.typeOf(eventConfig) === \"Function\") {\r\n                    me.observers.push(eventConfig(widget, action, scope, eventOptions));\r\n\r\n                } else {\r\n                    throw new Error(\"Incorrect event type. Expecting izi.event.* or 'eventType' or function(target, action, scope, eventOptions)\");\r\n                }\r\n            });\r\n        }\r\n\r\n        startObserving();\r\n        config.behavior = this;\r\n    };\r\n\r\n    /**\r\n     * Stops observing the widget\r\n     * @member Izi.behavior.OnWidget\r\n     */\r\n    OnWidget.prototype.stopObserving = function () {\r\n        module.utils.forEach(this.observers, function (observer) {\r\n            observer();\r\n        });\r\n    };\r\n\r\n    module.behavior.OnWidget = OnWidget;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires OnWidget.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * After `izi.perform(behavior).when('click')...` behavior API\r\n     * @class Izi.behavior.WhenWidget\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.behavior.Config} config\r\n     */\r\n    var WhenWidget = function Izi_behavior_WhenWidget(config) {\r\n        this.config = config;\r\n    };\r\n\r\n    /**\r\n     * Widget declaration. You can pass directly widget instance or object containing widget on **delegatedIn** property.\r\n     *\r\n     *     var showMessage = new ShowMessage();\r\n     *     var button = new Button();\r\n     *     var wrapper = {\r\n     *         delegatedIn: button\r\n     *     };\r\n     *\r\n     *     izi.perform(showMessage).when('click').on(button);\r\n     *\r\n     *     // will work also for:\r\n     *     izi.perform(showMessage).when('click').on(wrapper);\r\n     *\r\n     *\r\n     * @member Izi.behavior.WhenWidget\r\n     * @param {*} widget Widget that should be observed.\r\n     * @return {Izi.behavior.OnWidget}\r\n     */\r\n    WhenWidget.prototype.on = function (widget) {\r\n        return new module.behavior.OnWidget(this.config.withDispatcher(widget));\r\n    };\r\n\r\n    module.behavior.WhenWidget = WhenWidget;\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/forEach.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * After <code>izi.perform(behavior).whenChangeOf('property1', 'property2').on(model)...</code> behavior API\r\n     * @class Izi.behavior.OnModel\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.behavior.Config} config\r\n     */\r\n    module.behavior.OnModel = function Izi_behavior_OnModel(config) {\r\n        var action = config.getAction(),\r\n            scope = config.getScope(),\r\n            model = config.getDispatcher(),\r\n            modelProperties = config.getModelProperties(),\r\n            bindings = [];\r\n\r\n        config.behavior = this;\r\n\r\n        function triggerAction() {\r\n            action.apply(scope, arguments);\r\n        }\r\n\r\n        module.utils.forEach(modelProperties, function (property) {\r\n            bindings.push(config.iziApi.bind({executeAtStartup: false}).valueOf(model, property).to(triggerAction));\r\n        });\r\n\r\n        /**\r\n         * Stops observing the model\r\n         */\r\n        this.stopObserving = function () {\r\n            module.utils.forEach(bindings, function (binding) {\r\n                binding.unbind();\r\n            });\r\n        };\r\n    };\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires OnModel.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * After `izi.perform(behavior).whenChangeOf('firstName')...` behavior API\r\n     * @class Izi.behavior.WhenModel\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.behavior.Config} config\r\n     */\r\n    var WhenModel = function Izi_behavior_WhenModel(config) {\r\n        this.config = config;\r\n    };\r\n\r\n    /**\r\n     * Model declaration. You can pass directly model instance or object containing model on <strong>delegatedIn</strong> property.\r\n     *\r\n     *     var showFullName = new ShowFullName();\r\n     *     var model = new UserModel();\r\n     *     var wrapper = {\r\n     *         delegatedIn: model\r\n     *     };\r\n     *\r\n     *     izi.perform(showFullName).whenChangeOf('firstName', 'lastName').on(model);\r\n     *\r\n     *     // will work also for:\r\n     *     izi.perform(showFullName).whenChangeOf('firstName', 'lastName').on(wrapper);\r\n     *\r\n     * @member Izi.behavior.WhenModel\r\n     * @param {Object} model Model that should be observed for properties changes.\r\n     * @return {Izi.behavior.OnModel}\r\n     */\r\n    WhenModel.prototype.on = function (model) {\r\n        return new module.behavior.OnModel(this.config.withDispatcher(model));\r\n    };\r\n\r\n    module.behavior.WhenModel = WhenModel;\r\n\r\n}(Izi);\r\n!function (module) {\r\n\r\n    var PREVENT_DEFAULT = 'preventDefault',\r\n        STOP_PROPAGATION = 'stopPropagation',\r\n        BOTH = 'both';\r\n\r\n\r\n    /**\r\n     * @class Izi.events.EventConfig\r\n     * @constructor\r\n     * @private\r\n     * @param {String} [eventType]\r\n     */\r\n    var EventConfig = function Izi_events_EventConfig(eventType) {\r\n\r\n        /**\r\n         * @private\r\n         * @member Izi.events.EventConfig\r\n         * @type {String}\r\n         */\r\n        this.eventType = eventType;\r\n\r\n        /**\r\n         * @private\r\n         * @member Izi.events.EventConfig\r\n         * @type {Object}\r\n         */\r\n        this.modifiers = {\r\n            shift: false,\r\n            ctrl: false,\r\n            alt: false\r\n        };\r\n\r\n        /**\r\n         * @private\r\n         * @member Izi.events.EventConfig\r\n         * @type {String}\r\n         */\r\n        this.stopEventType = undefined;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.events.EventConfig\r\n     * @private\r\n     * @type {Boolean}\r\n     */\r\n    EventConfig.prototype.isEventConfig = true;\r\n\r\n    /**\r\n     * Setup if SHIFT key is expected to be pressed during user interaction\r\n     * @member Izi.events.EventConfig\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    EventConfig.prototype.shift = function () {\r\n        this.modifiers.shift = true;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Setup if CTRL key is expected to be pressed during user interaction\r\n     * @member Izi.events.EventConfig\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    EventConfig.prototype.ctrl = function () {\r\n        this.modifiers.ctrl = true;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Setup if ALT key is expected to be pressed during user interaction\r\n     * @member Izi.events.EventConfig\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    EventConfig.prototype.alt = function () {\r\n        this.modifiers.alt = true;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Setup if stopPropagation() and preventDefaults() should be called on triggered event\r\n     * @member Izi.events.EventConfig\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    EventConfig.prototype.stopEvent = function () {\r\n        this.stopEventType = BOTH;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Setup if stopPropagation() should be called on triggered event\r\n     * @member Izi.events.EventConfig\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    EventConfig.prototype.stopPropagation = function () {\r\n        this.stopEventType = STOP_PROPAGATION;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Setup if preventDefaults() should be called on triggered event\r\n     * @member Izi.events.EventConfig\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    EventConfig.prototype.preventDefault = function () {\r\n        this.stopEventType = PREVENT_DEFAULT;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns flag for SHIFT key modifier\r\n     * @private\r\n     * @member Izi.events.EventConfig\r\n     * @return {Boolean}\r\n     */\r\n    EventConfig.prototype.isExpectedShiftKey = function () {\r\n        return this.modifiers.shift;\r\n    };\r\n\r\n    /**\r\n     * Returns flag for CTRL key modifier\r\n     * @private\r\n     * @member Izi.events.EventConfig\r\n     * @return {Boolean}\r\n     */\r\n    EventConfig.prototype.isExpectedCtrlKey = function () {\r\n        return this.modifiers.ctrl;\r\n    };\r\n\r\n    /**\r\n     * Returns flag for ALT key modifier\r\n     * @private\r\n     * @member Izi.events.EventConfig\r\n     * @return {Boolean}\r\n     */\r\n    EventConfig.prototype.isExpectedAltKey = function () {\r\n        return this.modifiers.alt;\r\n    };\r\n\r\n    /**\r\n     * Returns event type\r\n     * @private\r\n     * @member Izi.events.EventConfig\r\n     * @return {String}\r\n     */\r\n    EventConfig.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n\r\n    /**\r\n     * Returns if event should be stopped for further propagation\r\n     * @private\r\n     * @member Izi.events.EventConfig\r\n     * @return {Boolean}\r\n     */\r\n    EventConfig.prototype.shouldStopPropagation = function () {\r\n        return this.stopEventType === STOP_PROPAGATION || this.stopEventType === BOTH;\r\n    };\r\n\r\n    /**\r\n     * Returns if event should prevent default behavior\r\n     * @private\r\n     * @member Izi.events.EventConfig\r\n     * @return {Boolean}\r\n     */\r\n    EventConfig.prototype.shouldPreventDefault = function () {\r\n        return this.stopEventType === PREVENT_DEFAULT || this.stopEventType === BOTH;\r\n    };\r\n\r\n    /**\r\n     * Returns true if all given modifiers matches configured modifiers.\r\n     * @member Izi.events.EventConfig\r\n     * @private\r\n     * @param {Boolean} shiftKey\r\n     * @param {Boolean} ctrlKey\r\n     * @param {Boolean} altKey\r\n     * @return {Boolean}\r\n     */\r\n    EventConfig.prototype.matchesModifiers = function (shiftKey, ctrlKey, altKey) {\r\n        return this.isExpectedShiftKey() === shiftKey &&\r\n               this.isExpectedCtrlKey() === ctrlKey &&\r\n               this.isExpectedAltKey() === altKey;\r\n    };\r\n\r\n    module.events.EventConfig = EventConfig;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires WhenWidget.js\r\n * @requires WhenModel.js\r\n * @requires ../utils/typeOf.js\r\n * @requires ../events/EventConfig.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * After <code>izi.perform(behavior)...</code> behavior API\r\n     * @class Izi.behavior.Perform\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.behavior.Config} config\r\n     */\r\n    var Perform = function Izi_behavior_Perform(config) {\r\n        this.config = config;\r\n    };\r\n\r\n    /**\r\n     * Specifies when your behavior should be executed. This method accept multiple inputs:\r\n     *\r\n     * String:\r\n     *\r\n     *     izi.perform(behavior).when('click').on(button);\r\n     *\r\n     * EventConfig:\r\n     *\r\n     *     izi.perform(behavior).when(izi.events.click().shift()).on(button);\r\n     *     izi.perform(behavior).when(izi.events.keyDown().F4().shift().stopEvent()).on(document);\r\n     *\r\n     * Multiple events:\r\n     *\r\n     *     izi.perform(behavior).when('mouseup', 'mousedown').on(button);\r\n     *     izi.perform(behavior).when(izi.events.click(), izi.events.keyDown().ENTER()).on(button);\r\n     *\r\n     * Event registration function: (since 1.5.0)\r\n     *\r\n     *     // target - is a button in this example\r\n     *     // action - is a reference to `behavior.perform` function\r\n     *     // scope - is a reference to `behavior`\r\n     *     function click(target, action, scope, eventOptions) {\r\n     *\r\n     *         // You may use any custom registration here\r\n     *         target.addListener(\"click\", action, scope);\r\n     *\r\n     *         return function stopObserving() {\r\n     *\r\n     *             // You must return function that will unregister listener\r\n     *             target.removeListener(\"click\", action, scope);\r\n     *         }\r\n     *     }\r\n     *     izi.perform(behavior).when(click).on(button);\r\n     *\r\n     * @member Izi.behavior.Perform\r\n     * @param {String.../Izi.events.EventConfig.../Function...|Object...} events Event type which should be observed for triggering behavior\r\n     * or event config created by izi.events.click() etc...\r\n     * @param {Object} [eventOptions] Optionally you can pass also event options if your framework implementation supports it.\r\n     * @return {Izi.behavior.WhenWidget}\r\n     */\r\n    Perform.prototype.when = function () {\r\n        var events = [],\r\n            eventOptions,\r\n            arg, argType;\r\n\r\n        for (var i = arguments.length - 1; i >= 0; i--) {\r\n            arg = arguments[i];\r\n            argType = module.utils.typeOf(arg);\r\n\r\n            if (argType === 'String') {\r\n                events.push(new module.events.EventConfig(arg));\r\n            } else if (arg.isEventConfig || argType === 'Function') {\r\n                events.push(arg);\r\n            } else if (argType === 'Object') {\r\n                eventOptions = arg;\r\n            } else {\r\n                throw new Error(\"Incorrect event types/options arguments\");\r\n            }\r\n        }\r\n\r\n        return new module.behavior.WhenWidget(this.config.withEvents(events).withEventOptions(eventOptions));\r\n    };\r\n\r\n    /**\r\n     * Model properties names which should be observed for changes\r\n     * @member Izi.behavior.Perform\r\n     * @param {String...} properties\r\n     * @return {Izi.behavior.WhenModel}\r\n     */\r\n    Perform.prototype.whenChangeOf = function (properties) {\r\n\r\n        return new module.behavior.WhenModel(this.config.withModelProperties(Array.prototype.slice.call(arguments)));\r\n    };\r\n\r\n\r\n    /**\r\n     * Target object for custom registrar\r\n     *     var registrar = {\r\n     *\r\n     *         register: function (target) {\r\n     *             target.addEventListener(...);\r\n     *             target.addEventListener(...);\r\n     *             target.addEventListener(...);\r\n     *         },\r\n     *\r\n     *         unregister: function (target) {\r\n     *             target.removeEventListener(...);\r\n     *             target.removeEventListener(...);\r\n     *             target.removeEventListener(...);\r\n     *         }\r\n     *     };\r\n     *\r\n     *     izi.perform(registrar).on(target);\r\n     *\r\n     * @param {*} target\r\n     */\r\n    Perform.prototype.on = function (target) {\r\n        var registrar = this.config.action;\r\n\r\n        if (module.utils.typeOf(registrar.register) === 'Function') {\r\n\r\n            registrar.register(target);\r\n\r\n            return {\r\n                stopObserving: function () {\r\n                    registrar.unregister(target);\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error(\"Use on(target) method only for custom registrars: izi.perform({register: function (target){...}).on(target)\");\r\n        }\r\n    };\r\n\r\n    module.behavior.Perform = Perform;\r\n\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * Internal configuration used in behavior fluent API\r\n     * @class Izi.behavior.Config\r\n     * @constructor\r\n     * @private\r\n     * @param {Object} impl izi behavior implementation\r\n     * @param {izi} iziApi izi behavior implementation\r\n     */\r\n    var Config = function Izi_behavior_Config(impl, iziApi) {\r\n        this.impl = impl;\r\n        this.iziApi = iziApi;\r\n    };\r\n\r\n    /**\r\n     * Set dispatcher\r\n     * @member Izi.behavior.Config\r\n     * @private\r\n     * @param dispatcher\r\n     * @return {Izi.behavior.Config}\r\n     */\r\n    Config.prototype.withDispatcher = function (dispatcher) {\r\n        this.dispatcher = dispatcher;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Set event type\r\n     * @member Izi.behavior.Config\r\n     * @private\r\n     * @param {Izi.events.EventConfig[]} events\r\n     * @return {Izi.behavior.Config}\r\n     */\r\n    Config.prototype.withEvents = function (events) {\r\n        this.events = events;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Set event options\r\n     * @member Izi.behavior.Config\r\n     * @private\r\n     * @param eventOptions\r\n     * @return {Izi.behavior.Config}\r\n     */\r\n    Config.prototype.withEventOptions = function (eventOptions) {\r\n        this.eventOptions = eventOptions;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Set action\r\n     * @member Izi.behavior.Config\r\n     * @private\r\n     * @param action\r\n     * @return {Izi.behavior.Config}\r\n     */\r\n    Config.prototype.withAction = function (action) {\r\n        this.action = action;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Set scope\r\n     * @member Izi.behavior.Config\r\n     * @private\r\n     * @param scope\r\n     * @return {Izi.behavior.Config}\r\n     */\r\n    Config.prototype.withScope = function (scope) {\r\n        this.scope = scope;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Set model properties\r\n     * @member Izi.behavior.Config\r\n     * @private\r\n     * @param modelProperties\r\n     * @return {Izi.behavior.Config}\r\n     */\r\n    Config.prototype.withModelProperties = function (modelProperties) {\r\n        this.modelProperties = modelProperties;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * In case of usage: <code>izi.perform(behavior)</code> - it will return <code>behavior.perform</code> function\r\n     * In case of usage: <code>izi.perform(scope.function)</code> - it will return <code>scope.function</code>\r\n     * @member Izi.behavior.Config\r\n     * @return {Function}\r\n     */\r\n    Config.prototype.getAction = function () {\r\n        if ((typeof this.action) !== \"function\" && (!this.scope)) {\r\n            return this.getScope()[this.getImpl().defaultPerformFunction];\r\n        }\r\n\r\n        return this.action;\r\n    };\r\n\r\n    /**\r\n     * In case of usage: <code>izi.perform(behavior)</code> - it will return <code>behavior</code>\r\n     * In case of usage: <code>izi.perform(scope.function, scope)</code> - it will return <code>scope</code>\r\n     * @member Izi.behavior.Config\r\n     * @return {Object}\r\n     */\r\n    Config.prototype.getScope = function () {\r\n        if ((typeof this.action) !== \"function\" && (!this.scope)) {\r\n            return this.action;\r\n        }\r\n\r\n        return this.scope;\r\n    };\r\n\r\n    /**\r\n     * Get event type\r\n     * @member Izi.behavior.Config\r\n     * @return {Izi.events.EventConfig[]}\r\n     */\r\n    Config.prototype.getEvents = function () {\r\n        return this.events;\r\n    };\r\n\r\n    /**\r\n     * Get event options\r\n     * @member Izi.behavior.Config\r\n     * @return {Object}\r\n     */\r\n    Config.prototype.getEventOptions = function () {\r\n        return this.eventOptions;\r\n    };\r\n\r\n    /**\r\n     * Get event dispatcher\r\n     * @member Izi.behavior.Config\r\n     * @return {*}\r\n     */\r\n    Config.prototype.getDispatcher = function () {\r\n        return this.dispatcher.delegatedIn || this.dispatcher;\r\n    };\r\n\r\n    /**\r\n     * Get behavior implementation\r\n     * @member Izi.behavior.Config\r\n     * @return {*}\r\n     */\r\n    Config.prototype.getImpl = function () {\r\n        return this.impl;\r\n    };\r\n\r\n    /**\r\n     * Get model properties\r\n     * @member Izi.behavior.Config\r\n     * @return {String[]}\r\n     */\r\n    Config.prototype.getModelProperties = function () {\r\n        return this.modelProperties;\r\n    };\r\n\r\n    module.behavior.Config = Config;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires Perform.js\r\n * @requires Config.js\r\n * @requires ../utils/forEach.js\r\n */\r\n!function(module) {\r\n\r\n    /**\r\n     * @member Izi.behavior\r\n     * @method\r\n     * @private\r\n     * @param {Object} impl\r\n     * @param {izi} iziApi\r\n     */\r\n    module.behavior.register = function (impl, iziApi) {\r\n\r\n        if (!impl.defaultPerformFunction) {\r\n            throw new Error(\"Behavior implementation must have defined property: defaultPerformFunction: 'someFunctionName'\");\r\n        }\r\n        if (!impl.observeWidget) {\r\n            throw new Error(\"Behavior implementation must have defined function observeWidget (widget, eventConfig, action, scope, options)\");\r\n        }\r\n        if (!impl.observeKeyStroke) {\r\n            throw new Error(\"Behavior implementation must have defined function observeKeyStroke (widget, keyboardConfig, action, scope, options)\");\r\n        }\r\n\r\n        /**\r\n         * @ignore\r\n         * @sanity izi.sanityOf(\"izi.perform()\").args().args(izi.arg(\"behavior\").ofObject().havingFunction(impl.defaultPerformFunction)).args(izi.arg(\"behaviorWrapper\").ofObject().havingProperty(\"delegatedIn\")).args(izi.arg(\"callback\").ofFunction()).args(izi.arg(\"callback\").ofFunction(), izi.arg(\"scope\").ofObject()).args(izi.arg(\"registrar\").ofObject().havingFunctions(\"register\", \"unregister\")).check(arguments);\r\n         */\r\n        return function (action, scope) {\r\n\r\n            if (arguments.length === 0) {\r\n                var configs = [];\r\n\r\n                var registerBehaviors = function (action, scope) {\r\n                    var config = new module.behavior.Config(impl, iziApi).withAction(action).withScope(scope);\r\n                    configs.push(config);\r\n                    return new module.behavior.Perform(config);\r\n                };\r\n\r\n                registerBehaviors.stopObserving = function () {\r\n                    module.utils.forEach(configs, function (config) {\r\n                        config.behavior.stopObserving();\r\n                    });\r\n                };\r\n\r\n                return registerBehaviors;\r\n            }\r\n\r\n            return new module.behavior.Perform(new module.behavior.Config(impl, iziApi).withAction(action).withScope(scope));\r\n        };\r\n    };\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Object} object host object\r\n     * @param {String} property to be examined to\r\n     */\r\n    module.utils.hasOwnProperty = function (object, property) {\r\n        return Object.prototype.hasOwnProperty.call(object, property);\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires hasOwnProperty.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Object...} vararg of any Objects\r\n     */\r\n    module.utils.mergeObjects = function () {\r\n\r\n        function copyProperties(source, target) {\r\n            for (var key in source) {\r\n                if (module.utils.hasOwnProperty(source, key)) {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return function () {\r\n            var result = {};\r\n            for (var i = 0; i < arguments.length; i++) {\r\n                copyProperties(arguments[i], result);\r\n            }\r\n            return result;\r\n        }\r\n    }();\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Array} array\r\n     * @param {*} item\r\n     * @return {Number}\r\n     */\r\n    module.utils.indexOf = (function () {\r\n\r\n        function byIndexOf(array, item) {\r\n            return Array.prototype.indexOf.call(array, item);\r\n        }\r\n\r\n        function byLoop(array, item) {\r\n            var i, ln = array.length;\r\n\r\n            for (i = 0; i < ln; i = i + 1) {\r\n                if (array[i] === item) {\r\n                    return i;\r\n                }\r\n            }\r\n\r\n            return -1;\r\n        }\r\n\r\n        function hasIndexOf() {\r\n            return (typeof Array.prototype.indexOf) === 'function';\r\n        }\r\n\r\n        return hasIndexOf() ? byIndexOf : byLoop;\r\n    }());\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires indexOf.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Array} array\r\n     * @param {*} item\r\n     */\r\n    module.utils.removeItem = function (array, item) {\r\n        var start = module.utils.indexOf(array, item);\r\n        if (start !== -1) {\r\n            array.splice(start, 1);\r\n        }\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/mergeObjects.js\r\n * @requires ../utils/removeItem.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * Internal configuration used in binding fluent API\r\n     * @private\r\n     * @class Izi.binding.Config\r\n     * @constructor\r\n     * @param {Object} impl izi binding implementation\r\n     */\r\n    var Config = function Izi_binding_Config(impl) {\r\n        this.options = {\r\n            auto: true,\r\n            executeAtStartup: true,\r\n            debug: false\r\n        };\r\n        this.impl = impl;\r\n        this.triggerProperties = [];\r\n        this.bindings = [];\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param {Object} options\r\n     * @return {Izi.binding.Config}\r\n     * @since 1.1.0\r\n     */\r\n    Config.prototype.withOptions = function (options) {\r\n        this.options = module.utils.mergeObjects(this.options, options);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param {Izi.binding.Binding[]} bindings\r\n     * @return {Izi.binding.Config}\r\n     * @since 1.1.0\r\n     */\r\n    Config.prototype.withBindings = function (bindings) {\r\n        this.bindings = bindings;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param {Function} callerLineProvider\r\n     * @return {Izi.binding.Config}\r\n     * @since 1.1.0\r\n     */\r\n    Config.prototype.withCallerLineProvider = function (callerLineProvider) {\r\n        this.callerLineProvider = callerLineProvider;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param source\r\n     * @return {Izi.binding.Config}\r\n     */\r\n    Config.prototype.withSource = function (source) {\r\n        this.source = source;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param sourceProperties\r\n     * @return {Izi.binding.Config}\r\n     */\r\n    Config.prototype.withSourceProperties = function (sourceProperties) {\r\n        this.sourceProperties = sourceProperties.constructor === Array ? sourceProperties : [sourceProperties];\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param target\r\n     * @return {Izi.binding.Config}\r\n     */\r\n    Config.prototype.withTarget = function (target) {\r\n        this.target = target;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param value\r\n     * @return {Izi.binding.Config}\r\n     */\r\n    Config.prototype.withTargetProperty = function (value) {\r\n        this.targetProperty = value;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param formatter\r\n     * @return {Izi.binding.Config}\r\n     */\r\n    Config.prototype.withFormatter = function (formatter) {\r\n        this.formatter = formatter;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param property\r\n     */\r\n    Config.prototype.addTriggerProperty = function (property) {\r\n        this.triggerProperties.push(property);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param {Izi.binding.Binding} binding\r\n     */\r\n    Config.prototype.addBinding = function (binding) {\r\n        this.bindings.push(binding);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Config\r\n     * @private\r\n     * @param {Izi.binding.Binding} binding\r\n     */\r\n    Config.prototype.removeBinding = function (binding) {\r\n        module.utils.removeItem(this.bindings, binding);\r\n    };\r\n\r\n    module.binding.Config = Config;\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @since 1.1.0\r\n     * @private\r\n     * @param {Function} fn\r\n     * @param {Object} scope\r\n     * @return {Function}\r\n     */\r\n    module.utils.curry = function (fn, scope) {\r\n        return function () {\r\n            fn.apply(scope, arguments);\r\n        }\r\n    };\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Array} factories\r\n     * @param {Array} args\r\n     * @param {Object} scope\r\n     */\r\n    module.utils.findClosure = function Izi_utils_findClosure(factories, args, scope) {\r\n        var i, factory, closure;\r\n        for (i = 0; i < factories.length; i = i + 1) {\r\n            factory = factories[i];\r\n            closure = factory.apply(scope, args);\r\n            if (closure) {\r\n                return closure;\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Closure not found\");\r\n    };\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @since 1.1.0\r\n     * @private\r\n     * @param {String} text\r\n     * @return {String}\r\n     */\r\n    module.utils.trim = function (text) {\r\n        return text.replace(/^\\W+/, '').replace(/\\W+$/, '');\r\n    };\r\n}(Izi);\r\n!function (module, global) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @since 1.2.0\r\n     * @private\r\n     */\r\n    var logImpl;\r\n    if (\"console\" in global) {\r\n        logImpl = function () {\r\n            if (global.console.log.apply) {\r\n                global.console.log.apply(global.console, arguments);\r\n            } else {\r\n                // IE :)\r\n                global.console.log(Array.prototype.slice.call(arguments));\r\n            }\r\n\r\n        }\r\n    } else {\r\n        logImpl = function () {\r\n            // no loggers other than window.console\r\n        }\r\n    }\r\n\r\n    module.utils.log = function () {\r\n        logImpl.apply(global, arguments);\r\n    }\r\n\r\n}(Izi, this);\r\n/**\r\n * @ignore\r\n * @requires Config.js\r\n * @requires ../utils/typeOf.js\r\n * @requires ../utils/forEach.js\r\n * @requires ../utils/curry.js\r\n * @requires ../utils/findClosure.js\r\n * @requires ../utils/trim.js\r\n * @requires ../utils/log.js\r\n */\r\n!function (module) {\r\n    var forEach = module.utils.forEach,\r\n        curry = module.utils.curry,\r\n        findClosure = module.utils.findClosure,\r\n        trim = module.utils.trim,\r\n        log = module.utils.log,\r\n        INVALID_VALUE = {};\r\n\r\n    function onlyOnceError() {\r\n        throw new Error(\"twoWay() method may be used only once\");\r\n    }\r\n\r\n    /**\r\n     * Binding initializer - the last part of\r\n     * <code>izi.bind().valueOf(source, 'sourceProperty').to(target, 'targetProperty')</code> fluent API\r\n     * @class Izi.binding.Binding\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.binding.Config} config\r\n     */\r\n    var Binding = function Izi_binding_Binding(config) {\r\n\r\n        this.impl = config.impl;\r\n        this.source = config.source.delegatedIn || config.source;\r\n        this.sourceProperties = config.sourceProperties;\r\n        this.triggerProperties = config.triggerProperties;\r\n        this.target = config.target.delegatedIn || config.target;\r\n        this.targetProperty = config.targetProperty;\r\n        this.formatter = config.formatter;\r\n        this.sourceReaders = {};\r\n        this.targetReader = undefined;\r\n        this.targetWriter = undefined;\r\n        this.observers = [];\r\n        this.options = config.options;\r\n        this.getCallerLine = config.callerLineProvider;\r\n\r\n        this.registerReadersAndWriters();\r\n\r\n        if (this.options.auto) {\r\n            if (this.options.executeAtStartup) {\r\n                this.transferValue();\r\n            }\r\n            this.bind();\r\n        }\r\n\r\n        config.addBinding(this);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Binding\r\n     * @private\r\n     * @param object\r\n     * @param properties\r\n     * @return {*}\r\n     */\r\n    Binding.prototype.getFormattedValues = function (object, properties) {\r\n        var values = [],\r\n            sourceReader,\r\n            sourceReaders = this.sourceReaders,\r\n            formatter = this.formatter;\r\n\r\n\r\n        forEach(properties, function (property) {\r\n            sourceReader = sourceReaders[property];\r\n            values.push(sourceReader(object, property));\r\n        });\r\n\r\n        if (formatter && (typeof formatter === \"function\")) {\r\n            return formatter.apply(null, values);\r\n        } else if (values.length === 1) {\r\n            return values[0];\r\n        } else {\r\n            throw new Error(\"You must use formatter if you want to bind more properties than one. Ex: izi.bind().valueOf(model, 'firstName', 'lastName').through(concatFormatter)...\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * @param sourceValue\r\n     */\r\n    Binding.prototype.debugBinding = function (sourceValue) {\r\n        var callerLine;\r\n\r\n        if (this.options.debug) {\r\n            callerLine = trim(this.getCallerLine());\r\n            log('[BINDING] ' + callerLine, {\r\n                source: this.source,\r\n                sourceProperties: this.sourceProperties,\r\n                target: this.target,\r\n                targetProperty: this.targetProperty,\r\n                triggerProperties: this.triggerProperties,\r\n                value: sourceValue\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Binding\r\n     * @private\r\n     */\r\n    Binding.prototype.transferValue = function () {\r\n        var source = this.source,\r\n            sourceProperties = this.sourceProperties,\r\n            sourceValue = this.getFormattedValues(source, sourceProperties),\r\n            targetReader = this.targetReader,\r\n            targetWriter = this.targetWriter,\r\n            target = this.target,\r\n            targetProperty = this.targetProperty,\r\n            targetValue;\r\n\r\n        try {\r\n            targetValue = targetReader(target, targetProperty);\r\n        } catch (error) {\r\n            targetValue = INVALID_VALUE;\r\n        }\r\n\r\n        if (sourceValue !== targetValue) {\r\n            this.debugBinding(sourceValue);\r\n            targetWriter(target, targetProperty, sourceValue);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Binding\r\n     * @private\r\n     * @param source\r\n     * @param sourceProperty\r\n     * @param target\r\n     * @param targetProperty\r\n     * @param transferValueFn\r\n     * @return {*}\r\n     */\r\n    Binding.prototype.getChangeObserver = function (source, sourceProperty, target, targetProperty, transferValueFn) {\r\n        var impl = this.impl;\r\n\r\n        try {\r\n            return findClosure(impl.changeObservers, [source, sourceProperty, target, targetProperty, transferValueFn], this);\r\n        } catch (error) {\r\n            if (!this.options.allowNotWatchable) {\r\n                throw new Error(\"Could not find change observer for: \" + source + \" and property: \" + sourceProperty);\r\n            }\r\n\r\n            if (module.isDebug) {\r\n                log(\"[BINDING] Could not find change observer for:\", source, \"and property:\", sourceProperty);\r\n            }\r\n\r\n            return function notWatchableObserver() {\r\n                return function doNothing() {\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Binding\r\n     * @private\r\n     */\r\n    Binding.prototype.registerReadersAndWriters = function () {\r\n        var source = this.source,\r\n            target = this.target,\r\n            targetProperty = this.targetProperty,\r\n            sourceProperties = this.sourceProperties,\r\n            sourceReaders = this.sourceReaders,\r\n            valueReaders = this.impl.valueReaders,\r\n            valueWriters = this.impl.valueWriters,\r\n            me = this;\r\n\r\n        forEach(sourceProperties, function (sourceProperty) {\r\n            try {\r\n                sourceReaders[sourceProperty] = findClosure(valueReaders, [source, sourceProperty, \"sourceReader\"], this);\r\n            } catch (e) {\r\n                throw new Error(\"Could not find reader function for: \" + source + \" using property: \" + sourceProperty);\r\n            }\r\n        });\r\n\r\n        try {\r\n            this.targetReader = findClosure(valueReaders, [target, targetProperty, \"targetReader\"], this);\r\n        } catch (e) {\r\n            this.targetReader = function () {\r\n                return INVALID_VALUE;\r\n            }\r\n        }\r\n\r\n        try {\r\n            this.targetWriter = findClosure(valueWriters, [target, targetProperty], this);\r\n        } catch (e) {\r\n            throw new Error(\"Could not find writer function for: \" + target + \" using property: \" + targetProperty);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Bind target to source (start listening for source changes). When you use <code>izi.bind()</code> this is called\r\n     * automatically. You should call it only when you use <code>izi.bind({auto:false})</code> option.\r\n     * This method doesn't transfer value from source to target - {@link Izi.binding.Binding#execute} does it.\r\n     * @member Izi.binding.Binding\r\n     * @since 1.1.0\r\n     */\r\n    Binding.prototype.bind = function () {\r\n        var sourceProperties = this.sourceProperties,\r\n            triggerProperties = this.triggerProperties,\r\n            source = this.source,\r\n            target = this.target,\r\n            targetProperty = this.targetProperty,\r\n            allTriggerProperties = triggerProperties.concat(sourceProperties),\r\n            observers = this.observers,\r\n            transferValueFn = curry(this.transferValue, this),\r\n            me = this;\r\n\r\n        forEach(allTriggerProperties, function (sourceProperty) {\r\n            var changeObserver = me.getChangeObserver(source, sourceProperty, target, targetProperty, transferValueFn);\r\n            observers.push(changeObserver(source, sourceProperty, target, targetProperty, transferValueFn));\r\n        });\r\n\r\n        this.reverseBinding && this.reverseBinding.bind();\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Binding\r\n     * @deprecated 1.1.0 Use {@link Izi.binding.Binding#unbind} instead.\r\n     * @return {void}\r\n     */\r\n    Binding.prototype.stopObserving = function () {\r\n        this.unbind();\r\n    };\r\n\r\n    /**\r\n     * Unbind target from source (stop listening for source changes).\r\n     * @member Izi.binding.Binding\r\n     * @since 1.1.0\r\n     */\r\n    Binding.prototype.unbind = function () {\r\n        forEach(this.observers, function (observer) {\r\n            observer();\r\n        });\r\n\r\n        this.reverseBinding && this.reverseBinding.unbind()\r\n    };\r\n\r\n    /**\r\n     * Creates two way binding between source and target. There are following limitations for using this feature:\r\n     *\r\n     *  * source property must be only one\r\n     *  * `through()` function can't be defined\r\n     *  * target can't be a function\r\n     *\r\n     * @member Izi.binding.Binding\r\n     * @since 1.5.0\r\n     * @returns {*}\r\n     */\r\n    Binding.prototype.twoWay = function () {\r\n        if (this.formatter) {\r\n            throw new Error(\"Two way binding doesn't allow to use .through(fn) function\");\r\n        }\r\n\r\n        if (module.utils.typeOf(this.target) === \"Function\") {\r\n            throw new Error(\"Two way binding doesn't allow to use function as a target\");\r\n        }\r\n\r\n        var reverseConfig = new module.binding.Config(this.impl)\r\n            .withOptions(this.options)\r\n            .withSource(this.target)\r\n            .withSourceProperties(this.targetProperty)\r\n            .withTarget(this.source)\r\n            .withTargetProperty(this.sourceProperties[0])\r\n            .withCallerLineProvider(this.getCallerLine);\r\n\r\n        this.reverseBinding = new module.binding.Binding(reverseConfig);\r\n        this.twoWay = onlyOnceError;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Execute binding (transfer value from source to target). In case of two way binding it will be triggered\r\n     * just binging from source to target.\r\n     * @member Izi.binding.Binding\r\n     * @since 1.1.0\r\n     */\r\n    Binding.prototype.execute = function () {\r\n        this.transferValue();\r\n    };\r\n\r\n    module.binding.Binding = Binding;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires Binding.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * After `izi.bind().valueOf(widget)...` fluent API\r\n     * @class Izi.binding.ValueOf\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.binding.Config} config\r\n     */\r\n    var ValueOf = function Izi_binding_ValueOf(config) {\r\n        this.config = config;\r\n    };\r\n\r\n    /**\r\n     * Binding target setup.\r\n     * You can pass directly target instance or object containing target on <strong>delegatedIn</strong> property.\r\n     * \r\n     *     var label = new Label();\r\n     *     var wrapper = {\r\n     *         delegatedIn: label\r\n     *     }\r\n     *     izi.bind().valueOf(model).to(label, \"text\");\r\n     *\r\n     *     //will work also for:\r\n     *     izi.bind().valueOf(model).to(wrapper, \"text\");\r\n     * \r\n     * You can skip both parameters in order to more elegant notation:\r\n     * \r\n     *     izi.bind().valueOf(model).to().textOf(label);\r\n     * \r\n     *\r\n     * As a target you can also use a function with given scope:\r\n     *\r\n     *     var scope = {\r\n     *         firstName: null,\r\n     *\r\n     *         firstNameChangeHandler: function (value) {\r\n     *             this.firstName = value;\r\n     *         }\r\n     *     }\r\n     *\r\n     *     izi.bind().valueOf(model, \"firstName\").to(scope.firstNameChangeHandler, scope);\r\n     *     model.firstName(\"John\");\r\n     *\r\n     * You can also skip the scope:\r\n     *\r\n     *     function firstNameChangeHandler(value) {\r\n     *         console.log(value); // \"John\"\r\n     *     }\r\n     *\r\n     *     izi.bind().valueOf(model, \"firstName\").to(firstNameChangeHandler);\r\n     *     model.firstName(\"John\");\r\n     *\r\n     * @member Izi.binding.ValueOf\r\n     * @sanity izi.sanityOf(\"to()\").args().args(izi.arg(\"targetFunction\").ofFunction()).args(izi.arg(\"targetFunction\").ofFunction(), izi.arg(\"scope\").ofObject()).args(izi.arg(\"target\").ofObject(), izi.arg(\"targetProperty\").ofString()).args(izi.arg(\"target\").ofObject().havingProperty(\"delegatedIn\"), izi.arg(\"targetProperty\").ofString()).check(arguments);\r\n     * @param {Object/Function} [target] Model or widget or Function\r\n     * @param {String/Object} [targetProperty] Target property name or Function scope\r\n     * @return {Izi.binding.Binding|Izi.binding.ValueOf} `.to()` returns Izi.binding.ValueOf, `.to(target, \"property\")` returns Izi.binding.Binding\r\n     */\r\n    ValueOf.prototype.to = function (target, targetProperty) {\r\n        if (arguments.length === 0) {\r\n            return this;\r\n        } else {\r\n            return new module.binding.Binding(this.config.withTarget(target).withTargetProperty(targetProperty));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Binding target setup for 'value' property.\r\n     *\r\n     * @member Izi.binding.ValueOf\r\n     * @sanity izi.sanityOf(\"valueOf()\").args(izi.arg(\"target\").ofObject()).args(izi.arg(\"target\").ofObject().havingProperty(\"delegatedIn\")).check(arguments);\r\n     * @param {Object} target\r\n     * @return {Izi.binding.Binding}\r\n     */\r\n    ValueOf.prototype.valueOf = function (target) {\r\n        return this.to(target, \"value\");\r\n    };\r\n\r\n    /**\r\n     * Binding target setup for 'text' property.\r\n     *\r\n     * @member Izi.binding.ValueOf\r\n     * @sanity izi.sanityOf(\"textOf()\").args(izi.arg(\"target\").ofObject()).args(izi.arg(\"target\").ofObject().havingProperty(\"delegatedIn\")).check(arguments);\r\n     * @param {Object} target\r\n     * @return {Izi.binding.Binding}\r\n     */\r\n    ValueOf.prototype.textOf = function (target) {\r\n        return this.to(target, \"text\");\r\n    };\r\n\r\n    /**\r\n     * Binding target setup for 'selectedItems' property.\r\n     *\r\n     * @member Izi.binding.ValueOf\r\n     * @sanity izi.sanityOf(\"selectedItemsOf()\").args(izi.arg(\"target\").ofObject()).args(izi.arg(\"target\").ofObject().havingProperty(\"delegatedIn\")).check(arguments);\r\n     * @param {Object} target\r\n     * @return {Izi.binding.Binding}\r\n     */\r\n    ValueOf.prototype.selectedItemsOf = function (target) {\r\n        return this.to(target, \"selectedItems\");\r\n    };\r\n\r\n    /**\r\n     * Formatter function which is used before set value on target.\r\n     * If you specified more than one source properties - you must also specify formatter function.\r\n     * \r\n     *     var fullNameFormatter = function (firstName, lastName) {\r\n     *         return firstName + ' ' + lastName;\r\n     *     }\r\n     *     izi.bind().valueOf(model, 'firstName', 'lastName').through(fullNameFormatter)\r\n     * \r\n     *\r\n     * @member Izi.binding.ValueOf\r\n     * @param {Function} formatter Function that combines all source values to one value\r\n     * @return {Izi.binding.ValueOf}\r\n     */\r\n    ValueOf.prototype.through = function (formatter) {\r\n        this.config.withFormatter(formatter);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Additional source property which change will trigger binding execution.\r\n     * \r\n     *     var label = new Label();\r\n     *     var model = new User();\r\n     *     model.getFullName = function () {\r\n     *       return this.get(\"firstName\") + ' ' + this.get(\"lastName\");\r\n     *     }\r\n     *\r\n     *     izi.bind().valueOf(model, \"fullName\")\r\n     *               .onChangeOf(\"firstName\")\r\n     *               .onChangeOf(\"lastName\")\r\n     *               .to().textOf(label);\r\n     * \r\n     *\r\n     * @member Izi.binding.ValueOf\r\n     * @param {String} property Model property that triggers binding execution\r\n     * @return {Izi.binding.ValueOf}\r\n     */\r\n    ValueOf.prototype.onChangeOf = function (property) {\r\n        this.config.addTriggerProperty(property);\r\n        return this;\r\n    };\r\n\r\n    module.binding.ValueOf = ValueOf;\r\n\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Number} stackOffset\r\n     * @return {Function}\r\n     */\r\n    module.utils.getCallerLineProvider = function (stackOffset) {\r\n        if (!module.isDebug) {\r\n            return function () {\r\n                return \"Line numbers are available only in debug version of izi-js\";\r\n            }\r\n        }\r\n        var error = Error();\r\n\r\n        return function getCallerLine() {\r\n            if (error.stack) {\r\n                // WebKit / FireFox / Opera\r\n                var callStack = error.stack.split(\"\\n\");\r\n                var index = navigator.userAgent.indexOf(\"WebKit\") > -1\r\n                    ? 3 + stackOffset // Chrome\r\n                    : 1 + stackOffset; // Firefox and Opera\r\n                return callStack[index];\r\n            } else {\r\n                // IE\r\n                return \" [IE doesn't provide line number in call stack]\";\r\n            }\r\n        }\r\n    }\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ValueOf.js\r\n * @requires Config.js\r\n * @requires ../utils/getCallerLineProvider.js\r\n * @requires ../utils/forEach.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * After `izi.bind()...` fluent API\r\n     * @class Izi.binding.Bind\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.binding.Config} config\r\n     */\r\n    var Bind = function Izi_binding_Bind(config) {\r\n        this.config = config;\r\n    };\r\n\r\n    /**\r\n     * @param source\r\n     * @param sourceProperty\r\n     * @return {Izi.binding.ValueOf}\r\n     * @private\r\n     */\r\n    Bind.prototype._valueOf = function (source, sourceProperty) {\r\n\r\n        if (arguments.length > 2) {\r\n            sourceProperty = Array.prototype.slice.call(arguments, 1);\r\n        }\r\n        var config = this.cloneConfig()\r\n            .withSource(source)\r\n            .withSourceProperties(sourceProperty || \"value\")\r\n            .withCallerLineProvider(module.utils.getCallerLineProvider(2));\r\n\r\n        return new module.binding.ValueOf(config);\r\n    };\r\n\r\n    /**\r\n     * Binding source setup.\r\n     *\r\n     * You can pass directly source instance or object containing source on <strong>delegatedIn</strong> property.\r\n     *\r\n     *     var model = new User();\r\n     *     var wrapper = {\r\n     *         delegatedIn: model\r\n     *     }\r\n     *     izi.bind().valueOf(model, 'firstName');\r\n     *\r\n     *     // will work also for:\r\n     *     izi.bind().valueOf(wrapper, 'firstName');\r\n     *\r\n     * You can also specify more than one property:\r\n     *\r\n     *     izi.bind().valueOf(model, 'firstName', 'lastName', 'title');\r\n     *\r\n     *\r\n     * @sanity izi.sanityOf(\"valueOf()\").args(izi.arg(\"source\").ofObject()).args(izi.arg(\"source\").ofObject().havingProperty(\"delegatedIn\")).args(izi.arg(\"source\").ofObject(), izi.varargOf(izi.arg(\"sourceProperty\").ofString())).args(izi.arg(\"source\").ofObject().havingProperty(\"delegatedIn\"), izi.varargOf(izi.arg(\"sourceProperty\").ofString())).check(arguments);\r\n     * @member Izi.binding.Bind\r\n     * @param {*} source Model or widget\r\n     * @param {String...} [sourceProperty=\"value\"] Property name or properties names\r\n     * @return {Izi.binding.ValueOf}\r\n     */\r\n    Bind.prototype.valueOf = function (source, sourceProperty) {\r\n        return this._valueOf.apply(this, arguments);\r\n    };\r\n\r\n    /**\r\n     * Binding source setup for selected items of lists, grids, etc.\r\n     * This is an alias to `this.valueOf(source, \"selectedItems\")`\r\n     * You can pass directly model instance or object containing model on <strong>delegatedIn</strong> property.\r\n     *\r\n     *     var dataGrid = new DataGrid();\r\n     *     var wrapper = {\r\n     *         delegatedIn: dataGrid\r\n     *     }\r\n     *     izi.bind().selectedItemsOf(dataGrid);\r\n     *\r\n     *     // will work also for:\r\n     *     izi.bind().selectedItemsOf(wrapper);\r\n     *\r\n     * @member Izi.binding.Bind\r\n     * @sanity izi.sanityOf(\"selectedItemsOf()\").args(izi.arg(\"source\").ofObject()).args(izi.arg(\"source\").ofObject().havingProperty(\"delegatedIn\")).check(arguments);\r\n     * @param {*} source Grid, list or any other 'selectedItems' holder\r\n     * @return {Izi.binding.ValueOf}\r\n     */\r\n    Bind.prototype.selectedItemsOf = function (source) {\r\n        return this._valueOf(source, \"selectedItems\");\r\n    };\r\n\r\n    /**\r\n     * @member Izi.binding.Bind\r\n     * @private\r\n     * @return {Izi.binding.Config}\r\n     */\r\n    Bind.prototype.cloneConfig = function () {\r\n        return new module.binding.Config(this.config.impl)\r\n            .withBindings(this.config.bindings)\r\n            .withOptions(this.config.options);\r\n    };\r\n\r\n    /**\r\n     * Unbind all registered bindings created by one `izi.bind()` instance.\r\n     *\r\n     *     var model = new User();\r\n     *     var firstNameEditor, lastNameEditor;\r\n     *\r\n     *     var bind = izi.bind();\r\n     *\r\n     *     bind.valueOf(model, \"firstName\").to().valueOf(firstNameEditor);\r\n     *     bind.valueOf(model, \"lastName\").to().valueOf(lastNameEditor);\r\n     *\r\n     *     bind.unbindAll(); // will stop listening for changes of both properties (firstName and lastName)\r\n     *\r\n     * @since 1.1.0\r\n     * @member Izi.binding.Bind\r\n     */\r\n    Bind.prototype.unbindAll = function () {\r\n        module.utils.forEach(this.config.bindings, function (binding) {\r\n            binding.unbind();\r\n        })\r\n    };\r\n\r\n    /**\r\n     * Execute manually all registered bindings created by one `izi.bind({auto: false})` instance.\r\n     *\r\n     *     var model = new User();\r\n     *     var firstNameEditor, lastNameEditor;\r\n     *\r\n     *     var bind = izi.bind();\r\n     *\r\n     *     bind.valueOf(model, \"firstName\").to().valueOf(firstNameEditor);\r\n     *     bind.valueOf(model, \"lastName\").to().valueOf(lastNameEditor);\r\n     *\r\n     *     bind.executeAll(); // will execute bindings for both properties (firstName and lastName)\r\n     *\r\n     * @since 1.1.0\r\n     * @member Izi.binding.Bind\r\n     */\r\n    Bind.prototype.executeAll = function () {\r\n        module.utils.forEach(this.config.bindings, function (binding) {\r\n            binding.execute();\r\n        })\r\n    };\r\n\r\n    module.binding.Bind = Bind;\r\n\r\n}(Izi);\r\n!function (module) {\r\n    module.binding.impl.createObserver = function (matcher, observer) {\r\n        return function () {\r\n            return matcher.apply(this, arguments) ? observer : null;\r\n        }\r\n    };\r\n}(Izi);\r\n\r\n/**\r\n * @ignore\r\n * @requires createObserver.js\r\n */\r\n!function(module) {\r\n\r\n    function matcher(source, sourceProperty, target, targetProperty, transferValueFn) {\r\n        return source.iziObserveProperty;\r\n    }\r\n\r\n    function observer(source, sourceProperty, target, targetProperty, transferValueFn) {\r\n        return source.iziObserveProperty(sourceProperty, transferValueFn);\r\n    }\r\n\r\n    module.binding.impl.customPropertyObserver = module.binding.impl.createObserver(matcher, observer);\r\n}(Izi);\r\n!function (module) {\r\n    module.binding.impl.createReader = function (matcher, reader) {\r\n        return function () {\r\n            return matcher.apply(this, arguments) ? reader : null;\r\n        }\r\n    };\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {String} text\r\n     * @return {String}\r\n     */\r\n    module.utils.capitalize = function (text) {\r\n        return text.charAt(0).toUpperCase() + text.substr(1);\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires capitalize.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @since 1.5.0\r\n     * @private\r\n     * @param {String} name\r\n     * @return {String}\r\n     */\r\n    module.utils.getterOf = function (name) {\r\n        return \"get\" + module.utils.capitalize(name);\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires createReader.js\r\n * @requires ../../utils/getterOf.js\r\n * @requires ../../utils/typeOf.js\r\n * @requires ../../utils/hasOwnProperty.js\r\n */\r\n!function (module) {\r\n\r\n    module.binding.impl.readByGet = function () {\r\n\r\n        function matcher(object, property) {\r\n            return (typeof object.get) === \"function\";\r\n        }\r\n\r\n        function reader(object, property) {\r\n            return object.get(property);\r\n        }\r\n\r\n        return module.binding.impl.createReader(matcher, reader);\r\n    }();\r\n\r\n    module.binding.impl.readByCapitalizedGetter = function () {\r\n\r\n        function reader(object, property) {\r\n            return object[module.utils.getterOf(property)]();\r\n        }\r\n\r\n        function matcher(object, property) {\r\n            return module.utils.typeOf(property) === \"String\" &&  (typeof object[module.utils.getterOf(property)]) === \"function\";\r\n        }\r\n\r\n        return module.binding.impl.createReader(matcher, reader);\r\n    }();\r\n\r\n    module.binding.impl.readByFunction = function () {\r\n\r\n        function reader(object, property) {\r\n            return object[property]();\r\n        }\r\n\r\n        function matcher(object, property) {\r\n            return (typeof object[property] === 'function');\r\n        }\r\n\r\n        return module.binding.impl.createReader(matcher, reader);\r\n    }();\r\n\r\n    module.binding.impl.readFromProperty = function () {\r\n\r\n        function reader(object, property) {\r\n            return object[property];\r\n        }\r\n\r\n        function matcher(object, property) {\r\n            return true;\r\n        }\r\n\r\n        return module.binding.impl.createReader(matcher, reader);\r\n    }();\r\n\r\n    module.binding.impl.readFromOwnedProperty = function () {\r\n\r\n        function reader(object, property) {\r\n            return object[property];\r\n        }\r\n\r\n        function matcher(object, property) {\r\n            return module.utils.hasOwnProperty(object, property);\r\n        }\r\n\r\n        return module.binding.impl.createReader(matcher, reader);\r\n    }();\r\n    \r\n}(Izi);\r\n!function(module) {\r\n    module.binding.impl.createWriter = function (matcher, writer) {\r\n        return function () {\r\n            return matcher.apply(this, arguments) ? writer : null;\r\n        }\r\n    };\r\n}(Izi);\r\n\r\n/**\r\n * @ignore\r\n * @requires createWriter.js\r\n * @requires ../../utils/capitalize.js\r\n * @requires ../../utils/typeOf.js\r\n * @requires ../../utils/hasOwnProperty.js\r\n */\r\n!function(module){\r\n\r\n    module.binding.impl.writeBySet = function () {\r\n\r\n        function matcher(object, property) {\r\n            return (typeof object.set) === \"function\";\r\n        }\r\n\r\n        function writer(object, property, value) {\r\n            object.set(property, value);\r\n        }\r\n\r\n        return module.binding.impl.createWriter(matcher, writer);\r\n    }();\r\n\r\n    module.binding.impl.writeByCapitalizedSetter = function () {\r\n\r\n        var capitalize = module.utils.capitalize;\r\n\r\n        function matcher(object, property) {\r\n            return module.utils.typeOf(property) === \"String\" &&  (typeof object[\"set\" + capitalize(property)]) === \"function\";\r\n        }\r\n\r\n        function writer(object, property, value) {\r\n            object[\"set\" + capitalize(property)](value);\r\n        }\r\n\r\n        return module.binding.impl.createWriter(matcher, writer);\r\n    }();\r\n\r\n    module.binding.impl.writeToProperty = function () {\r\n\r\n        function matcher(object, property) {\r\n            return true;\r\n        }\r\n\r\n        function writer(object, property, value) {\r\n            object[property] = value;\r\n        }\r\n\r\n        return module.binding.impl.createWriter(matcher, writer);\r\n    }();\r\n\r\n    module.binding.impl.writeToOwnedProperty = function () {\r\n\r\n        function matcher(object, property) {\r\n            return module.utils.hasOwnProperty(object, property);\r\n        }\r\n\r\n        function writer(object, property, value) {\r\n            object[property] = value;\r\n        }\r\n\r\n        return module.binding.impl.createWriter(matcher, writer);\r\n    }();\r\n\r\n    module.binding.impl.writeByFunction = function () {\r\n\r\n        function matcher(object, property) {\r\n            return module.utils.typeOf(object) === 'Function';\r\n        }\r\n\r\n        function writer(fn, scope, value) {\r\n            fn.call(scope, value);\r\n        }\r\n\r\n        return module.binding.impl.createWriter(matcher, writer);\r\n    }();\r\n\r\n    module.binding.impl.writeToFunction = function () {\r\n\r\n        function matcher(object, property) {\r\n            return module.utils.typeOf(object[property]) === 'Function';\r\n        }\r\n\r\n        function writer(object, property, value) {\r\n            object[property](value);\r\n        }\r\n\r\n        return module.binding.impl.createWriter(matcher, writer);\r\n    }();\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../../../utils/typeOf.js\r\n */\r\n!function (module) {\r\n\r\n    module.binding.impl.nested.isNestedProperty = function Izi_binding_impl_nested_isNestedProperty(property) {\r\n        return module.utils.typeOf(property) === \"String\" && property.indexOf(\".\") > -1\r\n    }\r\n}(Izi);\r\n\r\n/**\r\n * @ignore\r\n * @requires isNestedProperty.js\r\n * @requires ../createObserver.js\r\n * @requires ../../../utils/curry.js\r\n */\r\n!function (module) {\r\n\r\n    function matcher(source, sourceProperty, target, targetProperty, transferValueFn) {\r\n        return module.binding.impl.nested.isNestedProperty(sourceProperty);\r\n    }\r\n\r\n    function observer(source, sourceProperty, target, targetProperty, transferValueFn) {\r\n\r\n        var nestedWatcher = source.iziNestedWatchers[sourceProperty];\r\n        nestedWatcher.onValueChanged(transferValueFn);\r\n\r\n        return module.utils.curry(nestedWatcher.stopObserving, nestedWatcher);\r\n    }\r\n\r\n    module.binding.impl.nested.nestedObserver = module.binding.impl.createObserver(matcher, observer);\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../../../utils/findClosure.js\r\n */\r\n!function (module) {\r\n\r\n    var TargetFinder = function Izi_binding_impl_nested_TargetFinder(path, readers) {\r\n        this.path = path.split(\".\");\r\n        this.path.pop();\r\n        this.readers = readers;\r\n    };\r\n\r\n    TargetFinder.prototype.findFor = function (object) {\r\n        var currentObject = object;\r\n        for (var i = 0; i < this.path.length; i++) {\r\n            var property = this.path[i];\r\n\r\n            try {\r\n                var reader = module.utils.findClosure(this.readers, [currentObject, property, \"targetReader\"]);\r\n                currentObject = reader(currentObject, property);\r\n                if (!currentObject) {\r\n                    break;\r\n                }\r\n            } catch (e) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (i === this.path.length) {\r\n            return currentObject;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    };\r\n\r\n    module.binding.impl.nested.TargetFinder = TargetFinder;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../../../utils/findClosure\r\n */\r\n!function (module){\r\n\r\n    var TargetWriter = function Izi_binding_impl_nested_TargetWriter(path, writers) {\r\n        this.property = path.split(\".\").pop();\r\n        this.writers = writers;\r\n    };\r\n\r\n    TargetWriter.prototype.writeValue = function (object, value) {\r\n        try {\r\n            var writer = module.utils.findClosure(this.writers, [object, this.property, value]);\r\n            writer(object, this.property, value);\r\n        } catch (e) {\r\n        }\r\n    };\r\n\r\n    module.binding.impl.nested.TargetWriter = TargetWriter;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires isNestedProperty.js\r\n * @requires TargetFinder.js\r\n * @requires TargetWriter.js\r\n * @requires ../../../utils/log.js\r\n */\r\n!function (module) {\r\n\r\n    module.binding.impl.nested.nestedWriter = function () {\r\n        var impl = this.impl, targetFinder, targetWriter;\r\n\r\n        function matcher(object, property) {\r\n            var result = module.binding.impl.nested.isNestedProperty(property);\r\n            if (result) {\r\n                targetFinder = new module.binding.impl.nested.TargetFinder(property, impl.valueReaders);\r\n                targetWriter = new module.binding.impl.nested.TargetWriter(property, impl.valueWriters);\r\n\r\n                if (module.isDebug && property.split(\".\").length > 3) {\r\n                    module.utils.log(\"[BINDING]\" + this.getCallerLine() + \" Binding target path \\\"\" + property +\"\\\" has more than 3 parts. Consider using .to(function(value) { target.x.y.x = value; }) instead.\");\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function writer(object, property, value) {\r\n            var target = targetFinder.findFor(object);\r\n\r\n            if (target) {\r\n                targetWriter.writeValue(target, value);\r\n            }\r\n        }\r\n\r\n        return matcher.apply(this, arguments) ? writer : null;\r\n    }\r\n\r\n}(Izi);\r\n!function (module) {\r\n    module.utils.inherit = function (Child, Parent) {\r\n        var Proxy = function () {\r\n        };\r\n        Proxy.prototype = Parent.prototype;\r\n        Child.prototype = new Proxy();\r\n        Child.upper = Parent.prototype;\r\n        Child.prototype.constructor = Child;\r\n    };\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Array} array\r\n     * @param {Function} item\r\n     * @param {Object} scope\r\n     */\r\n    module.utils.every = (function () {\r\n\r\n        function byEvery(array, fn, scope) {\r\n            return Array.prototype.every.call(array, fn, scope);\r\n        }\r\n\r\n        function byLoop(array, fn, scope) {\r\n\r\n            var len = array.length >>> 0;\r\n\r\n            for (var i = 0; i < len; i++) {\r\n                if (i in array && !fn.call(scope, array[i], i, array))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function hasEvery() {\r\n            return (typeof Array.prototype.every) === 'function';\r\n        }\r\n\r\n        return hasEvery() ? byEvery : byLoop;\r\n    }());\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/forEach.js\r\n * @requires ../utils/every.js\r\n * @requires ../utils/removeItem.js\r\n */\r\n!function (module) {\r\n\r\n    var forEach = module.utils.forEach,\r\n        every = module.utils.every;\r\n\r\n    var Observable = function Izi_model_Observable() {\r\n        this.listeners = {};\r\n    };\r\n\r\n    Observable.prototype = {\r\n\r\n        constructor: Observable,\r\n\r\n        /**\r\n         * @member Izi.model.Observable\r\n         * @noSanity\r\n         * @param {String} type\r\n         * @return {Object[]} array of objects containing fields: 'fn' and 'scope'\r\n         */\r\n        findListeners: function (type) {\r\n\r\n            if (this.listeners[type] === undefined) {\r\n                this.listeners[type] = [];\r\n            }\r\n\r\n            return this.listeners[type];\r\n        },\r\n\r\n        /**\r\n         * @member Izi.model.Observable\r\n         * @noSanity\r\n         * @param {String} type\r\n         * @param {Array|Arguments} [args]\r\n         */\r\n        dispatchEvent: function (type, args) {\r\n            var me = this;\r\n            forEach(this.findListeners(type), function (listener) {\r\n                listener.fn.apply(listener.scope || me, args || []);\r\n            })\r\n        },\r\n\r\n        /**\r\n         * @member Izi.model.Observable\r\n         * @noSanity\r\n         * @param {String} type\r\n         * @param {Function} fn\r\n         * @param {Object} [scope]\r\n         */\r\n        addListener: function (type, fn, scope) {\r\n            this.findListeners(type).push({fn: fn, scope: scope});\r\n        },\r\n\r\n        /**\r\n         * @member Izi.model.Observable\r\n         * @noSanity\r\n         * @param {String} type\r\n         * @param {Function} fn\r\n         */\r\n        removeListener: function (type, fn) {\r\n            var listeners = this.findListeners(type),\r\n                listenerToRemove;\r\n\r\n\r\n            every(listeners, function (listener) {\r\n                if (listener.fn === fn) {\r\n                    listenerToRemove = listener;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (listenerToRemove) {\r\n                module.utils.removeItem(listeners, listenerToRemove);\r\n            }\r\n        }\r\n    };\r\n\r\n    module.model.Observable = Observable;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../../Binding.js\r\n * @requires ../../Config.js\r\n * @requires ../../../utils/inherit.js\r\n * @requires ../../../model/Observable.js\r\n */\r\n!function (module) {\r\n\r\n    function extractFirstField(field) {\r\n        if (field.indexOf(\".\") === -1) {\r\n            return field;\r\n        }\r\n        return field.substr(0, field.indexOf(\".\"));\r\n    }\r\n\r\n    function extractNextFields(field) {\r\n        if (field.indexOf(\".\") === -1) {\r\n            return undefined;\r\n        }\r\n\r\n        return field.substr(field.indexOf(\".\") + 1);\r\n    }\r\n\r\n    var NestedWatcher = function Izi_binding_impl_NestedWatcher(path, bindingImpl) {\r\n        this.path = path;\r\n        this.bindingImpl = bindingImpl;\r\n        this.sourceProperty = extractFirstField(path);\r\n\r\n        var nextFields = extractNextFields(path);\r\n        if (nextFields) {\r\n            this.child = new NestedWatcher(nextFields, this.bindingImpl);\r\n            this.child.onValueChanged(this.fireChange, this);\r\n        }\r\n\r\n        NestedWatcher.upper.constructor.apply(this);\r\n    };\r\n\r\n    module.utils.inherit(NestedWatcher, module.model.Observable);\r\n\r\n\r\n    NestedWatcher.prototype.setSource = function (source) {\r\n        this.stopObserving();\r\n        this.source = source;\r\n        this.startObserving();\r\n    };\r\n\r\n    NestedWatcher.prototype.onValueChanged = function (callback, scope) {\r\n        this.addListener(\"valueChanged\", callback, scope);\r\n    };\r\n\r\n    NestedWatcher.prototype.stopObserving = function () {\r\n        if (this.handler) {\r\n            this.handler.unbind();\r\n        }\r\n\r\n        if (this.child) {\r\n            this.child.stopObserving();\r\n        }\r\n    };\r\n\r\n    NestedWatcher.prototype.startObserving = function () {\r\n        if (this.source) {\r\n            var config = new module.binding.Config(this.bindingImpl)\r\n                .withOptions({allowNotWatchable: true})\r\n                .withSource(this.source)\r\n                .withSourceProperties(this.sourceProperty)\r\n                .withTarget(this.valueChanged)\r\n                .withTargetProperty(this);\r\n            this.handler = new module.binding.Binding(config);\r\n        } else {\r\n            this.fireChange(undefined);\r\n        }\r\n    };\r\n\r\n    NestedWatcher.prototype.valueChanged = function (value) {\r\n        if (this.child) {\r\n            this.child.setSource(value);\r\n        } else {\r\n            this.fireChange(value);\r\n        }\r\n    };\r\n\r\n    NestedWatcher.prototype.fireChange = function (value) {\r\n        this.dispatchEvent(\"valueChanged\", [value]);\r\n    };\r\n\r\n    module.binding.impl.nested.NestedWatcher = NestedWatcher;\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires NestedWatcher.js\r\n * @requires isNestedProperty.js\r\n * @requires ../createReader.js\r\n */\r\n!function (module) {\r\n\r\n    function watchForCurrentValue(object, property, bindingImpl) {\r\n        var nestedWatcher;\r\n\r\n        if (!object.iziNestedWatchers) {\r\n            object.iziNestedWatchers = {};\r\n        }\r\n\r\n        if (!object.iziNestedWatchers[property]) {\r\n            nestedWatcher = new module.binding.impl.nested.NestedWatcher(property, bindingImpl);\r\n            nestedWatcher.onValueChanged(function (value) {\r\n                this.currentValue = value;\r\n            }, nestedWatcher);\r\n            nestedWatcher.setSource(object);\r\n            object.iziNestedWatchers[property] = nestedWatcher;\r\n        }\r\n    }\r\n\r\n    function matcher(bindingImpl) {\r\n\r\n        return function (object, property, type) {\r\n            var isWatchableNestedProperty = type === \"sourceReader\" && module.binding.impl.nested.isNestedProperty(property);\r\n\r\n            if (isWatchableNestedProperty) {\r\n                watchForCurrentValue(object, property, bindingImpl);\r\n            }\r\n\r\n            return isWatchableNestedProperty;\r\n        }\r\n    }\r\n\r\n    function reader(object, property) {\r\n        return object.iziNestedWatchers[property].currentValue;\r\n    }\r\n\r\n    module.binding.impl.nested.nestedReader = function (bindingImpl) {\r\n        return module.binding.impl.createReader(matcher(bindingImpl), reader);\r\n    };\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires Bind.js\r\n * @requires Config.js\r\n *\r\n * @requires impl/customPropertyObserver.js\r\n * @requires impl/genericValueReaders.js\r\n * @requires impl/genericValueWriters.js\r\n *\r\n * @requires impl/nested/nestedObserver.js\r\n * @requires impl/nested/nestedWriter.js\r\n * @requires impl/nested/nestedReader.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * @member Izi.binding\r\n     * @method\r\n     * @private\r\n     * @param {Object} impl\r\n     */\r\n    module.binding.register = function (impl) {\r\n        var nestedImpl = {};\r\n        nestedImpl.changeObservers = [module.binding.impl.nested.nestedObserver,\r\n                                      module.binding.impl.customPropertyObserver].concat(impl.changeObservers);\r\n        nestedImpl.valueWriters = [module.binding.impl.nested.nestedWriter].concat(impl.valueWriters);\r\n        nestedImpl.valueReaders = [module.binding.impl.nested.nestedReader(nestedImpl)].concat(impl.valueReaders);\r\n\r\n        return function (options) {\r\n            return new module.binding.Bind(new module.binding.Config(nestedImpl).withOptions(options || {}));\r\n        };\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/curry.js\r\n */\r\n!function (module) {\r\n    var curry = module.utils.curry;\r\n\r\n    /**\r\n     * @class Izi.queue.TimeoutGuard\r\n     * @private\r\n     * @constructor\r\n     * @param {Izi.queue.Queue} queue\r\n     */\r\n    var TimeoutGuard = function Izi_queue_TimeoutGuard(queue) {\r\n        this.queue = queue;\r\n        queue.onTaskStarted(this.startCountDown, this);\r\n        queue.onTaskFinished(this.stopCountDown, this);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.TimeoutGuard\r\n     * @private\r\n     * @param event\r\n     */\r\n    TimeoutGuard.prototype.startCountDown = function (event) {\r\n        var timeout = this.queue.timeoutForTask(event.task);\r\n        if (timeout > 0) {\r\n            this.timeoutId = setTimeout(curry(this.timeoutTask, this), timeout);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.TimeoutGuard\r\n     * @private\r\n     */\r\n    TimeoutGuard.prototype.timeoutTask = function () {\r\n        this.queue.currentTaskTimeouted();\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.TimeoutGuard\r\n     * @private\r\n     */\r\n    TimeoutGuard.prototype.stopCountDown = function () {\r\n        clearTimeout(this.timeoutId);\r\n    };\r\n\r\n    module.queue.TimeoutGuard = TimeoutGuard;\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Array} array\r\n     * @param {Function} item\r\n     * @param {Object} scope\r\n     */\r\n    module.utils.some = (function () {\r\n\r\n        function bySome(array, fn, scope) {\r\n            return Array.prototype.some.call(array, fn, scope);\r\n        }\r\n\r\n        function byLoop(array, fn, scope) {\r\n\r\n            var len = array.length >>> 0;\r\n            if (typeof fn != \"function\")\r\n                throw new TypeError();\r\n\r\n            for (var i = 0; i < len; i++) {\r\n                if (i in array && fn.call(scope, array[i], i, array))\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function hasSome() {\r\n            return (typeof Array.prototype.some) === 'function';\r\n        }\r\n\r\n        return hasSome() ? bySome : byLoop;\r\n    }());\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires forEach.js\r\n * @requires some.js\r\n * @requires removeItem.js\r\n */\r\n!function (module) {\r\n\r\n    var Map = function org_izi_utils_Map() {\r\n        this.items = [];\r\n    };\r\n\r\n    Map.prototype.set = function (key, value) {\r\n        this.getItemOrCreate(key).value = value;\r\n    };\r\n\r\n    Map.prototype.get = function (key) {\r\n        var item = this.getItem(key);\r\n        return item ? item.value : undefined;\r\n    };\r\n\r\n    Map.prototype.remove = function (key) {\r\n        var item = this.getItem(key);\r\n        if (item) {\r\n            module.utils.removeItem(this.items, item);\r\n        }\r\n    };\r\n\r\n    Map.prototype.getKeys = function () {\r\n        var keys = [];\r\n        module.utils.forEach(this.items, function (item) {\r\n            keys.push(item.key);\r\n        });\r\n        return keys;\r\n    };\r\n\r\n    Map.prototype.getKeysOf = function (value) {\r\n        var keys = [];\r\n        module.utils.forEach(this.items, function (item) {\r\n            if (item.value === value) {\r\n                keys.push(value);\r\n            }\r\n        });\r\n        return keys;\r\n    };\r\n\r\n    Map.prototype.getValues = function () {\r\n        var values = [];\r\n        module.utils.forEach(this.items, function (item) {\r\n            values.push(item.value);\r\n        });\r\n        return values;\r\n    };\r\n\r\n    Map.prototype.count = function () {\r\n        return this.items.length;\r\n    };\r\n\r\n    Map.prototype.countValues = function (value) {\r\n        var count = 0;\r\n        module.utils.forEach(this.items, function (item) {\r\n            if (item.value === value) {\r\n                count++;\r\n            }\r\n        });\r\n        return count;\r\n    };\r\n\r\n    Map.prototype.getItemOrCreate = function (key) {\r\n        return this.getItem(key) || this.createItem(key);\r\n    };\r\n\r\n    Map.prototype.createItem = function (key) {\r\n        var item = {\r\n            key: key\r\n        };\r\n        this.items.push(item);\r\n        return item;\r\n    };\r\n\r\n    Map.prototype.getItem = function (key) {\r\n        var foundItem = undefined;\r\n        module.utils.some(this.items, function (item) {\r\n            if (item.key === key) {\r\n                foundItem = item;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return foundItem;\r\n    };\r\n\r\n    module.utils.Map = Map;\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../model/Observable.js\r\n * @requires ../utils/inherit.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * @class Izi.queue.SynchronizedFunction\r\n     * @private\r\n     * @param originalFunction\r\n     * @param scope\r\n     */\r\n    var SynchronizedFunction = function Izi_queue_SynchronizedFunction(originalFunction, scope) {\r\n        SynchronizedFunction.upper.constructor.apply(this);\r\n        this.originalFunction = originalFunction;\r\n        this.scope = scope;\r\n        this.logLabel = \"synchronize.onCallback()\";\r\n    };\r\n    module.utils.inherit(SynchronizedFunction, module.model.Observable);\r\n\r\n    /**\r\n     * @member Izi.queue.SynchronizedFunction\r\n     * @private\r\n     * @return {Function}\r\n     */\r\n    SynchronizedFunction.prototype.synchronizedFunction = function () {\r\n        try\r\n        {\r\n            if (this.originalFunction)\r\n                return this.originalFunction.apply(this.scope, arguments);\r\n        }\r\n        finally\r\n        {\r\n            this.dispatchEvent(\"synchronized\", [this]);\r\n        }\r\n    };\r\n\r\n    module.queue.SynchronizedFunction = SynchronizedFunction;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../model/Observable.js\r\n * @requires ../utils/inherit.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * @class Izi.queue.SynchronizedOnEvent\r\n     * @private\r\n     * @constructor\r\n     * @param {izi} iziApi\r\n     * @param {Object} dispatcher\r\n     * @param {Array|Arguments} events\r\n     */\r\n    var SynchronizedOnEvent = function Izi_queue_SynchronizedOnEvent(iziApi, dispatcher, events) {\r\n        SynchronizedOnEvent.upper.constructor.apply(this);\r\n        var perform = iziApi.perform(this.doSynchronized, this);\r\n        this.handler = perform.when.apply(perform, events).on(dispatcher);\r\n        this.logLabel = \"synchronize.onEvent()\";\r\n    };\r\n    module.utils.inherit(SynchronizedOnEvent, module.model.Observable);\r\n\r\n    /**\r\n     * @member Izi.queue.SynchronizedOnEvent\r\n     * @private\r\n     */\r\n    SynchronizedOnEvent.prototype.doSynchronized = function () {\r\n        this.handler.stopObserving();\r\n        this.dispatchEvent(\"synchronized\", [this]);\r\n    };\r\n\r\n    module.queue.SynchronizedOnEvent = SynchronizedOnEvent;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../model/Observable.js\r\n * @requires ../utils/inherit.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * @class Izi.queue.SynchronizedResponder\r\n     * @private\r\n     * @constructor\r\n     * @param {Object} responder\r\n     * @param {String} [resultFunctionName=\"result\"]\r\n     * @param {String} [errorFunctionName=\"error\"]\r\n     */\r\n    var SynchronizedResponder = function Izi_queue_SynchronizedResponder(responder, resultFunctionName, errorFunctionName) {\r\n        SynchronizedResponder.upper.constructor.apply(this);\r\n\r\n        var me = this;\r\n        resultFunctionName = resultFunctionName || \"result\";\r\n        errorFunctionName = errorFunctionName || \"error\";\r\n\r\n        this.synchronizedResponder = {};\r\n        this.synchronizedResponder[resultFunctionName] = function () {\r\n            try {\r\n                responder[resultFunctionName].apply(responder, arguments);\r\n            } finally {\r\n                me.dispatchEvent(\"synchronized\", [me]);\r\n            }\r\n        };\r\n        this.synchronizedResponder[errorFunctionName] = function () {\r\n            try {\r\n                responder[errorFunctionName].apply(responder, arguments);\r\n            } finally {\r\n                me.dispatchEvent(\"synchronized\", [me]);\r\n            }\r\n        };\r\n        this.logLabel = \"synchronize.responder()\";\r\n    };\r\n\r\n    module.utils.inherit(SynchronizedResponder, module.model.Observable);\r\n\r\n    module.queue.SynchronizedResponder = SynchronizedResponder;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/Map.js\r\n * @requires ../utils/curry.js\r\n * @requires ../utils/forEach.js\r\n * @requires SynchronizedFunction.js\r\n * @requires SynchronizedOnEvent.js\r\n * @requires SynchronizedResponder.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * Synchronizer is a utility that allows you to synchronize current task in the easiest way. Instance of this\r\n     * class is available as first argument of `execute()` method when the task is defined as an `Object` or directly\r\n     * as first argument of function, when the task is defined as a `Function`:\r\n     *\r\n     *     var task1 = {\r\n     *             execute: function (synchronize) {\r\n     *                 // synchronize.onCallback(...)\r\n     *                 // synchronize.onEvent(...)\r\n     *                 // synchronize.responder(...)\r\n     *             }\r\n     *         },\r\n     *         task2 = function (synchronize) {\r\n     *             // synchronize.onCallback(...)\r\n     *             // synchronize.onEvent(...)\r\n     *             // synchronize.responder(...)\r\n     *         }\r\n     *     };\r\n     *     izi.queue().execute(task1, task2);\r\n     *\r\n     * When one of:\r\n     *\r\n     *  * {@link Izi.queue.Synchronizer#onCallback synchronize.onCallback}\r\n     *  * {@link Izi.queue.Synchronizer#onEvent synchronize.onEvent}\r\n     *  * {@link Izi.queue.Synchronizer#responder synchronize.responder}\r\n     *\r\n     * is called, it informs the queue that this task calls some asynchronous code, so queue should wait until all asynchronous callbacks\r\n     * return. There may be synchronized more than one asynchronous code - the queue will be waiting for all of them.\r\n     *\r\n     * There is also available access to queue.cancel() method directly in synchronizer:\r\n     *\r\n     *     var task1 = {\r\n     *         execute: function (synchronize) {\r\n     *             // store handler of cancelQueue for later execution\r\n     *             this.cancelQueue = synchronize.cancelQueue;\r\n     *\r\n     *             setTimeout(synchronize.onCallback(this.doOnCallback, this), 1000);\r\n     *         },\r\n     *\r\n     *         doOnCallback: function () {\r\n     *             if (someCondition) {\r\n     *                 this.cancelQueue();\r\n     *             }\r\n     *         }\r\n     *     }\r\n     *\r\n     *\r\n     * @since 1.2.0\r\n     * @class Izi.queue.Synchronizer\r\n     * @constructor\r\n     * @private\r\n     * @param {Izi.queue.Queue} queue\r\n     */\r\n    var Synchronizer = function org_izi_queue_Synchronizer(queue) {\r\n        this.queue = queue;\r\n        this.synchronizations = new module.utils.Map();\r\n        this.awaitedTasks = new module.utils.Map();\r\n\r\n        /**\r\n         * Delegates to queue.cancel()\r\n         * @member Izi.queue.Synchronizer\r\n         */\r\n        this.cancelQueue = function () {\r\n            queue.cancel();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Synchronizes the queue after `nonSynchronized` callback will be called by external caller. This method returns\r\n     * a closure which executes first `nonSynchronized` function and after that notifies the queue to execute next task.\r\n     * If `nonSynchronized` is not given, then queue will just execute next task when callback triggers.\r\n     *\r\n     * Example 1 - just synchronize on callback\r\n     *\r\n     *     var task1 = {\r\n     *         execute: function(synchronize) {\r\n     *             // when setTimeout() callback triggers after 1000ms, then queue will execute `task2`\r\n     *             setTimeout(synchronize.onCallback(), 1000);\r\n     *         }\r\n     *     };\r\n     *\r\n     *     izi.queue().execute(task1, task2);\r\n     *\r\n     * Example 2 - synchronize on callback and execute some extra callback code\r\n     *\r\n     *     var task1 = {\r\n     *         execute: function(synchronize) {\r\n     *             setTimeout(synchronize.onCallback(this.doOnCallback, this), 1000);\r\n     *         }\r\n     *\r\n     *         doOnCallback: function () {\r\n     *             // do some extra code when callback called\r\n     *             // after this code the queue will execute `task2`\r\n     *         }\r\n     *     };\r\n     *\r\n     *     izi.queue().execute(task1, task2);\r\n     *\r\n     * @since 1.2.0\r\n     * @member Izi.queue.Synchronizer\r\n     * @param {Function} [nonSynchronized]\r\n     * @param {Object} [scope]\r\n     * @return {Function}\r\n     */\r\n    Synchronizer.prototype.onCallback = function (nonSynchronized, scope) {\r\n        var task = this.obtainTask(),\r\n            synchronization = new module.queue.SynchronizedFunction(nonSynchronized, scope);\r\n\r\n        this.recordSynchronization(synchronization, task);\r\n\r\n        return module.utils.curry(synchronization.synchronizedFunction, synchronization);\r\n    };\r\n\r\n    /**\r\n     * Synchronizes the queue when dispatcher will fire an event of given type\r\n     *\r\n     * Example - synchronize task when user clicks OK button\r\n     *\r\n     *     var task1 = {\r\n     *         alertPopup: new AlertPopup(),\r\n     *\r\n     *         execute: function(synchronize) {\r\n     *             synchronize.onEvent(this.alertPopup.okButton, izi.events.click());\r\n     *         }\r\n     *     };\r\n     *\r\n     *     izi.queue().execute(task1, task2);\r\n     *\r\n     * @since 1.2.0\r\n     * @member Izi.queue.Synchronizer\r\n     * @param {Object} dispatcher\r\n     * @param {String...|Izi.events.EventConfig...} vararg of event types as String or `izi.events.*`\r\n     */\r\n    Synchronizer.prototype.onEvent = function (dispatcher, event) {\r\n        var task = this.obtainTask(),\r\n            synchronization = new module.queue.SynchronizedOnEvent(this.queue.iziApi, dispatcher, Array.prototype.slice.call(arguments, 1));\r\n        this.recordSynchronization(synchronization, task);\r\n    };\r\n\r\n    /**\r\n     * Synchronizes the queue when service triggers the responder either on `result()` or `error()` methods.\r\n     * If you have reponder with methods different than `result()` or `error()`, then you can specify the custom ones.\r\n     *\r\n     * Example - synchronize task when any of `result()` or `error()` methods will be triggered\r\n     *\r\n     *     var task1 = {\r\n     *\r\n     *         execute: function(synchronize) {\r\n     *             Ajax.request(\"/someUrl\", someParameters, synchronize.responder(this));\r\n     *         },\r\n     *\r\n     *         result: function (ajaxResponse) {\r\n     *             // some code for handling Ajax response\r\n     *             // after this code the queue will execute `task2`\r\n     *         },\r\n     *\r\n     *         error: function (ajaxFailure) {\r\n     *             // some code for handling Ajax error\r\n     *             // after this code the queue will execute `task2`\r\n     *         },\r\n     *     };\r\n     *\r\n     *     izi.queue().execute(task1, task2);\r\n     *\r\n     * @since 1.2.0\r\n     * @member Izi.queue.Synchronizer\r\n     * @param {Object} responder\r\n     * @param {String} [resultFunctionName=\"result\"]\r\n     * @param {String} [errorFunctionName=\"error\"]\r\n     * @return {*}\r\n     */\r\n    Synchronizer.prototype.responder = function (responder, resultFunctionName, errorFunctionName) {\r\n        var task = this.obtainTask(),\r\n            synchronization = new module.queue.SynchronizedResponder(responder, resultFunctionName, errorFunctionName);\r\n        return this.recordSynchronization(synchronization, task).synchronizedResponder;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Synchronizer\r\n     * @private\r\n     * @param synchronization\r\n     * @param task\r\n     * @return {*}\r\n     */\r\n    Synchronizer.prototype.recordSynchronization = function (synchronization, task) {\r\n        this.queue.log(\"        \" + synchronization.logLabel + \" was used by task: \" + this.queue.getCurrentTaskIndex() + \" of \" + this.queue.countTasks());\r\n        this.synchronizations.set(synchronization, task);\r\n        synchronization.addListener(\"synchronized\", this.removeSynchronization, this);\r\n        return synchronization;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Synchronizer\r\n     * @private\r\n     * @param synchronization\r\n     */\r\n    Synchronizer.prototype.removeSynchronization = function (synchronization) {\r\n        var task = this.synchronizations.get(synchronization);\r\n        this.synchronizations.remove(synchronization);\r\n\r\n        var pendingSynchronizationsOnTask = this.countSynchronizations(task);\r\n        this.queue.log(\"        \" + synchronization.logLabel + \" completed by task: \" + this.queue.getCurrentTaskIndex() + \" of \" + this.queue.countTasks());\r\n        if (pendingSynchronizationsOnTask == 0)\r\n            this.taskSynchronized(task);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Synchronizer\r\n     * @private\r\n     * @param task\r\n     */\r\n    Synchronizer.prototype.taskSynchronized = function (task) {\r\n        var awaitedTasks = this.awaitedTasks;\r\n\r\n        var proceedClosure = awaitedTasks.get(task);\r\n        if (proceedClosure) {\r\n            try {\r\n                proceedClosure.fn.apply(proceedClosure.scope);\r\n            }\r\n            finally {\r\n                awaitedTasks.remove(task);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Synchronizer\r\n     * @private\r\n     * @param task\r\n     * @return {*}\r\n     */\r\n    Synchronizer.prototype.countSynchronizations = function (task) {\r\n        return this.synchronizations.countValues(task);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Synchronizer\r\n     * @private\r\n     * @return {*}\r\n     */\r\n    Synchronizer.prototype.obtainTask = function () {\r\n        var task = this.queue.currentTask;\r\n        if (!task)\r\n            throw new Error(\"There is no task executed. Please use izi.queue().execute(someTask) and use this method.\");\r\n        return task;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Synchronizer\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    Synchronizer.prototype.hasPendingSynchronizations = function () {\r\n        return !!this.synchronizations.count();\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Synchronizer\r\n     * @private\r\n     * @param task\r\n     * @param proceedClosure\r\n     */\r\n    Synchronizer.prototype.afterSynchronizingTaskCall = function (task, proceedClosure) {\r\n        this.awaitedTasks.set(task, proceedClosure);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Synchronizer\r\n     * @private\r\n     * @param task\r\n     */\r\n    Synchronizer.prototype.taskTimeout = function (task) {\r\n        var synchronizations = this.synchronizations,\r\n            synchronizationsToRemove = synchronizations.getKeysOf(task);\r\n\r\n        this.queue.log(\"    Time outed task: \" + this.queue.getCurrentTaskIndex() + \" of \" + this.queue.countTasks());\r\n        this.awaitedTasks.remove(task);\r\n\r\n        module.utils.forEach(synchronizationsToRemove, function (synchronization) {\r\n            synchronizations.remove(synchronization);\r\n        });\r\n    };\r\n\r\n    module.queue.Synchronizer = Synchronizer;\r\n}(Izi);\r\n!function (module) {\r\n\r\n    /**\r\n     * @class Izi.queue.GenericTask\r\n     * @private\r\n     * @constructor\r\n     * @param functionToExecute\r\n     * @param scope\r\n     */\r\n    var GenericTask = function Izi_queue_GenericTask(functionToExecute, scope) {\r\n        this.functionToExecute = functionToExecute;\r\n        this.scope = scope;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.GenericTask\r\n     * @private\r\n     */\r\n    GenericTask.prototype.execute = function () {\r\n        this.functionToExecute.apply(this.scope, arguments);\r\n    };\r\n\r\n    module.queue.GenericTask = GenericTask;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/typeOf.js\r\n * @requires ../utils/mergeObjects.js\r\n * @requires ../utils/forEach.js\r\n * @requires ../utils/log.js\r\n * @requires TimeoutGuard.js\r\n * @requires Synchronizer.js\r\n * @requires GenericTask.js\r\n */\r\n!function (module, global) {\r\n\r\n    var typeOf = module.utils.typeOf,\r\n        mergeObjects = module.utils.mergeObjects,\r\n        forEach = module.utils.forEach,\r\n        log = module.utils.log,\r\n        queueUniqueId = 0;\r\n\r\n    function formatTimeStamp() {\r\n        var now = new Date();\r\n        return padding(now.getHours(), 2) +\r\n               \":\" +\r\n               padding(now.getMinutes(), 2) +\r\n               \":\" +\r\n               padding(now.getSeconds(), 2) +\r\n               \".\" +\r\n               padding(now.getMilliseconds(), 3);\r\n    }\r\n\r\n    function padding(value, padding) {\r\n        var number = \"\" + value;\r\n        return new Array(padding - number.length + 1).join(\"0\") + number;\r\n    }\r\n\r\n    /**\r\n     * `izi.queue()` allows you to define and execute sequence of synchronous and asynchronous tasks. Task may be defined\r\n     * as a `Function` or an `Object` with `execute()` function.\r\n     *\r\n     *     var taskAsFunction = function () {\r\n     *         // some code of task\r\n     *     }\r\n     *\r\n     *     var taskAsObject = {\r\n     *         execute: function () {\r\n     *             // some code of task\r\n     *         }\r\n     *     }\r\n     *\r\n     * Example - two equivalent ways for defining and running the queue:\r\n     *\r\n     *     izi.queue().execute(task1,\r\n     *                         task2,\r\n     *                         task3);\r\n     *\r\n     *     // is a shortcut of:\r\n     *     izi.queue().push(task1,\r\n     *                      task2,\r\n     *                      task3).start();\r\n     *\r\n     * The second example allows you to define a queue once and run many times and also it allows to add event listeners\r\n     * before starting the queue:\r\n     *\r\n     *     var queue = izi.queue().push(task1,\r\n     *                                  task2,\r\n     *                                  task3);\r\n     *\r\n     *     queue.onTaskStarted(doSomethingWhenTaskStarted);\r\n     *     queue.onTaskFinished(doSomethingWhenTaskFinished);\r\n     *\r\n     *     queue.start();\r\n     *\r\n     * When the task executes some asynchronous code and the queue should wait until it finish - then we can say the task\r\n     * is asynchronous and we need to notify somehow the queue to not execute next task immediately. This problem is\r\n     * solved by usage of **{@link Izi.queue.Synchronizer synchronize}** argument passed to each task, like in example below:\r\n     *\r\n     *     var asynchronousTask = {\r\n     *         execute: function (synchronize) {\r\n     *             setTimeout(synchronize.onCallback(), 1000);\r\n     *         }\r\n     *     };\r\n     *     var synchronousTask = {\r\n     *         execute: function () {\r\n     *             // do some synchronous code\r\n     *         }\r\n     *     }\r\n     *\r\n     *     izi.queue().execute(asynchronousTask,\r\n     *                         synchronousTask);\r\n     *\r\n     * You can find more synchronization methods in {@link Izi.queue.Synchronizer} documentation\r\n     *\r\n     * @class Izi.queue.Queue\r\n     * @since 1.2.0\r\n     * @constructor\r\n     * @private\r\n     * @param {Object} impl framework queue implementation\r\n     * @param {Object} config queue configuration\r\n     * @param {izi} iziApi\r\n     */\r\n    var Queue = function Izi_queue_Queue(impl, config, iziApi) {\r\n        var defaultConfig = {\r\n            scope: global,\r\n            defaultTimeout: 0,\r\n            debug: undefined\r\n        };\r\n\r\n        this.config = mergeObjects(defaultConfig, config);\r\n        this.iziApi = iziApi;\r\n        this.queue = [];\r\n        this.originalQueue = [];\r\n        if (this.config.debug) {\r\n            queueUniqueId++;\r\n            this.id = this.config.debug + \":\" + queueUniqueId;\r\n        }\r\n\r\n        this.delegatedIn = impl.createEventDispatcher();\r\n        this.dispatchEvent = impl.dispatchEvent;\r\n\r\n        this.synchronizer = new module.queue.Synchronizer(this);\r\n        new module.queue.TimeoutGuard(this);\r\n    };\r\n\r\n    /**\r\n     * Enqueue all given functions and tasks (object with execute function), and execute them sequentially\r\n     *\r\n     * @since 1.2.0\r\n     * @member Izi.queue.Queue\r\n     * @param {Function...|Object~execute()...} vararg of tasks or functions\r\n     * @return {Izi.queue.Queue}\r\n     */\r\n    Queue.prototype.execute = function () {\r\n        this.pushAll(arguments);\r\n        this.start();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Enqueue all given functions and tasks (object with execute function)\r\n     *\r\n     * @since 1.2.0\r\n     * @member Izi.queue.Queue\r\n     * @param {Function...|Object~execute...} vararg of tasks or functions\r\n     * @return {Izi.queue.Queue}\r\n     */\r\n    Queue.prototype.push = function () {\r\n        this.pushAll(arguments);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Start executing tasks synchronously\r\n     *\r\n     * @since 1.2.0\r\n     * @member Izi.queue.Queue\r\n     * @return {Izi.queue.Queue}\r\n     */\r\n    Queue.prototype.start = function () {\r\n        if (this.isExecutedTask()) {\r\n            throw new Error(\"Can't start already started queue until it's finished\");\r\n        }\r\n\r\n        this.queue = this.originalQueue.slice();\r\n        this.log(\"Queue started. Total tasks to execute: \" + this.countTasks());\r\n        this.proceed();\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Cancel executing tasks.\r\n     *\r\n     * @since 1.2.0\r\n     * @member Izi.queue.Queue\r\n     */\r\n    Queue.prototype.cancel = function () {\r\n        this.log(\"Queue canceled at executing task: \" + this.getCurrentTaskIndex() + \" of \" + this.countTasks());\r\n        this.dispatchTaskEvent(\"queueCanceled\", true);\r\n        this.queue = [];\r\n        this.clearAndProceed();\r\n    };\r\n\r\n    /**\r\n     * Add \"taskStarted\" event listener\r\n     *\r\n     * @since 1.2.0\r\n     * @param {Function} fn\r\n     * @param {Object} [scope]\r\n     * @return {Izi.behavior.OnWidget}\r\n     */\r\n    Queue.prototype.onTaskStarted = function (fn, scope) {\r\n        return this.iziApi.perform(fn, scope || global).when(\"taskStarted\").on(this);\r\n    };\r\n\r\n    /**\r\n     * Add \"taskFinished\" event listener\r\n     *\r\n     * @since 1.2.0\r\n     * @param {Function} fn\r\n     * @param {Object} [scope]\r\n     * @return {Izi.behavior.OnWidget}\r\n     */\r\n    Queue.prototype.onTaskFinished = function (fn, scope) {\r\n        return this.iziApi.perform(fn, scope || global).when(\"taskFinished\").on(this);\r\n    };\r\n\r\n    /**\r\n     * Add \"taskTimeouted\" event listener\r\n     *\r\n     * @since 1.2.0\r\n     * @param {Function} fn\r\n     * @param {Object} [scope]\r\n     * @return {Izi.behavior.OnWidget}\r\n     */\r\n    Queue.prototype.onTaskTimeouted = function (fn, scope) {\r\n        return this.iziApi.perform(fn, scope || global).when(\"taskTimeouted\").on(this);\r\n    };\r\n\r\n    /**\r\n     * Add \"queueFinished\" event listener\r\n     *\r\n     * @since 1.2.0\r\n     * @param {Function} fn\r\n     * @param {Object} [scope]\r\n     * @return {Izi.behavior.OnWidget}\r\n     */\r\n    Queue.prototype.onQueueFinished = function (fn, scope) {\r\n        return this.iziApi.perform(fn, scope || global).when(\"queueFinished\").on(this);\r\n    };\r\n\r\n    /**\r\n     * Add \"queueCanceled\" event listener\r\n     *\r\n     * @since 1.2.0\r\n     * @param {Function} fn\r\n     * @param {Object} [scope]\r\n     * @return {Izi.behavior.OnWidget}\r\n     */\r\n    Queue.prototype.onQueueCanceled = function (fn, scope) {\r\n        return this.iziApi.perform(fn, scope || global).when(\"queueCanceled\").on(this);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @param tasksOrFunctions\r\n     */\r\n    Queue.prototype.pushAll = function (tasksOrFunctions) {\r\n        var me = this;\r\n\r\n        forEach(tasksOrFunctions, function (taskOrFunction, index) {\r\n\r\n            if (typeOf(taskOrFunction) === 'Function') {\r\n                me.pushFunction(taskOrFunction);\r\n            } else if (typeOf(taskOrFunction) === 'Object' && typeOf(taskOrFunction.execute) === 'Function') {\r\n                me.pushTask(taskOrFunction);\r\n            } else {\r\n                throw new Error(\"Invalid queue element given at index: \" + index + \". Expected Function or Object with execute() function.\");\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @param task\r\n     */\r\n    Queue.prototype.pushTask = function (task) {\r\n        this.originalQueue.push(task);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @param fn\r\n     */\r\n    Queue.prototype.pushFunction = function (fn) {\r\n        this.pushTask(new module.queue.GenericTask(fn, this.getScope()));\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @return {*}\r\n     */\r\n    Queue.prototype.getScope = function () {\r\n        return this.config.scope;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     */\r\n    Queue.prototype.proceed = function () {\r\n        if (this.isExecutedTask())\r\n            return;\r\n\r\n        if (this.isEmptyQueue()) {\r\n            this.log(\"\");\r\n            this.log(\"Queue finished\");\r\n            this.dispatchTaskEvent(\"queueFinished\");\r\n            return;\r\n        }\r\n\r\n        this.executeSynchronously(this.queue.shift());\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    Queue.prototype.isEmptyQueue = function () {\r\n        return this.queue.length === 0\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    Queue.prototype.isExecutedTask = function () {\r\n        return !!this.currentTask;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @param task\r\n     */\r\n    Queue.prototype.executeSynchronously = function (task) {\r\n        this.currentTask = task;\r\n        this.log(\"\");\r\n        this.log(\"    Task started: \" + this.getCurrentTaskIndex() + \" of \" + this.countTasks());\r\n        this.dispatchTaskEvent(\"taskStarted\", true);\r\n        task.execute(this.synchronizer);\r\n        this.awaitSynchronizerOrProceed();\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     */\r\n    Queue.prototype.awaitSynchronizerOrProceed = function () {\r\n        if (this.synchronizer.hasPendingSynchronizations()) {\r\n            this.synchronizer.afterSynchronizingTaskCall(this.currentTask, {fn: this.taskSynchronized, scope: this});\r\n        }\r\n        else {\r\n            this.log(\"        No synchronizations used by task: \" + this.getCurrentTaskIndex() + \" of \" + this.countTasks());\r\n            this.taskSynchronized();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     */\r\n    Queue.prototype.taskSynchronized = function () {\r\n        this.log(\"    Task finished: \" + this.getCurrentTaskIndex() + \" of \" + this.countTasks());\r\n        this.dispatchTaskEvent(\"taskFinished\", true);\r\n        this.clearAndProceed();\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     */\r\n    Queue.prototype.clearAndProceed = function () {\r\n        this.currentTask = undefined;\r\n        this.proceed();\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @param type\r\n     * @param addStatistics\r\n     */\r\n    Queue.prototype.dispatchTaskEvent = function (type, addStatistics) {\r\n        var event = {\r\n            type: type,\r\n            queue: this,\r\n            task: this.currentTask\r\n        };\r\n        if (addStatistics) {\r\n            event.currentTask = this.getCurrentTaskIndex();\r\n            event.totalTasks = this.countTasks();\r\n        }\r\n        this.dispatchEvent(this.delegatedIn, type, event)\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @return {number}\r\n     */\r\n    Queue.prototype.getCurrentTaskIndex = function () {\r\n        return this.originalQueue.length - this.queue.length;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @return {Number}\r\n     */\r\n    Queue.prototype.countTasks = function () {\r\n        return this.originalQueue.length;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     * @param task\r\n     * @return {Number}\r\n     */\r\n    Queue.prototype.timeoutForTask = function (task) {\r\n        // todo - specific timeouts for tasks\r\n        return this.config.defaultTimeout;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.queue.Queue\r\n     * @private\r\n     */\r\n    Queue.prototype.currentTaskTimeouted = function () {\r\n        this.synchronizer.taskTimeout(this.currentTask);\r\n        this.dispatchTaskEvent(\"taskTimeouted\", true);\r\n        this.clearAndProceed();\r\n    };\r\n\r\n    Queue.prototype.log = function (message) {\r\n        if (this.config.debug) {\r\n            log(\"[izi.queue:\" + this.id + \"] \" + formatTimeStamp() + \" \" + message);\r\n        }\r\n    };\r\n\r\n    module.queue.Queue = Queue;\r\n\r\n}(Izi, this);\r\n/**\r\n * @ignore\r\n * @requires Queue.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * @member Izi.binding\r\n     * @method\r\n     * @private\r\n     * @param {Object} impl\r\n     * @param {izi} iziApi\r\n     */\r\n    module.queue.register = function (impl, iziApi) {\r\n\r\n        return function (config) {\r\n            return new module.queue.Queue(impl, config, iziApi);\r\n        };\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires indexOf.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {Array} array\r\n     * @param {*} item\r\n     * @return {Boolean}\r\n     */\r\n    module.utils.arrayContains = function (array, item) {\r\n        return module.utils.indexOf(array, item) !== -1;\r\n    };\r\n}(Izi);\r\n!function (module) {\r\n    /**\r\n     * @param {String} classString\r\n     * @private\r\n     * @constructor\r\n     */\r\n    module.utils.ClassNotFound = function (classString) {\r\n        this.message = \"Class name given as string: \\\"\" + classString + \"\\\" couldn't be resolved as a class\";\r\n    };\r\n\r\n    module.utils.ClassNotFound.prototype = new Error();\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires forEach.js\r\n * @requires ClassNotFound.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @private\r\n     * @param {String} classString\r\n     * @param {Object} globals\r\n     * @return {Function}\r\n     */\r\n    module.utils.getClassByName = function (classString, globals) {\r\n        var currentPart,\r\n            parts = classString.split(\".\");\r\n        currentPart = globals;\r\n\r\n        module.utils.forEach(parts, function (part) {\r\n            var nextPart = currentPart[part];\r\n            if (nextPart === undefined) {\r\n                throw new module.utils.ClassNotFound(classString);\r\n            }\r\n            currentPart = nextPart;\r\n        });\r\n\r\n        return currentPart;\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/typeOf.js\r\n * @requires ../utils/getClassByName.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * Configuration used in IoC/DI fluent API\r\n     * @class Izi.ioc.Config\r\n     * @constructor\r\n     * @private\r\n     * @param {Function|String|Object} Class Class constructor, dotted class definition string or ready instance of bean\r\n     * @param {Function} Strategy Strategy constructor\r\n     * @param {Object} globals\r\n     */\r\n    var Config = function Izi_ioc_Config(Class, Strategy, globals) {\r\n        this.Clazz = this._resolveClass(Class, globals);\r\n        this.Strategy = Strategy;\r\n        this.args = [];\r\n    };\r\n\r\n    /**\r\n     * @member Izi.ioc.Config\r\n     * @private\r\n     * @return {*}\r\n     */\r\n    Config.prototype.createStrategy = function () {\r\n        return new this.Strategy(this);\r\n    };\r\n\r\n    /**\r\n     * @member Izi.ioc.Config\r\n     * @private\r\n     * @return {Array}\r\n     */\r\n    Config.prototype.getArguments = function () {\r\n        return this.args;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.ioc.Config\r\n     * @private\r\n     * @return {Array}\r\n     */\r\n    Config.prototype.getProperties = function () {\r\n        return this.props;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.ioc.Config\r\n     * @private\r\n     * @return {Function|String|Object}\r\n     */\r\n    Config.prototype.getClazz = function () {\r\n        return this.Clazz;\r\n    };\r\n\r\n    /**\r\n     * Arguments that will be used to object creation. It accept also {@link izi#inject izi.inject()} values.\r\n     *     izi.bakeBeans({\r\n     *         bean: izi.instantiate(Class).withArgs(\"Value\", izi.inject(\"beanId\")\r\n     *     });\r\n     *\r\n     * @member Izi.ioc.Config\r\n     * @noSanity\r\n     * @param {Object...|Izi.ioc.Injection...} vararg arguments\r\n     * @return {Izi.ioc.Config}\r\n     */\r\n    Config.prototype.withArgs = function () {\r\n        if (arguments.length > 10) {\r\n            throw new Error(\"Too many arguments passed. Ten arguments is maximum.\");\r\n        }\r\n\r\n        this.args = arguments;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Properties that will be used to overwrite on created bean. It accept also {@link izi#inject izi.inject()} values.\r\n     *     izi.bakeBeans({\r\n     *         bean: izi.instantiate(Class).withProps({field1: \"Value 1\", field2: izi.inject(\"beanId\")})\r\n     *     });\r\n     *\r\n     * @member Izi.ioc.Config\r\n     * @noSanity\r\n     * @param {Object} props Map of property=>value used to overwrite on bean\r\n     * @return {Izi.ioc.Config}\r\n     */\r\n    Config.prototype.withProps = function (props) {\r\n        this.props = props;\r\n        return this;\r\n    };\r\n\r\n    Config.prototype._resolveClass = function (Class, globals) {\r\n        if (module.utils.typeOf(Class) === \"String\") {\r\n            Class = module.utils.getClassByName(Class, globals);\r\n        }\r\n        return Class;\r\n    };\r\n\r\n    module.ioc.Config = Config;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../../utils/forEach.js\r\n * @requires ../../utils/getClassByName.js\r\n */\r\n!function (module) {\r\n\r\n    function matchesById(selfId, otherId) {\r\n        return selfId === otherId;\r\n    }\r\n\r\n    function matchesByType(factory, type) {\r\n        return factory.matchesByType(type);\r\n    }\r\n\r\n    function injectDependenciesOnProperties(context, bean) {\r\n        var prop;\r\n        bean.iziInjectingInProgress = true;\r\n        for (prop in bean) {\r\n            var injection = bean[prop];\r\n            if (injection && injection.isIziInjection) {\r\n                injection.injector(bean, prop, injection.resolveBean(context));\r\n            }\r\n        }\r\n        delete bean.iziInjectingInProgress;\r\n    }\r\n\r\n    /**\r\n     * Bean instance builder based on given strategy.\r\n     * @class Izi.ioc.bean.BeanBuilder\r\n     * @private\r\n     * @constructor\r\n     * @param {String} id\r\n     * @param {Object} strategy\r\n     * @param {Function} strategy.init\r\n     * @param {Function} strategy.create\r\n     * @param {Function} strategy.matchesByType\r\n     * @param {Function} strategy.getArguments\r\n     * @param {Object} globals\r\n     */\r\n    var BeanBuilder = function Izi_ioc_bean_BeanBuilder(id, strategy, globals) {\r\n        this.id = id;\r\n        this.strategy = strategy;\r\n        this.globals = globals;\r\n        this.createdBeans = [];\r\n        if (!globals) {\r\n            throw new Error(\"`globals` not defined\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Delegates init on strategy\r\n     * @member Izi.ioc.bean.BeanBuilder\r\n     * @private\r\n     * @param beansContext\r\n     * @return {*}\r\n     */\r\n    BeanBuilder.prototype.init = function (beansContext) {\r\n        return this.strategy.init(beansContext);\r\n    };\r\n\r\n    /**\r\n     * Delegates create on strategy\r\n     * @member Izi.ioc.bean.BeanBuilder\r\n     * @private\r\n     * @param context\r\n     * @return {*}\r\n     */\r\n    BeanBuilder.prototype.create = function (context) {\r\n        var bean = this.strategy.create(context);\r\n\r\n        if (bean.iziInjectingInProgress) {\r\n            return bean;\r\n        }\r\n\r\n        injectDependenciesOnProperties(context, bean);\r\n\r\n        if (bean.iziContext && !bean.iziContextCalled) {\r\n            bean.iziContextCalled = true;\r\n            bean.iziContext(context);\r\n        }\r\n        if (bean.iziInit && !bean.iziInitCalled) {\r\n            bean.iziInitCalled = true;\r\n            bean.iziInit();\r\n        }\r\n\r\n        this.createdBeans.push(bean);\r\n\r\n        return bean;\r\n    };\r\n\r\n    BeanBuilder.prototype.destroyCreatedBeans = function () {\r\n        module.utils.forEach(this.createdBeans, function (createdBean) {\r\n            if (createdBean.iziDestroy) {\r\n                try {\r\n                    createdBean.iziDestroy();\r\n                } catch (e) {\r\n                }\r\n            }\r\n        });\r\n\r\n        this.id = undefined;\r\n        this.strategy = undefined;\r\n        this.createdBeans = undefined;\r\n    };\r\n\r\n    BeanBuilder.prototype.preDestroyCreatedBeans = function () {\r\n        module.utils.forEach(this.createdBeans, function (createdBean) {\r\n            if (createdBean.iziPreDestroy) {\r\n                createdBean.iziPreDestroy();\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Matches factory by id or class type\r\n     * @member Izi.ioc.bean.BeanBuilder\r\n     * @private\r\n     * @param {String|Function} idOrType\r\n     * @return {Boolean}\r\n     */\r\n    BeanBuilder.prototype.matches = function (idOrType) {\r\n        if ((typeof idOrType) === \"string\") {\r\n            return idOrType.indexOf(\".\") !== -1\r\n                ? matchesByType(this.strategy, module.utils.getClassByName(idOrType, this.globals))\r\n                : matchesById(this.id, idOrType);\r\n        } else {\r\n            return matchesByType(this.strategy, idOrType);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get bean factories that are set as argument dependencies\r\n     * @member Izi.ioc.bean.BeanBuilder\r\n     * @private\r\n     * @param context\r\n     * @return {*}\r\n     */\r\n    BeanBuilder.prototype.getArgumentsDependencies = function (context) {\r\n\r\n        function findArgumentsDependencies(args) {\r\n            var results = [];\r\n            module.utils.forEach(args, function (arg) {\r\n                if (arg && arg.isIziInjection) {\r\n                    results.push(arg.findBeanBuilder(context));\r\n                }\r\n            });\r\n            return results;\r\n        }\r\n\r\n        return findArgumentsDependencies(this.strategy.getArguments());\r\n    };\r\n\r\n    module.ioc.bean.BeanBuilder = BeanBuilder;\r\n}(Izi);\r\n!function(module){\r\n    /**\r\n     * Ready instance strategy used in {@link Izi.ioc.bean.BeanBuilder}\r\n     * @class Izi.ioc.bean.InstanceStrategy\r\n     * @private\r\n     * @constructor\r\n     * @param {*} instance\r\n     */\r\n    var InstanceStrategy = function Izi_ioc_bean_InstanceStrategy(instance) {\r\n        this.instance = instance;\r\n    };\r\n\r\n    InstanceStrategy.prototype.init = function (beansContext) {\r\n        return this.instance;\r\n    };\r\n\r\n    InstanceStrategy.prototype.create = function (beansContext) {\r\n        return this.instance;\r\n    };\r\n\r\n    InstanceStrategy.prototype.matchesByType = function (type) {\r\n        return this.instance instanceof type;\r\n    };\r\n\r\n    InstanceStrategy.prototype.getArguments = function () {\r\n        return [];\r\n    };\r\n\r\n    module.ioc.bean.InstanceStrategy = InstanceStrategy;\r\n}(Izi);\r\n!function(module) {\r\n    /**\r\n     * @private\r\n     * @param {String|Function} beanIdOrType\r\n     * @constructor\r\n     */\r\n    module.ioc.bean.NoBeanMatched = function (beanIdOrType) {\r\n        this.message = \"No bean matched: \" + beanIdOrType;\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/typeOf.js\r\n * @requires ../utils/forEach.js\r\n * @requires ../utils/hasOwnProperty.js\r\n * @requires ../utils/every.js\r\n * @requires ../model/Observable.js\r\n * @requires Config.js\r\n * @requires bean/BeanBuilder.js\r\n * @requires bean/InstanceStrategy.js\r\n * @requires bean/NoBeanMatched.js\r\n */\r\n!function (module) {\r\n\r\n    function normalizeBeans(beans) {\r\n        if (module.utils.typeOf(beans) === 'Array') {\r\n            return mergeBeans(beans);\r\n        } else {\r\n            return beans;\r\n        }\r\n    }\r\n\r\n    function mergeBeans(beansCollection) {\r\n        var result = {};\r\n        module.utils.forEach(beansCollection, function (beans) {\r\n            iterateOwnProperties(beans, function (key, value) {\r\n                if (result[key] === undefined) {\r\n                    result[key] = value;\r\n                } else {\r\n                    throw new Error('Found duplicated bean ID: \"' + key + '\" in multiple configurations');\r\n                }\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n\r\n    function iterateOwnProperties(object, callback) {\r\n        for (var key in object) {\r\n            if (module.utils.hasOwnProperty(object, key)) {\r\n                callback(key, object[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function createBeansBuilders(beans, beansBuilders, globals) {\r\n        var beanId, beanConfig, beanBuilder;\r\n\r\n        for (beanId in beans) {\r\n            if (module.utils.hasOwnProperty(beans, beanId)) {\r\n                beanConfig = beans[beanId];\r\n\r\n                if (beanConfig instanceof module.ioc.Config) {\r\n                    beanBuilder = new module.ioc.bean.BeanBuilder(beanId, beanConfig.createStrategy(), globals);\r\n                } else if (module.utils.typeOf(beanConfig) === \"Function\") {\r\n                    var config = new module.ioc.Config(beanConfig, module.ioc.bean.SingletonStrategy, globals);\r\n                    beanBuilder = new module.ioc.bean.BeanBuilder(beanId, config.createStrategy(), globals);\r\n                } else {\r\n                    beanBuilder = new module.ioc.bean.BeanBuilder(beanId, new module.ioc.bean.InstanceStrategy(beanConfig), globals);\r\n                }\r\n\r\n                beansBuilders.push(beanBuilder);\r\n            }\r\n        }\r\n    }\r\n\r\n    function findCircularDependencies(beansContext, beanBuilder) {\r\n\r\n        function visitDependencies(visitedBuilder) {\r\n            var dependencies = visitedBuilder.getArgumentsDependencies(beansContext);\r\n\r\n            module.utils.forEach(dependencies, function (dependency) {\r\n                if (dependency === beanBuilder) {\r\n                    throw new Error(\"Circular dependencies found. If it is possible try inject those dependencies by properties instead by arguments.\");\r\n                }\r\n                visitDependencies(dependency);\r\n            });\r\n        }\r\n\r\n        visitDependencies(beanBuilder);\r\n    }\r\n\r\n    function initBean(beansContext, beanBuilder) {\r\n        findCircularDependencies(beansContext, beanBuilder);\r\n        return beanBuilder.init(beansContext);\r\n    }\r\n\r\n    function initAllBeans(beansContext, beansBuilders) {\r\n        var bean, beansToCreate = [];\r\n\r\n        module.utils.forEach(beansBuilders, function (beanBuilder) {\r\n            bean = initBean(beansContext, beanBuilder);\r\n            if (bean) {\r\n                beansToCreate.push(beanBuilder);\r\n            }\r\n        });\r\n\r\n        module.utils.forEach(beansToCreate, function (beanToCreate) {\r\n            beanToCreate.create(beansContext);\r\n        });\r\n    }\r\n\r\n    function createPreDestroyEvent() {\r\n        return {\r\n\r\n            isPrevented: false,\r\n\r\n            isDestroyPrevented: function () {\r\n                return this.isPrevented;\r\n            },\r\n\r\n            preventDestroy: function () {\r\n                this.isPrevented = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param {Izi.ioc.BeansContext} beansContext\r\n     */\r\n    function handleDestroyFromParentContext(beansContext) {\r\n        var parentContext = beansContext.parentContext,\r\n            childrenDispatcher = beansContext.destroyDispatcher,\r\n            parentDispatcher = parentContext && parentContext.destroyDispatcher;\r\n\r\n        if (!parentDispatcher) {\r\n            return;\r\n        }\r\n\r\n        function handlePreDestroy(event) {\r\n            childrenDispatcher.dispatchEvent(\"preDestroy\", arguments);\r\n            if (event.isDestroyPrevented()) {\r\n                return;\r\n            }\r\n\r\n            var shouldDestroy = beansContext.doPreDestroy();\r\n            if (!shouldDestroy) {\r\n                event.preventDestroy();\r\n            }\r\n        }\r\n\r\n        function handleDestroy(event) {\r\n            parentDispatcher.removeListener(\"destroy\", handleDestroy);\r\n            parentDispatcher.removeListener(\"preDestroy\", handlePreDestroy);\r\n\r\n            childrenDispatcher.dispatchEvent(\"destroy\", arguments);\r\n            beansContext.doDestroy();\r\n        }\r\n\r\n        parentDispatcher.addListener(\"preDestroy\", handlePreDestroy);\r\n        parentDispatcher.addListener(\"destroy\", handleDestroy);\r\n    }\r\n\r\n    /**\r\n     * BeansContext instance is returned by {@link izi#bakeBeans izi.bakeBeans()} function. It is also available\r\n     * in <code>.iziContext(context)</code> function implemented on any bean, ie:\r\n     *\r\n     *     izi.bakeBeans({\r\n     *\r\n     *         bean: izi.instantiate(SomeDependency),\r\n     *\r\n     *         myBean: {\r\n     *\r\n     *             dependency: izi.inject(SomeDependency),\r\n     *\r\n     *             iziContext: function (context) {\r\n     *                 // iziContext function is called when all dependencies are provided and ready to use\r\n     *             }\r\n     *\r\n     *             iziInit: function () {\r\n     *                 // iziInit() is called after iziContext()\r\n     *             }\r\n     *         }\r\n     *     });\r\n     *\r\n     *  When you have BeansContext reference, you can:\r\n     *\r\n     *   * wire dependencies to object created outside the context: <code>context.wire(objectContainingIziInjects)</code>\r\n     *   * create descendant context: <code>izi.bakeBeans({...}, parentContext);</code>\r\n     *   * destroy context: <code>context.destroy()</code>\r\n     *\r\n     * @class Izi.ioc.BeansContext\r\n     * @constructor\r\n     * @private\r\n     * @param {Object} globals\r\n     * @param {Object|Object[]} beans Beans configuration as a map of beanId:bean or array of maps.\r\n     * @param {Izi.ioc.BeansContext} [parentContext]\r\n     */\r\n    var BeansContext = function Izi_ioc_BeansContext(globals, beans, parentContext) {\r\n        this.globals = globals;\r\n        this.beans = normalizeBeans(beans);\r\n        this.destroyDispatcher = new module.model.Observable();\r\n        this.parentContext = parentContext;\r\n        this.beansBuilders = [];\r\n\r\n        handleDestroyFromParentContext(this);\r\n    };\r\n\r\n    /**\r\n     * Init context\r\n     * @member Izi.ioc.BeansContext\r\n     * @private\r\n     * @return {Izi.ioc.BeansContext}\r\n     */\r\n    BeansContext.prototype.initContext = function () {\r\n\r\n        createBeansBuilders(this.beans, this.beansBuilders, this.globals);\r\n        initAllBeans(this, this.beansBuilders);\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Find bean by its id or class name\r\n     * @member Izi.ioc.BeansContext\r\n     * @param {String|Function} beanIdOrType\r\n     * @return {*}\r\n     */\r\n    BeansContext.prototype.getBean = function (beanIdOrType) {\r\n\r\n        var beanBuilder = this.findBeanBuilder(beanIdOrType);\r\n\r\n        if (!beanBuilder) {\r\n            throw new module.ioc.bean.NoBeanMatched(beanIdOrType);\r\n        }\r\n\r\n        return beanBuilder.create(this);\r\n    };\r\n\r\n    /**\r\n     * Injects needed dependencies from this context into passed object.\r\n     * @member Izi.ioc.BeansContext\r\n     * @since 1.3.0\r\n     * @param {Object} objectContainingIziInjects\r\n     * @return {Object}\r\n     */\r\n    BeansContext.prototype.wire = function (objectContainingIziInjects) {\r\n        var strategy = new module.ioc.bean.InstanceStrategy(objectContainingIziInjects),\r\n            beanBuilder = new module.ioc.bean.BeanBuilder(\"\", strategy, this.globals);\r\n        this.beansBuilders.push(beanBuilder);\r\n        return beanBuilder.create(this);\r\n    };\r\n\r\n    /**\r\n     * Destroys beans context and all descendant contexts. First it calls <code>.iziPreDestroy()</code> method on every\r\n     * created bean if implemented. Throwing an error inside <code>.iziPreDestroy()</code> stops destroying the context.\r\n     * After calling <code>.iziPreDestroy()</code> izi calls <code>.iziDestroy()</code> methods on every created bean\r\n     * if implemented. All thrown errors inside <code>.iziDestroy()</code> are caught and ignored.\r\n     *\r\n     * <code>.iziDestroy()</code> is a place where you should unregister all event listeners added within its class.\r\n     *\r\n     *     var context = izi.bakeBeans({\r\n     *\r\n     *         someBean: {\r\n     *\r\n     *             iziInit: function () {\r\n     *                 var bind = this.bind = izi.bind();\r\n     *\r\n     *                 bind.valueOf(loginInput).to(model, \"login\");\r\n     *                 bind.valueOf(passwordInput).to(model, \"password\");\r\n     *\r\n     *                 this.login = izi.perform(doLogin).when(\"click\").on(loginButton);\r\n     *             },\r\n     *\r\n     *             iziPreDestroy: function () {\r\n     *                 // you can throw new Error() here if you don't want to destroy context for any reason\r\n     *             }\r\n     *\r\n     *             iziDestroy: function () {\r\n     *                 this.bind.unbindAll();\r\n     *                 this.login.stopObserving();\r\n     *             }\r\n     *         }\r\n     *     });\r\n     *\r\n     *     context.destroy();\r\n     *\r\n     * @member Izi.ioc.BeansContext\r\n     * @return {boolean} true when destroying was successful, false when any of beans thrown an exception in iziPreDestroy() method\r\n     * @since 1.4.0\r\n     */\r\n    BeansContext.prototype.destroy = function () {\r\n        var destroyDispatcher = this.destroyDispatcher,\r\n            preDestroyEvent = createPreDestroyEvent();\r\n\r\n        destroyDispatcher.dispatchEvent(\"preDestroy\", [preDestroyEvent]);\r\n\r\n        if (preDestroyEvent.isDestroyPrevented()) {\r\n            return false;\r\n        }\r\n\r\n        var shouldDestroy = this.doPreDestroy();\r\n\r\n        if (!shouldDestroy) {\r\n            return false;\r\n        }\r\n\r\n        destroyDispatcher.dispatchEvent(\"destroy\");\r\n        this.doDestroy();\r\n\r\n        return true;\r\n    };\r\n\r\n    BeansContext.prototype.doPreDestroy = function () {\r\n        return module.utils.every(this.beansBuilders, function (beanBuilder) {\r\n            try {\r\n                beanBuilder.preDestroyCreatedBeans();\r\n                return true;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        });\r\n    };\r\n\r\n    BeansContext.prototype.doDestroy = function () {\r\n        module.utils.forEach(this.beansBuilders, function (beanBuilder) {\r\n            beanBuilder.destroyCreatedBeans();\r\n        });\r\n        this.beansBuilders = [];\r\n        this.beans = undefined;\r\n        this.parentContext = undefined;\r\n        this.destroyDispatcher = undefined;\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Find bean builder by its id or type\r\n     * @member Izi.ioc.BeansContext\r\n     * @private\r\n     * @param {String/Function} beanIdOrType\r\n     * @return {Izi.ioc.bean.BeanBuilder}\r\n     */\r\n    BeansContext.prototype.findBeanBuilder = function (beanIdOrType) {\r\n        var foundBuilder = null;\r\n\r\n        module.utils.forEach(this.beansBuilders, function (factory) {\r\n            if (factory.matches(beanIdOrType)) {\r\n                if (foundBuilder) {\r\n                    throw new Error(\"Ambiguous reference to bean by type. Please refer by id.\");\r\n                }\r\n                foundBuilder = factory;\r\n            }\r\n        });\r\n\r\n        if (!foundBuilder && this.parentContext !== undefined) {\r\n            foundBuilder = this.parentContext.findBeanBuilder(beanIdOrType);\r\n        }\r\n\r\n        return foundBuilder;\r\n    };\r\n\r\n    module.ioc.BeansContext = BeansContext;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../utils/getCallerLineProvider.js\r\n * @requires ../utils/typeOf.js\r\n * @requires ../utils/ClassNotFound.js\r\n * @requires ../utils/typeOf.js\r\n * @requires bean/NoBeanMatched.js\r\n */\r\n!function (module) {\r\n\r\n    function defaultInjector(target, prop, dependency) {\r\n        target[prop] = dependency;\r\n    }\r\n\r\n    function defaultDependencyConverter(dependency) {\r\n        return dependency;\r\n    }\r\n\r\n    /**\r\n     * Injection marker for beans arguments and properties.\r\n     * @class Izi.ioc.Injection\r\n     * @constructor\r\n     * @private\r\n     * @param {String|Function} beanIdOrType Bean id or constructor function or dotted string class definition\r\n     */\r\n    var Injection = function Izi_ioc_Injection(beanIdOrType) {\r\n        this.beanIdOrType = beanIdOrType;\r\n        this.getCallerLine = module.utils.getCallerLineProvider(2);\r\n        this.injector = defaultInjector;\r\n        this.dependencyConverter = defaultDependencyConverter;\r\n    };\r\n\r\n    /**\r\n     * @member Izi.ioc.Injection\r\n     * @private\r\n     * @return {String}\r\n     */\r\n    Injection.prototype.getBeanNotFoundMessage = function() {\r\n        var beanName;\r\n        if (module.utils.typeOf(this.beanIdOrType) === \"Function\") {\r\n            beanName = this.beanIdOrType.name || this.beanIdOrType;\r\n        } else {\r\n            beanName = this.beanIdOrType;\r\n        }\r\n        return \"Bean: `\" + beanName + \"` couldn't be found from injection at line:\\n\" + this.getCallerLine();\r\n    };\r\n\r\n    /**\r\n     * Delegates get bean\r\n     * @member Izi.ioc.Injection\r\n     * @private\r\n     * @param {Izi.ioc.BeansContext} beansContext\r\n     * @return {*}\r\n     */\r\n    Injection.prototype.resolveBean = function (beansContext) {\r\n        var bean;\r\n        try {\r\n            bean = beansContext.getBean(this.beanIdOrType);\r\n        } catch (e) {\r\n            if (e instanceof module.utils.ClassNotFound || e instanceof module.ioc.bean.NoBeanMatched) {\r\n                throw new Error(this.getBeanNotFoundMessage());\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        return this.dependencyConverter(bean);\r\n    };\r\n\r\n    /**\r\n     * Warning: use only for property injection! It doesn't work for constructor argument injection.\r\n     *\r\n     * The default property injection just set dependency as property in following code:\r\n     *\r\n     *     function defaultInjector(target, prop, dependency) {\r\n     *         target[prop] = dependency;\r\n     *     }\r\n     *\r\n     * If you want to inject dependency in different way you may use custom injector function:\r\n     *\r\n     *     userModel: izi.inject(\"userModel\").by(function (target, prop, dependency) {\r\n     *         target.setUserModel(dependency);\r\n     *     });\r\n     *\r\n     * Notice: `dependency` argument is processed by dependency converter set by `.through()` or set by `.property()`\r\n     *\r\n     * @member Izi.ioc.Injection\r\n     * @param {function(target, prop, dependency)} injector function which will be used to inject dependency as property.\r\n     * @return {Izi.ioc.Injection}\r\n     */\r\n    Injection.prototype.by = function (injector) {\r\n        if (module.utils.typeOf(injector) !== \"Function\") {\r\n            throw new Error(\"Injector should be a function with target, prop, dependency arguments\");\r\n        }\r\n        this.injector = injector;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * The default dependency converter returns just the dependency as in following code:\r\n     *\r\n     *     function defaultDependencyConverter(dependency) {\r\n     *         return dependency;\r\n     *     }\r\n     *\r\n     * If you want to inject transformed dependency, you may use custom dependency converter:\r\n     *\r\n     *     userModel: izi.inject(\"userModel\").trough(function (dependency) {\r\n     *         return dependency.toJSON();\r\n     *     });\r\n     *\r\n     * @member Izi.ioc.Injection\r\n     * @param {function(dependency):*} dependencyConverter function which will be used to inject dependency as property.\r\n     * @return {Izi.ioc.Injection}\r\n     */\r\n    Injection.prototype.through = function (dependencyConverter) {\r\n        if (module.utils.typeOf(dependencyConverter) !== \"Function\") {\r\n            throw new Error(\"Dependency converter should be a function with dependency argument\");\r\n        }\r\n        this.dependencyConverter = dependencyConverter;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Inject value of `dependency[property]` instead of `dependency`\r\n     *\r\n     *     firstName: izi.inject(\"userModel\").property(\"firstName\")\r\n     *\r\n     * @param {String} property\r\n     * @returns {Izi.ioc.Injection}\r\n     */\r\n    Injection.prototype.property = function (property) {\r\n        return this.through(function (dependency) {\r\n            return dependency[property];\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Delegates find bean builder\r\n     * @member Izi.ioc.Injection\r\n     * @private\r\n     * @param {Izi.ioc.BeansContext} beansContext\r\n     * @return {Izi.ioc.bean.BeanBuilder}\r\n     */\r\n    Injection.prototype.findBeanBuilder = function (beansContext) {\r\n        var beanBuilder = beansContext.findBeanBuilder(this.beanIdOrType);\r\n        if (beanBuilder === null) {\r\n            throw new Error(this.getBeanNotFoundMessage());\r\n        }\r\n        return beanBuilder;\r\n    };\r\n\r\n    /**\r\n     * Marker field to use instead of: ... instanceof Izi.ioc.Injection\r\n     * @member Izi.ioc.Injection\r\n     * @private\r\n     * @type {Boolean}\r\n     */\r\n    Injection.prototype.isIziInjection = true;\r\n\r\n    module.ioc.Injection = Injection;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires ../../utils/hasOwnProperty.js\r\n * @requires ../../utils/getClassByName.js\r\n */\r\n!function(module) {\r\n    module.ioc.bean.createInstance = function (Clazz, args, props, beansContext) {\r\n\r\n        function resolveArguments(args, beansContext) {\r\n            var i, arg, result = [];\r\n            for (i = 0; i < args.length; i = i + 1) {\r\n                arg = args[i];\r\n                if (arg && arg.isIziInjection) {\r\n                    result.push(arg.resolveBean(beansContext));\r\n                } else {\r\n                    result.push(arg);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function applyProps(instance, props) {\r\n            if (props !== undefined) {\r\n                for (var prop in props) {\r\n                    if (module.utils.hasOwnProperty(props, prop)) {\r\n                        instance[prop] = props[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (module.utils.typeOf(Clazz) === \"String\") {\r\n            Clazz = module.utils.getClassByName(Clazz, beansContext.globals);\r\n        }\r\n\r\n        var a = resolveArguments(args, beansContext),\r\n            argsCount = a.length,\r\n            instance;\r\n\r\n        if (argsCount === 0) {\r\n            instance = new Clazz();\r\n        } else if (argsCount === 1) {\r\n            instance = new Clazz(a[0]);\r\n        } else if (argsCount === 2) {\r\n            instance = new Clazz(a[0], a[1]);\r\n        } else if (argsCount === 3) {\r\n            instance = new Clazz(a[0], a[1], a[2]);\r\n        } else if (argsCount === 4) {\r\n            instance = new Clazz(a[0], a[1], a[2], a[3]);\r\n        } else if (argsCount === 5) {\r\n            instance = new Clazz(a[0], a[1], a[2], a[3], a[4]);\r\n        } else if (argsCount === 6) {\r\n            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5]);\r\n        } else if (argsCount === 7) {\r\n            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\r\n        } else if (argsCount === 8) {\r\n            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);\r\n        } else if (argsCount === 9) {\r\n            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\r\n        } else if (argsCount === 10) {\r\n            instance = new Clazz(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]);\r\n        } else {\r\n            throw new Error(\"Too many arguments given\");\r\n        }\r\n\r\n        applyProps(instance, props);\r\n\r\n        return instance;\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires createInstance.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * Singleton strategy used in {@link Izi.ioc.bean.BeanBuilder}\r\n     * @class Izi.ioc.bean.SingletonStrategy\r\n     * @private\r\n     * @constructor\r\n     * @param {Izi.ioc.Config} config\r\n     */\r\n    var SingletonStrategy = function Izi_ioc_bean_SingletonStrategy(config) {\r\n        this.Clazz = config.getClazz();\r\n        this.args = config.getArguments();\r\n        this.props = config.getProperties();\r\n        this.instance = undefined;\r\n    };\r\n\r\n    SingletonStrategy.prototype.createInstance = function (beansContext) {\r\n        if (!this.instance) {\r\n            this.instance = module.ioc.bean.createInstance(this.Clazz, this.args, this.props, beansContext);\r\n        }\r\n\r\n        return this.instance;\r\n    };\r\n\r\n    SingletonStrategy.prototype.init = function (beansContext) {\r\n        return this.createInstance(beansContext);\r\n    };\r\n\r\n    SingletonStrategy.prototype.create = function (beansContext) {\r\n        return this.createInstance(beansContext);\r\n    };\r\n\r\n    SingletonStrategy.prototype.matchesByType = function (type) {\r\n        return type === this.Clazz;\r\n    };\r\n\r\n    SingletonStrategy.prototype.getArguments = function () {\r\n        return this.args;\r\n    };\r\n\r\n    module.ioc.bean.SingletonStrategy = SingletonStrategy;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires createInstance.js\r\n */\r\n!function(module) {\r\n    /**\r\n     * Lazy Singleton strategy used in {@link Izi.ioc.bean.BeanBuilder}\r\n     * @class Izi.ioc.bean.LazySingletonStrategy\r\n     * @private\r\n     * @constructor\r\n     * @param {Izi.ioc.Config} config\r\n     */\r\n    var LazySingletonStrategy = function Izi_ioc_bean_LazySingletonStrategy(config) {\r\n        this.Clazz = config.getClazz();\r\n        this.args = config.getArguments();\r\n        this.props = config.getProperties();\r\n        this.instance = undefined;\r\n    };\r\n\r\n    LazySingletonStrategy.prototype.init = function (context) {\r\n        return null;\r\n    };\r\n\r\n    LazySingletonStrategy.prototype.create = function (context) {\r\n        if (!this.instance) {\r\n            this.instance = module.ioc.bean.createInstance(this.Clazz, this.args, this.props, context);\r\n        }\r\n\r\n        return this.instance;\r\n    };\r\n\r\n    LazySingletonStrategy.prototype.matchesByType = function (type) {\r\n        return type === this.Clazz;\r\n    };\r\n\r\n    LazySingletonStrategy.prototype.getArguments = function () {\r\n        return this.args;\r\n    };\r\n    \r\n    module.ioc.bean.LazySingletonStrategy = LazySingletonStrategy;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires createInstance.js\r\n */\r\n!function(module) {\r\n    /**\r\n     * Prototype strategy used in {@link Izi.ioc.bean.BeanBuilder}\r\n     * @class Izi.ioc.bean.PrototypeStrategy\r\n     * @private\r\n     * @constructor\r\n     * @param {Izi.ioc.Config} config\r\n     */\r\n    var PrototypeStrategy = function Izi_ioc_bean_PrototypeStrategy(config) {\r\n        this.Clazz = config.getClazz();\r\n        this.args = config.getArguments();\r\n        this.props = config.getProperties();\r\n    };\r\n\r\n    PrototypeStrategy.prototype.init = function (beansContext) {\r\n        return null;\r\n    };\r\n\r\n    PrototypeStrategy.prototype.create = function (beansContext) {\r\n        return module.ioc.bean.createInstance(this.Clazz, this.args, this.props, beansContext);\r\n    };\r\n\r\n    PrototypeStrategy.prototype.matchesByType = function (type) {\r\n        return type === this.Clazz;\r\n    };\r\n\r\n    PrototypeStrategy.prototype.getArguments = function () {\r\n        return this.args;\r\n    };\r\n\r\n    module.ioc.bean.PrototypeStrategy = PrototypeStrategy;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires capitalize.js\r\n */\r\n!function (module) {\r\n    /**\r\n     * @member Izi.utils\r\n     * @method\r\n     * @since 1.5.0\r\n     * @private\r\n     * @param {String} name\r\n     * @return {String}\r\n     */\r\n    module.utils.setterOf = function (name) {\r\n        return \"set\" + module.utils.capitalize(name);\r\n    };\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires Observable.js\r\n * @requires ../utils/getterOf.js\r\n * @requires ../utils/setterOf.js\r\n * @requires ../utils/typeOf.js\r\n */\r\n!function (module) {\r\n\r\n    var forEach = module.utils.forEach;\r\n\r\n    function normalizeFields(fields) {\r\n        var result = [];\r\n        forEach(fields, function (field) {\r\n            field = module.utils.typeOf(field) === \"Object\" ? field : {name: field};\r\n            field.getter = module.utils.getterOf(field.name);\r\n            field.setter = module.utils.setterOf(field.name);\r\n            result.push(field);\r\n        });\r\n        return result;\r\n    }\r\n\r\n    function hasToPlainObjectMethod(value) {\r\n        return value && module.utils.typeOf(value.toPlainObject) === \"Function\";\r\n    }\r\n\r\n    function implementGetterAndSetter(Class, name, getter, setter) {\r\n\r\n        Class.prototype[name] = function (value) {\r\n            if (arguments.length === 0) {\r\n                return this[getter]();\r\n            } else if (arguments.length === 1) {\r\n                return this[setter](value);\r\n            } else {\r\n                throw new Error(\"Too many arguments. Setter function requires exactly one argument\");\r\n            }\r\n        };\r\n\r\n        Class.prototype[getter] = function () {\r\n            return this.get(name);\r\n        };\r\n\r\n        Class.prototype[setter] = function (value) {\r\n            return this.set(name, value);\r\n        };\r\n    }\r\n\r\n    function createInitialData(fields) {\r\n        var data = {};\r\n\r\n        forEach(fields, function (field) {\r\n            if (field.hasOwnProperty(\"defaultValue\")) {\r\n                data[field.name] = field.defaultValue;\r\n            } else if (field.hasOwnProperty(\"initialValue\")) {\r\n                data[field.name] = field.initialValue;\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * See [Model guide](#guide/model) for usage documentation.\r\n     *\r\n     * @extends Izi.model.Observable\r\n     * @class Izi.model.Model\r\n     * @constructor\r\n     */\r\n    var Model = function Izi_Model() {\r\n        Model.upper.constructor.apply(this, arguments);\r\n        this.init();\r\n    };\r\n\r\n    module.utils.inherit(Model, module.model.Observable);\r\n\r\n    /**\r\n     * @member Izi.model.Model\r\n     * @private\r\n     * @type {Boolean}\r\n     */\r\n    Model.prototype.isIziModel = true;\r\n\r\n    /**\r\n     * Abstract init method called from constructor\r\n     * @member Izi.model.Model\r\n     * @protected\r\n     */\r\n    Model.prototype.init = function () {\r\n    };\r\n\r\n    /**\r\n     * Retrieves value of given property name\r\n     * @member Izi.model.Model\r\n     * @param {String} propertyName\r\n     * @return {*}\r\n     */\r\n    Model.prototype.get = function (propertyName) {\r\n        return this.data[propertyName];\r\n    };\r\n\r\n    /**\r\n     * Updates value of given property name and returns own model instance (this).\r\n     * @member Izi.model.Model\r\n     * @fires change\r\n     * @fires propertyNameChange\r\n     * @param {String|Object} propertyName or map of pairs property=>value\r\n     * @param {*} [value]\r\n     * @return {Izi.model.Model}\r\n     */\r\n    Model.prototype.set = function (propertyName, value) {\r\n\r\n        if (arguments.length === 1 && module.utils.typeOf(propertyName) === \"Object\") {\r\n            for (var prop in propertyName) {\r\n                if (propertyName.hasOwnProperty(prop)) {\r\n                    this.set(prop, propertyName[prop]);\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        var currentValue = this.data[propertyName];\r\n\r\n        if (!this.equals(currentValue, value)) {\r\n            this.data[propertyName] = value;\r\n            this.dispatchChange(propertyName, value, currentValue);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Fires notifications about value changes. This method is used internally by {@link Izi.model.Model#set} method.\r\n     * Firstly is fired event `\"change\"` and after that is fired event with name corresponding to `propertyName`.\r\n     * For example for `dispatchChange(\"firstName\")` will be fired two events: `\"change\"` and `\"firstNameChange\"`.\r\n     *\r\n     * @fires change\r\n     * @fires propertyNameChange\r\n     * @param {String} propertyName\r\n     * @param {*} [newValue]\r\n     * @param {*} [oldValue]\r\n     */\r\n    Model.prototype.dispatchChange = function (propertyName, newValue, oldValue) {\r\n        this.dispatchEvent(propertyName + \"Change\", [newValue, oldValue]);\r\n        this.dispatchEvent(\"change\", [propertyName, newValue, oldValue]);\r\n    };\r\n\r\n    /**\r\n     * Method used to detect if new value that is pretended to be set is different to the old one. Override\r\n     * this method if you want to use custom equals function.\r\n     *\r\n     * @param {*} val1\r\n     * @param {*} val2\r\n     * @returns {Boolean}\r\n     */\r\n    Model.prototype.equals = function (val1, val2) {\r\n        if (module.utils.typeOf(val1) === \"Array\" && module.utils.typeOf(val2) === \"Array\") {\r\n            return this.equalsArray(val1, val2);\r\n        }\r\n\r\n        return val1 === val2;\r\n    };\r\n\r\n    /**\r\n     * This method is used in default {@link Izi.model.Model#equals} method.\r\n     *\r\n     * @param arr1\r\n     * @param arr2\r\n     * @returns {boolean}\r\n     */\r\n    Model.prototype.equalsArray = function (arr1, arr2) {\r\n        if (arr1.length !== arr2.length) {\r\n            return false;\r\n        }\r\n\r\n        for (var i = 0; i < arr1.length; i++) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    Model.prototype.iziObserveProperty = function (property, propertyChangeCallback) {\r\n        var me = this,\r\n            propertyChangeEvent = property + \"Change\";\r\n\r\n        me.addListener(propertyChangeEvent, propertyChangeCallback);\r\n        return function () {\r\n            me.removeListener(propertyChangeEvent, propertyChangeCallback);\r\n        }\r\n    };\r\n\r\n    Model.prototype.iziObserveWidget = function (eventConfig, action, scope, eventOptions) {\r\n        var me = this,\r\n            eventType = eventConfig.getEventType();\r\n\r\n        me.addListener(eventType, action, scope);\r\n        return function () {\r\n            me.removeListener(eventType, action);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Exports all declared fields in `field: []` section using short getters like `firstName()`.\r\n     *\r\n     *     var User = izi.modelOf({\r\n     *         fields: [\"firstName\", \"lastName\"]\r\n     *     });\r\n     *\r\n     *     var john = new User().firstName(\"John\").lastName(\"Smith\");\r\n     *     john.toPlainObject(); // {firstName: \"John\", lastName: \"Smith\"}\r\n     *\r\n     * When field value is an Array, then it will be converted to array of values. If any field or array item has\r\n     * `.toPlainObject()` method, then it will be called to get result.\r\n     *\r\n     * Circular references between models are resolved as circular references between plain objects.\r\n     *\r\n     *     var TreeItem = izi.modelOf({\r\n     *         fields: [\"children\", \"parent\"]\r\n     *     });\r\n     *\r\n     *     var root = new TreeItem();\r\n     *     var child1 = new TreeItem().parent(root);\r\n     *     var child2 = new TreeItem().parent(root);\r\n     *     root.children([child1, child2]);\r\n     *\r\n     *     root.toPlainObject(); // {children: [{parent: *refToRoot*},\r\n     *                           //             {parent: *refToRoot*}] }\r\n     *\r\n     * If you have custom getter which is not declared in `fields` section you may override toPlainObject method:\r\n     *\r\n     *     var User = izi.modelOf({\r\n     *         fields: [\"firstName\", \"lastName\"],\r\n     *\r\n     *         getFullName: function () {\r\n     *             return this.firstName() + \" \" + this.lastName();\r\n     *         },\r\n     *\r\n     *         toPlainObject: function () {\r\n     *\r\n     *             // call original implementation that converts firstName and lastName\r\n     *             var plainObject = User.upper.toPlainObject.call(this);\r\n     *\r\n     *             // add your custom getters here\r\n     *             plainObject.fullName = this.getFullName();\r\n     *\r\n     *             return plainObject;\r\n     *         }\r\n     *     });\r\n     *\r\n     *     var john = new User().firstName(\"John\").lastName(\"Smith\");\r\n     *     john.toPlainObject(); // {firstName: \"John\", lastName: \"Smith\", fullName: \"John Smith\"}\r\n     *\r\n     * @returns {Object}\r\n     * @since 1.5.0\r\n     */\r\n    Model.prototype.toPlainObject = function () {\r\n        var result = {},\r\n            arrayResult,\r\n            circularCopyProp = \"__iziCircularCopy__\",\r\n            wasVisited = circularCopyProp in this,\r\n            cache = this[circularCopyProp];\r\n\r\n        if (wasVisited) {\r\n            return cache();\r\n        }\r\n\r\n        this[circularCopyProp] = function () {\r\n            return result;\r\n        };\r\n\r\n        forEach(this.fields, function (field) {\r\n            var value = this[field.getter]();\r\n\r\n            if (hasToPlainObjectMethod(value)) {\r\n                result[field.name] = value.toPlainObject();\r\n            } else if (module.utils.typeOf(value) === \"Array\") {\r\n                arrayResult = [];\r\n                forEach(value, function (item) {\r\n                    if (hasToPlainObjectMethod(item)) {\r\n                        arrayResult.push(item.toPlainObject());\r\n                    } else {\r\n                        arrayResult.push(item);\r\n                    }\r\n                });\r\n                result[field.name] = arrayResult;\r\n            } else if (value && module.utils.typeOf(value.forEach) === \"Function\") {\r\n                arrayResult = [];\r\n                value.forEach(function (item) {\r\n                    if (hasToPlainObjectMethod(item)) {\r\n                        arrayResult.push(item.toPlainObject());\r\n                    } else {\r\n                        arrayResult.push(item);\r\n                    }\r\n                });\r\n                result[field.name] = arrayResult;\r\n            } else {\r\n                result[field.name] = value;\r\n            }\r\n        }, this);\r\n\r\n        delete this[circularCopyProp];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * @param config\r\n     * @return {Function}\r\n     */\r\n    Model.define = function (config) {\r\n\r\n        var fields = normalizeFields(config.fields),\r\n            Class = function () {\r\n                this.data = createInitialData(fields);\r\n                this.fields = fields;\r\n                Class.upper.constructor.apply(this);\r\n            };\r\n        module.utils.inherit(Class, Model);\r\n\r\n        forEach(fields, function (field) {\r\n            implementGetterAndSetter(Class, field.name, field.getter, field.setter);\r\n        });\r\n\r\n        for (var key in config) {\r\n            if (module.utils.hasOwnProperty(config, key) && key != 'fields') {\r\n                Class.prototype[key] = config[key];\r\n            }\r\n        }\r\n\r\n        return Class;\r\n    };\r\n\r\n\r\n    module.model.Model = Model;\r\n\r\n    /**\r\n     * @event propertyNameChange\r\n     * Fired when new value of property `\"propertyName\"` has been already set. Each property fires its own event so you should\r\n     * register listener of `firstName` property using following code: `model.addListener(\"firstNameChange\", handler)`\r\n     *\r\n     * @param {*} newValue new value\r\n     * @param {*} oldValue current value\r\n     */\r\n\r\n    /**\r\n     * @event change\r\n     * Fired when new value of property has been already set.\r\n     * @param {String} property property name that its value has changed\r\n     * @param {*} newValue current value\r\n     * @param {*} oldValue previous value\r\n     */\r\n\r\n    /** @ignore function: () { */\r\n}(Izi);\r\n\r\n/**\r\n * @ignore\r\n * @requires EventConfig.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * @class Izi.events.KeyboardConfig\r\n     * @extends Izi.events.EventConfig\r\n     * @constructor\r\n     * @private\r\n     * @param {String} eventType\r\n     */\r\n    var KeyboardConfig = function Izi_events_KeyboardConfig(eventType) {\r\n        module.events.EventConfig.apply(this, arguments);\r\n        this.expectedKeyCode = 0;\r\n    };\r\n    KeyboardConfig.prototype = new module.events.EventConfig();\r\n    KeyboardConfig.prototype.constructor = KeyboardConfig;\r\n\r\n    /**\r\n     * @member Izi.events.KeyboardConfig\r\n     * @private\r\n     * @type {Boolean}\r\n     */\r\n    KeyboardConfig.prototype.isKeyboardEventConfig = true;\r\n\r\n    /**\r\n     * Setup custom expected keyCode. Use it only when you can't find desired key in methods below:\r\n     * <code>izi.events.keyDown().ENTER()</code> etc.\r\n     * @member Izi.events.KeyboardConfig\r\n     * @param {Number} value\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.keyCode = function (value) {\r\n        this.expectedKeyCode = value;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns expected key code\r\n     * @member Izi.events.KeyboardConfig\r\n     * @private\r\n     * @return {Number}\r\n     */\r\n    KeyboardConfig.prototype.getExpectedKeyCode = function () {\r\n        return this.expectedKeyCode;\r\n    };\r\n\r\n    /**\r\n     * Setup BACKSPACE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.BACKSPACE = function () {\r\n        return this.keyCode(8);\r\n    };\r\n    \r\n    /**\r\n     * Setup TAB key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.TAB = function () {\r\n        return this.keyCode(9);\r\n    };\r\n    \r\n    /**\r\n     * Setup NUM_CENTER key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_CENTER = function () {\r\n        return this.keyCode(12);\r\n    };\r\n\r\n    /**\r\n     * Setup ENTER key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.ENTER = function () {\r\n        return this.keyCode(13);\r\n    };\r\n    \r\n    /**\r\n     * Setup RETURN key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.RETURN = function () {\r\n        return this.keyCode(13);\r\n    };\r\n    \r\n    /**\r\n     * Setup SHIFT key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.SHIFT = function () {\r\n        this.shift(); // If you press SHIFT key - event modifier will be set to true, so we need to also expect that.\r\n        return this.keyCode(16);\r\n    };\r\n    \r\n    /**\r\n     * Setup CTRL key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.CTRL = function () {\r\n        this.ctrl(); // If you press CTRL key - event modifier will be set to true, so we need to also expect that.\r\n        return this.keyCode(17);\r\n    };\r\n    \r\n    /**\r\n     * Setup ALT key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.ALT = function () {\r\n        this.alt(); // If you press ALT key - event modifier will be set to true, so we need to also expect that.\r\n        return this.keyCode(18);\r\n    };\r\n    \r\n    /**\r\n     * Setup PAUSE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.PAUSE = function () {\r\n        return this.keyCode(19);\r\n    };\r\n    \r\n    /**\r\n     * Setup CAPS_LOCK key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.CAPS_LOCK = function () {\r\n        return this.keyCode(20);\r\n    };\r\n    \r\n    /**\r\n     * Setup ESC key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.ESC = function () {\r\n        return this.keyCode(27);\r\n    };\r\n    \r\n    /**\r\n     * Setup SPACE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.SPACE = function () {\r\n        return this.keyCode(32);\r\n    };\r\n    \r\n    /**\r\n     * Setup PAGE_UP key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.PAGE_UP = function () {\r\n        return this.keyCode(33);\r\n    };\r\n    \r\n    /**\r\n     * Setup PAGE_DOWN key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.PAGE_DOWN = function () {\r\n        return this.keyCode(34);\r\n    };\r\n    \r\n    /**\r\n     * Setup END key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.END = function () {\r\n        return this.keyCode(35);\r\n    };\r\n    \r\n    /**\r\n     * Setup HOME key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.HOME = function () {\r\n        return this.keyCode(36);\r\n    };\r\n    \r\n    /**\r\n     * Setup LEFT key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.LEFT = function () {\r\n        return this.keyCode(37);\r\n    };\r\n    \r\n    /**\r\n     * Setup UP key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.UP = function () {\r\n        return this.keyCode(38);\r\n    };\r\n    \r\n    /**\r\n     * Setup RIGHT key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.RIGHT = function () {\r\n        return this.keyCode(39);\r\n    };\r\n    \r\n    /**\r\n     * Setup DOWN key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.DOWN = function () {\r\n        return this.keyCode(40);\r\n    };\r\n    \r\n    /**\r\n     * Setup PRINT_SCREEN key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.PRINT_SCREEN = function () {\r\n        return this.keyCode(44);\r\n    };\r\n    \r\n    /**\r\n     * Setup INSERT key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.INSERT = function () {\r\n        return this.keyCode(45);\r\n    };\r\n                                                                //\r\n    /**\r\n     * Setup DELETE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.DELETE = function () {\r\n        return this.keyCode(46);\r\n    };\r\n    \r\n    /**\r\n     * Setup ZERO key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.ZERO = function () {\r\n        return this.keyCode(48);\r\n    };\r\n    \r\n    /**\r\n     * Setup ONE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.ONE = function () {\r\n        return this.keyCode(49);\r\n    };\r\n    \r\n    /**\r\n     * Setup TWO key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.TWO = function () {\r\n        return this.keyCode(50);\r\n    };\r\n    \r\n    /**\r\n     * Setup THREE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.THREE = function () {\r\n        return this.keyCode(51);\r\n    };\r\n    \r\n    /**\r\n     * Setup FOUR key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.FOUR = function () {\r\n        return this.keyCode(52);\r\n    };\r\n    \r\n    /**\r\n     * Setup FIVE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.FIVE = function () {\r\n        return this.keyCode(53);\r\n    };\r\n    \r\n    /**\r\n     * Setup SIX key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.SIX = function () {\r\n        return this.keyCode(54);\r\n    };\r\n    \r\n    /**\r\n     * Setup SEVEN key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.SEVEN = function () {\r\n        return this.keyCode(55);\r\n    };\r\n    \r\n    /**\r\n     * Setup EIGHT key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.EIGHT = function () {\r\n        return this.keyCode(56);\r\n    };\r\n    \r\n    /**\r\n     * Setup NINE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NINE = function () {\r\n        return this.keyCode(57);\r\n    };\r\n\r\n    /**\r\n     * Setup A key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.A = function () {\r\n        return this.keyCode(65);\r\n    };\r\n\r\n    /**\r\n     * Setup B key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.B = function () {\r\n        return this.keyCode(66);\r\n    };\r\n\r\n    /**\r\n     * Setup C key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.C = function () {\r\n        return this.keyCode(67);\r\n    };\r\n\r\n    /**\r\n     * Setup D key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.D = function () {\r\n        return this.keyCode(68);\r\n    };\r\n\r\n    /**\r\n     * Setup E key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.E = function () {\r\n        return this.keyCode(69);\r\n    };\r\n\r\n    /**\r\n     * Setup F key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F = function () {\r\n        return this.keyCode(70);\r\n    };\r\n\r\n    /**\r\n     * Setup G key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.G = function () {\r\n        return this.keyCode(71);\r\n    };\r\n\r\n    /**\r\n     * Setup H key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.H = function () {\r\n        return this.keyCode(72);\r\n    };\r\n\r\n    /**\r\n     * Setup I key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.I = function () {\r\n        return this.keyCode(73);\r\n    };\r\n\r\n    /**\r\n     * Setup J key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.J = function () {\r\n        return this.keyCode(74);\r\n    };\r\n\r\n    /**\r\n     * Setup K key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.K = function () {\r\n        return this.keyCode(75);\r\n    };\r\n\r\n    /**\r\n     * Setup L key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.L = function () {\r\n        return this.keyCode(76);\r\n    };\r\n\r\n    /**\r\n     * Setup M key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.M = function () {\r\n        return this.keyCode(77);\r\n    };\r\n\r\n    /**\r\n     * Setup N key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.N = function () {\r\n        return this.keyCode(78);\r\n    };\r\n\r\n    /**\r\n     * Setup O key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.O = function () {\r\n        return this.keyCode(79);\r\n    };\r\n\r\n    /**\r\n     * Setup P key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.P = function () {\r\n        return this.keyCode(80);\r\n    };\r\n\r\n    /**\r\n     * Setup Q key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.Q = function () {\r\n        return this.keyCode(81);\r\n    };\r\n\r\n    /**\r\n     * Setup R key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.R = function () {\r\n        return this.keyCode(82);\r\n    };\r\n\r\n    /**\r\n     * Setup S key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.S = function () {\r\n        return this.keyCode(83);\r\n    };\r\n\r\n    /**\r\n     * Setup T key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.T = function () {\r\n        return this.keyCode(84);\r\n    };\r\n\r\n    /**\r\n     * Setup U key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.U = function () {\r\n        return this.keyCode(85);\r\n    };\r\n\r\n    /**\r\n     * Setup V key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.V = function () {\r\n        return this.keyCode(86);\r\n    };\r\n\r\n    /**\r\n     * Setup W key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.W = function () {\r\n        return this.keyCode(87);\r\n    };\r\n\r\n    /**\r\n     * Setup X key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.X = function () {\r\n        return this.keyCode(88);\r\n    };\r\n\r\n    /**\r\n     * Setup Y key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.Y = function () {\r\n        return this.keyCode(89);\r\n    };\r\n\r\n    /**\r\n     * Setup Z key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.Z = function () {\r\n        return this.keyCode(90);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_ZERO key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_ZERO = function () {\r\n        return this.keyCode(96);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_ONE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_ONE = function () {\r\n        return this.keyCode(97);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_TWO key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_TWO = function () {\r\n        return this.keyCode(98);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_THREE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_THREE = function () {\r\n        return this.keyCode(99);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_FOUR key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_FOUR = function () {\r\n        return this.keyCode(100);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_FIVE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_FIVE = function () {\r\n        return this.keyCode(101);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_SIX key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_SIX = function () {\r\n        return this.keyCode(102);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_SEVEN key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_SEVEN = function () {\r\n        return this.keyCode(103);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_EIGHT key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_EIGHT = function () {\r\n        return this.keyCode(104);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_NINE key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_NINE = function () {\r\n        return this.keyCode(105);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_MULTIPLY key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_MULTIPLY = function () {\r\n        return this.keyCode(106);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_PLUS key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_PLUS = function () {\r\n        return this.keyCode(107);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_MINUS key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_MINUS = function () {\r\n        return this.keyCode(109);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_PERIOD key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_PERIOD = function () {\r\n        return this.keyCode(110);\r\n    };\r\n\r\n    /**\r\n     * Setup NUM_DIVISION key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.NUM_DIVISION = function () {\r\n        return this.keyCode(111);\r\n    };\r\n\r\n    /**\r\n     * Setup F1 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F1 = function () {\r\n        return this.keyCode(112);\r\n    };\r\n\r\n    /**\r\n     * Setup F2 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F2 = function () {\r\n        return this.keyCode(113);\r\n    };\r\n\r\n    /**\r\n     * Setup F3 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F3 = function () {\r\n        return this.keyCode(114);\r\n    };\r\n\r\n    /**\r\n     * Setup F4 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F4 = function () {\r\n        return this.keyCode(115);\r\n    };\r\n\r\n    /**\r\n     * Setup F5 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F5 = function () {\r\n        return this.keyCode(116);\r\n    };\r\n\r\n    /**\r\n     * Setup F6 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F6 = function () {\r\n        return this.keyCode(117);\r\n    };\r\n\r\n    /**\r\n     * Setup F7 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F7 = function () {\r\n        return this.keyCode(118);\r\n    };\r\n\r\n    /**\r\n     * Setup F8 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F8 = function () {\r\n        return this.keyCode(119);\r\n    };\r\n\r\n    /**\r\n     * Setup F9 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F9 = function () {\r\n        return this.keyCode(120);\r\n    };\r\n\r\n    /**\r\n     * Setup F10 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F10 = function () {\r\n        return this.keyCode(121);\r\n    };\r\n\r\n    /**\r\n     * Setup F11 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F11 = function () {\r\n        return this.keyCode(122);\r\n    };\r\n\r\n    /**\r\n     * Setup F12 key as expected to be pressed\r\n     * @member Izi.events.KeyboardConfig\r\n     * @method\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    KeyboardConfig.prototype.F12 = function () {\r\n        return this.keyCode(123);\r\n    };\r\n\r\n    module.events.KeyboardConfig = KeyboardConfig;\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires EventConfig.js\r\n * @requires KeyboardConfig.js\r\n */\r\n!function (module) {\r\n\r\n    /**\r\n     * <code>izi.events.*</code> fluent API entry points. You can use them to define izi behaviors based on more complex events, like:\r\n     *\r\n     *      izi.perform(behavior).when(izi.events.click().shift()).on(button);\r\n     *\r\n     *      izi.perform(behavior).when(izi.events.keyDown().ENTER()).on(textInput);\r\n     *\r\n     *      izi.perform(behavior).when(izi.events.keyDown().F5().preventDefault()).on(document);\r\n     *\r\n     *      izi.perform(behavior).when(izi.events.keyDown().ctrl().alt().ONE()).on(document);\r\n     *\r\n     * @class Izi.events.Events\r\n     */\r\n    var Events = function Izi_events_Events() {\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for desired event type. If you need to watch keyboard events, please use\r\n     * <code>izi.events.keyDown()</code> or <code>izi.events.keyUp()</code> or <code>izi.events.keyboardEvent('keypress')</code>\r\n     * @member Izi.events.Events\r\n     * @param {String} eventType\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.event = function (eventType) {\r\n        return new module.events.EventConfig(eventType);\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder. It is recommended to use only\r\n     * <code>izi.events.keyDown()</code> or <code>izi.events.keyUp()</code>, because of not cross browsers\r\n     * compatibility of \"keyPress\" event.\r\n     * @member Izi.events.Events\r\n     * @param {String} eventType\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    Events.prototype.keyboardEvent = function (eventType) {\r\n        return new module.events.KeyboardConfig(eventType);\r\n    };\r\n\r\n    // -------------------- Keyboard -----------------\r\n\r\n    /**\r\n     * Creates fluent builder for keyboard \"keydown\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    Events.prototype.keyDown = function () {\r\n        return this.keyboardEvent('keydown');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for keyboard \"keyup\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.KeyboardConfig}\r\n     */\r\n    Events.prototype.keyUp = function () {\r\n        return this.keyboardEvent('keyup');\r\n    };\r\n\r\n    // -------------------- HTML Window -----------------\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"afterprint\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.afterPrint = function () {\r\n        return this.event('afterprint');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"beforeprint\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.beforePrint = function () {\r\n        return this.event('beforeprint');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"beforeonload\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.beforeOnLoad = function () {\r\n        return this.event('beforeonload');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"error\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.error = function () {\r\n        return this.event('error');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"haschange\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.hasChange = function () {\r\n        return this.event('haschange');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"load\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.load = function () {\r\n        return this.event('load');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"message\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.message = function () {\r\n        return this.event('message');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"offline\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.offline = function () {\r\n        return this.event('offline');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"line\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.line = function () {\r\n        return this.event('line');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"pagehide\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.pageHide = function () {\r\n        return this.event('pagehide');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"pageshow\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.pageShow = function () {\r\n        return this.event('pageshow');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"popstate\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.popState = function () {\r\n        return this.event('popstate');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"redo\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.redo = function () {\r\n        return this.event('redo');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"resize\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.resize = function () {\r\n        return this.event('resize');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"storage\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.storage = function () {\r\n        return this.event('storage');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"undo\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.undo = function () {\r\n        return this.event('undo');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for html window \"unload\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.unload = function () {\r\n        return this.event('unload');\r\n    };\r\n\r\n    // -------------------- Form element -----------------\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"blur\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.blur = function () {\r\n        return this.event('blur');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"change\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.change = function () {\r\n        return this.event('change');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"contextmenu\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.contextMenu = function () {\r\n        return this.event('contextmenu');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"focus\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.focus = function () {\r\n        return this.event('focus');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"formchange\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.formChange = function () {\r\n        return this.event('formchange');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"forminput\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.formInput = function () {\r\n        return this.event('forminput');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"input\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.input = function () {\r\n        return this.event('input');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"invalid\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.invalid = function () {\r\n        return this.event('invalid');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"reset\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.reset = function () {\r\n        return this.event('reset');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"select\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.select = function () {\r\n        return this.event('select');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for form element \"submit\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.submit = function () {\r\n        return this.event('submit');\r\n    };\r\n\r\n    // -------------------- Mouse -----------------\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"click\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.click = function () {\r\n        return this.event('click');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"dblclick\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.dblClick = function () {\r\n        return this.event('dblclick');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"drag\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.drag = function () {\r\n        return this.event('drag');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"dragend\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.dragEnd = function () {\r\n        return this.event('dragend');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"dragenter\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.dragEnter = function () {\r\n        return this.event('dragenter');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"dragleave\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.dragLeave = function () {\r\n        return this.event('dragleave');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"dragover\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.dragOver = function () {\r\n        return this.event('dragover');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"dragstart\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.dragStart = function () {\r\n        return this.event('dragstart');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"drop\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.drop = function () {\r\n        return this.event('drop');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"mousedown\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.mouseDown = function () {\r\n        return this.event('mousedown');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"mousemove\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.mouseMove = function () {\r\n        return this.event('mousemove');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"mouseout\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.mouseOut = function () {\r\n        return this.event('mouseout');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"mouseover\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.mouseOver = function () {\r\n        return this.event('mouseover');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"mouseup\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.mouseUp = function () {\r\n        return this.event('mouseup');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"mousewheel\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.mouseWheel = function () {\r\n        return this.event('mousewheel');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mouse \"scroll\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.scroll = function () {\r\n        return this.event('scroll');\r\n    };\r\n\r\n    // -------------------- Media -----------------\r\n\r\n    /**\r\n     * Creates fluent builder for media \"abort\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.abort = function () {\r\n        return this.event('abort');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"canplay\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.canPlay = function () {\r\n        return this.event('canplay');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"canplaythrough\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.canPlayThrough = function () {\r\n        return this.event('canplaythrough');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"durationchange\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.durationChange = function () {\r\n        return this.event('durationchange');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"emptied\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.emptied = function () {\r\n        return this.event('emptied');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"ended\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.ended = function () {\r\n        return this.event('ended');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"loadeddata\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.loadedData = function () {\r\n        return this.event('loadeddata');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"loadedmetadata\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.loadedMetaData = function () {\r\n        return this.event('loadedmetadata');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"loadstart\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.loadStart = function () {\r\n        return this.event('loadstart');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"pause\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.pause = function () {\r\n        return this.event('pause');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"play\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.play = function () {\r\n        return this.event('play');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"playing\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.playing = function () {\r\n        return this.event('playing');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"progress\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.progress = function () {\r\n        return this.event('progress');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"ratechange\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.rateChange = function () {\r\n        return this.event('ratechange');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"readystatechange\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.readyStateChange = function () {\r\n        return this.event('readystatechange');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"seeked\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.seeked = function () {\r\n        return this.event('seeked');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"seeking\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.seeking = function () {\r\n        return this.event('seeking');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"stalled\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.stalled = function () {\r\n        return this.event('stalled');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"suspend\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.suspend = function () {\r\n        return this.event('suspend');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"timeupdate\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.timeUpdate = function () {\r\n        return this.event('timeupdate');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"volumechange\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.volumeChange = function () {\r\n        return this.event('volumechange');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for media \"waiting\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.waiting = function () {\r\n        return this.event('waiting');\r\n    };\r\n\r\n    // -------------------- Mobile -----------------\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"touchstart\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.touchStart = function () {\r\n        return this.event('touchstart');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"touchmove\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.touchMove = function () {\r\n        return this.event('touchmove');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"touchend\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.touchEnd = function () {\r\n        return this.event('touchend');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"touchcancel\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.touchCancel = function () {\r\n        return this.event('touchcancel');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"touchenter\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.touchEnter = function () {\r\n        return this.event('touchenter');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"touchlave\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.touchLave = function () {\r\n        return this.event('touchlave');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"gesturestart\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.gestureStart = function () {\r\n        return this.event('gesturestart');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"gesturechange\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.gestureChange = function () {\r\n        return this.event('gesturechange');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"gestureend\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.gestureEnd = function () {\r\n        return this.event('gestureend');\r\n    };\r\n\r\n    /**\r\n     * Creates fluent builder for mobile \"orientationchange\" event.\r\n     * @member Izi.events.Events\r\n     * @return {Izi.events.EventConfig}\r\n     */\r\n    Events.prototype.orientationChange = function () {\r\n        return this.event('orientationchange');\r\n    };\r\n\r\n    module.events.Events = Events;\r\n\r\n}(Izi);\r\n/**\r\n * @ignore\r\n * @requires debug.js\r\n * @requires behavior/register.js\r\n * @requires binding/register.js\r\n * @requires queue/register.js\r\n * @requires utils/typeOf.js\r\n * @requires utils/forEach.js\r\n * @requires utils/arrayContains.js\r\n * @requires ioc/BeansContext.js\r\n * @requires ioc/Config.js\r\n * @requires ioc/Injection.js\r\n * @requires ioc/bean/SingletonStrategy.js\r\n * @requires ioc/bean/LazySingletonStrategy.js\r\n * @requires ioc/bean/PrototypeStrategy.js\r\n * @requires model/Model.js\r\n * @requires events/Events.js\r\n */\r\n!function (module, global) {\r\n\r\n    var frameworks = {},\r\n        sanityCheckMethods = [\"arg\", \"sanityInjectTo\", \"sanityOf\", \"varargOf\"];\r\n\r\n    function initFramework(izi, framework) {\r\n        if (framework.behavior) {\r\n            izi.registerBehaviorImpl(framework.behavior);\r\n        }\r\n        if (framework.binding) {\r\n            izi.registerBindingImpl(framework.binding);\r\n        }\r\n        if (framework.queue) {\r\n            izi.registerQueueImpl(framework.queue);\r\n        }\r\n    }\r\n\r\n    function enableCompatibility(izi) {\r\n        if (global.izi) {\r\n            module.utils.forEach(sanityCheckMethods, function (method) {\r\n                if (global.izi[method]) {\r\n                    izi[method] = global.izi[method];\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @class izi\r\n     * @constructor\r\n     * @param {String|Object} [framework]\r\n     * @param {Object} [globals]\r\n     *\r\n     * All <strong>izi</strong> fluent API entry points.\r\n     */\r\n    var Api = function Izi_Api(framework, globals) {\r\n        this.globals = globals || global;\r\n\r\n        enableCompatibility(this);\r\n\r\n        if (module.utils.typeOf(framework) === \"String\") {\r\n            framework = frameworks[framework];\r\n        }\r\n\r\n        if (framework) {\r\n            this._framework = framework;\r\n            initFramework(this, framework);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates beans context using passed config. It can be one configuration, like:\r\n     *\r\n     *     izi.bakeBeans({beanId: 'value'});\r\n     *\r\n     * Or multiple configurations as an array:\r\n     *\r\n     *     var config1 = {\r\n     *         bean1: 'value 1'\r\n     *     };\r\n     *     var config2 = {\r\n     *         bean2: 'value 2'\r\n     *     };\r\n     *\r\n     *     izi.bakeBeans([config1, config2]);\r\n     *\r\n     * @param {Object|Object[]} config One or multiple configurations\r\n     * @param {Izi.ioc.BeansContext} [parentContext]\r\n     * @return {Izi.ioc.BeansContext}\r\n     */\r\n    Api.prototype.bakeBeans = function (config, parentContext) {\r\n        return new module.ioc.BeansContext(this.globals, config, parentContext).initContext();\r\n    };\r\n\r\n    /**\r\n     * Creates singleton bean definition using passed class type\r\n     *\r\n     * @param {Function|String} clazz constructor function or dotted string class definition\r\n     * @return {Izi.ioc.Config}\r\n     */\r\n    Api.prototype.instantiate = function (clazz) {\r\n        return new module.ioc.Config(clazz, module.ioc.bean.SingletonStrategy, this.globals);\r\n    };\r\n\r\n    /**\r\n     * Creates lazy singleton bean definition using passed class type\r\n     *\r\n     * @param {Function|String} clazz constructor function or dotted string class definition\r\n     * @return {Izi.ioc.Config}\r\n     */\r\n    Api.prototype.lazy = function (clazz) {\r\n        return new module.ioc.Config(clazz, module.ioc.bean.LazySingletonStrategy, this.globals);\r\n    };\r\n\r\n    /**\r\n     * Creates prototype bean definition using passed class type\r\n     * @param {Function|String} clazz constructor function or dotted string class definition\r\n     * @return {Izi.ioc.Config}\r\n     */\r\n    Api.prototype.protoOf = function (clazz) {\r\n        return new module.ioc.Config(clazz, module.ioc.bean.PrototypeStrategy, this.globals);\r\n    };\r\n\r\n    /**\r\n     * Injects dependency by its beanId or class type. It can be used as constructor dependency injection or by\r\n     * property dependency injection.\r\n     *\r\n     * @param {String|Function} beanIdOrType Bean id or constructor function or dotted string class definition\r\n     * @return {Izi.ioc.Injection}\r\n     */\r\n    Api.prototype.inject = function (beanIdOrType) {\r\n        if (!beanIdOrType) {\r\n            throw new Error(\"Trying to inject invalid empty bean\");\r\n        }\r\n        return new module.ioc.Injection(beanIdOrType);\r\n    };\r\n\r\n    /**\r\n     * Init behavior API. You can specify function and scope:\r\n     *\r\n     *     izi.perform(behavior.perform, behavior).when('click').on(button)\r\n     *\r\n     * ... or only behavior ('perform' function will be called by default):\r\n     *\r\n     *     izi.perform(behavior).when('click').on(button)\r\n     *\r\n     * ... or custom event registrar ('register' and 'unregister' functions are required):\r\n     *\r\n     *     var registrar = {\r\n     *\r\n     *         register: function (target) {\r\n     *             target.addEventListener(...);\r\n     *             target.addEventListener(...);\r\n     *             target.addEventListener(...);\r\n     *         },\r\n     *\r\n     *         unregister: function (target) {\r\n     *             target.removeEventListener(...);\r\n     *             target.removeEventListener(...);\r\n     *             target.removeEventListener(...);\r\n     *         }\r\n     *     };\r\n     *\r\n     *     izi.perform(registrar).on(target);\r\n     *\r\n     * ... or nothing to get grouping method:\r\n     *\r\n     *     var perform = izi.perform();\r\n     *\r\n     *     perform(behavior1).when(\"click\").on(button1);\r\n     *     perform(behavior2).when(\"click\").on(button2);\r\n     *\r\n     *     perform.stopObserving(); // will stop observing them all\r\n     *\r\n     * @noSanity\r\n     * @param {Function|Object} functionOrBehaviorOrRegistrar\r\n     * @param {Object} [scope]\r\n     * @return {Izi.behavior.Perform}\r\n     */\r\n    Api.prototype.perform = function (functionOrBehaviorOrRegistrar, scope) {\r\n        throw new Error(\"Register your behavior implementation first: izi.registerBehaviorImpl(Izi.behavior.impl.SomeImpl)\");\r\n    };\r\n\r\n    /**\r\n     * Registers behavior implementation\r\n     *\r\n     * @sanity izi.sanityOf(\"registerBehaviorImpl()\").args(izi.arg(\"impl\").ofObject().havingFunctions(\"observeWidget\", \"observeKeyStroke\").havingProperty(\"defaultPerformFunction\")).check(arguments);\r\n     * @param {Object} impl Behavior implementation config\r\n     * @param {String} impl.defaultPerformFunction Name of default perform function called on behavior\r\n     * @param {Function} impl.observeWidget Function that starts observing widget and returns function that stops observing. This function gets following arguments: <code>widget, eventConfig, action, scope, options</code>\r\n     * @param {Function} impl.observeKeyStroke Function that starts observing keyboard and returns function that stops observing. This function gets following arguments: <code>widget, keyboardConfig, action, scope, options</code>\r\n     */\r\n    Api.prototype.registerBehaviorImpl = function (impl) {\r\n        this.perform = module.behavior.register(impl, this);\r\n    };\r\n\r\n    /**\r\n     * Init binding API\r\n     * @sanity izi.sanityOf(\"bind()\").args().args(izi.arg(\"options\").ofObject()).check(arguments);\r\n     * @param {Object} [options] Advanced options\r\n     * @param {Boolean} [options.auto=true] Start listen for changes automatically.\r\n     * @param {Boolean} [options.executeAtStartup=true] Execute binding immediately after creation. It works only when <code>auto=true</code>.\r\n     * @param {Boolean} [options.debug=false] Log every binding execution on browser's console.\r\n     * @return {Izi.binding.Bind}\r\n     */\r\n    Api.prototype.bind = function (options) {\r\n        throw new Error(\"Register your binding implementation first: izi.registerBindingImpl(Izi.binding.impl.SomeImpl)\");\r\n    };\r\n\r\n    /**\r\n     * Registers binding implementation\r\n     * @sanity izi.sanityOf(\"registerBindingImpl()\").args(izi.arg(\"impl\").ofObject().havingProperties(\"changeObservers\", \"valueReaders\", \"valueWriters\")).check(arguments);izi.sanityOf(\"impl.changeObservers\").args(izi.varargOf(izi.arg().ofFunction())).check(impl.changeObservers);izi.sanityOf(\"impl.valueReaders\").args(izi.varargOf(izi.arg().ofFunction())).check(impl.valueReaders);izi.sanityOf(\"impl.valueWriters\").args(izi.varargOf(izi.arg().ofFunction())).check(impl.valueWriters);\r\n     * @param impl Binding implementation config\r\n     * @param {Function[]} impl.changeObservers Array of change observers functions. These functions get following parameters: <code>source, sourceProperty, target, targetProperty, transferValueFn</code>\r\n     * @param {Function[]} impl.valueReaders Array of functions that can read value from given object and property. These functions get following arguments: <code>object, property</code>\r\n     * @param {Function[]} impl.valueWriters Array of functions that can write value on given object and property. These functions get following arguments: <code>object, property, value</code>\r\n     */\r\n    Api.prototype.registerBindingImpl = function (impl) {\r\n        this.bind = module.binding.register(impl);\r\n    };\r\n\r\n    /**\r\n     * Creates class of izi model. Use this model in your project for data binding only when your framework\r\n     * doesn't provide 'observable' model.\r\n     *\r\n     * @sanity izi.sanityOf(\"izi.modelOf()\").args(izi.arg(\"config\").ofObject().havingProperty(\"fields\")).check(arguments);izi.sanityOf(\"config.fields\").args(izi.varargOf(izi.arg(\"field\").ofObject().havingProperty(\"name\"), izi.arg(\"fieldName\").ofString())).check(config.fields);\r\n     * @param {Object} config Model fields configuration. It must contain <strong>fields</strong> array of fields objects.\r\n     * @param {Array} config.fields Configuration of model fields\r\n     * @return {Function}\r\n     */\r\n    Api.prototype.modelOf = function (config) {\r\n        return module.model.Model.define(config);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @type {Izi.events.Events}\r\n     */\r\n    Api.prototype.events = new module.events.Events();\r\n\r\n    /**\r\n     * Init synchronized queue API\r\n     * @nosanity\r\n     * @param {Object} [config] Queue configuration\r\n     * @param {Object} [config.scope] default scope for all functions executions\r\n     * @param {Number} [config.timeout=\"0\"] default timeout for synchronized tasks - 0 is a default which means no timeout\r\n     * @param {String} [config.debug] use any String as an identifier of the queue that will be logged in browser console\r\n     * @return {Izi.queue.Queue}\r\n     */\r\n    Api.prototype.queue = function (config) {\r\n        throw new Error(\"Register your queue implementation first: izi.registerQueueImpl(Izi.queue.impl.SomeImpl)\");\r\n    };\r\n\r\n    /**\r\n     * Registers queue implementation\r\n     * @sanity izi.sanityOf(\"registerQueueImpl()\").args(izi.arg(\"impl\").ofObject().havingFunctions(\"dispatchEvent\", \"createEventDispatcher\")).check(arguments);\r\n     * @param {Object} impl\r\n     * @param {Function} impl.dispatchEvent\r\n     * @param {Function} impl.createEventDispatcher\r\n     */\r\n    Api.prototype.registerQueueImpl = function (impl) {\r\n        this.queue = module.queue.register(impl, this);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String|Object|null} [framework]\r\n     * @param {Object} [globals]\r\n     * @returns {izi}\r\n     */\r\n    Api.prototype.newInstance = function (framework, globals) {\r\n        return new Api(framework || this._framework, globals);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Object} globals\r\n     * @returns {izi}\r\n     */\r\n    Api.prototype.sandboxed = function (globals) {\r\n        return this.newInstance(null, globals);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} name\r\n     * @param {Object} impl\r\n     * @param {Object} impl.behavior\r\n     * @param {Object} impl.binding\r\n     * @param {Object} impl.queue\r\n     */\r\n    module.registerFramework = function (name, impl) {\r\n        frameworks[name] = impl;\r\n    };\r\n\r\n    Api.prototype.module = module;\r\n    module.Api = Api;\r\n\r\n    izi = new Api();\r\n\r\n}(Izi, this);\r\n        return izi;\r\n    }\r\n    if (typeof define === \"function\" && typeof define.amd === \"object\" && define.amd.vendor !== \"dojotoolkit.org\") {\r\n        define([], amdFactory);\r\n    } else if (typeof exports === 'object') {\r\n        module.exports = amdFactory();\r\n    } else {\r\n        global.izi = amdFactory();\r\n    }\r\n})(this);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../izi-js/dist/izi-js-debug.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __webpack_amd_options__;\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/amd-options.js\n ** module id = 3\n ** module chunks = 0\n **/","export default function MainViewFactory(Vue) {\r\n\r\n    return class MainView {\r\n\r\n        constructor({replace: replace = false, component: component, el: el}) {\r\n            this.el = el;\r\n            this.component = component;\r\n            this.replace = replace;\r\n\r\n            requireOption(\"el\", el);\r\n            requireOption(\"component\", component);\r\n        }\r\n\r\n        iziContext(context) {\r\n            this.context = context;\r\n            this.vueInstance = this._createVueInstance();\r\n        }\r\n\r\n        iziDestroy() {\r\n            this.vueInstance.$destroy(true);\r\n        }\r\n\r\n        _createVueInstance() {\r\n            var context = this.context;\r\n\r\n            return new Vue({\r\n\r\n                el: this.el,\r\n                replace: this.replace,\r\n                template: \"<view-component></view-component>\",\r\n\r\n                components: {\r\n                    \"view-component\": this.component\r\n                },\r\n\r\n                events: {\r\n                    \"izi.wireMe\"(child) {\r\n                        context.wire(child);\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction requireOption(name, value) {\r\n    if (!value) {\r\n        throw new Error(`Option ${name} is required`);\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/main/js/vue-plugin/MainViewFactory.js\n **/","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/helpers/classCallCheck.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/helpers/createClass.js\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/core-js/object/define-property.js\n ** module id = 7\n ** module chunks = 0\n **/","var $ = require('../../modules/$');\nmodule.exports = function defineProperty(it, key, desc){\n  return $.setDesc(it, key, desc);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/~/core-js/library/fn/object/define-property.js\n ** module id = 8\n ** module chunks = 0\n **/","var $Object = Object;\nmodule.exports = {\n  create:     $Object.create,\n  getProto:   $Object.getPrototypeOf,\n  isEnum:     {}.propertyIsEnumerable,\n  getDesc:    $Object.getOwnPropertyDescriptor,\n  setDesc:    $Object.defineProperty,\n  setDescs:   $Object.defineProperties,\n  getKeys:    $Object.keys,\n  getNames:   $Object.getOwnPropertyNames,\n  getSymbols: $Object.getOwnPropertySymbols,\n  each:       [].forEach\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/~/core-js/library/modules/$.js\n ** module id = 9\n ** module chunks = 0\n **/","export default function vueDataInjectorFactory(Vue) {\r\n\r\n    return function vueDataInjector(target, prop, dependency) {\r\n        if (dependency && !dependency.__ob__) {\r\n            new Vue({\r\n                data: {\r\n                    dependency: dependency\r\n                }\r\n            });\r\n        }\r\n        target.$set(prop, dependency);\r\n    }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main/js/vue-plugin/vueDataInjectorFactory.js\n **/","export default function (izi, vueDataInjector) {\r\n    return {\r\n        created: function () {\r\n            unwrap$optionsIziInject(this.$options, izi, vueDataInjector);\r\n            moveInjectionsToVueInstance(this);\r\n            this.$dispatch(\"izi.wireMe\", this);\r\n        }\r\n    };\r\n}\r\n\r\nfunction unwrap$optionsIziInject($options, izi, vueDataInjector) {\r\n    if (!$options.iziInject) {\r\n        return;\r\n    }\r\n\r\n    for (var prop in $options.iziInject) {\r\n        var beanId = $options.iziInject[prop];\r\n        if (prop !== \"data\") {\r\n            $options[prop] = izi.inject(beanId);\r\n        } else {\r\n            unwrapDataInjection($options, izi, vueDataInjector);\r\n        }\r\n    }\r\n}\r\n\r\nfunction unwrapDataInjection($options, izi, vueDataInjector) {\r\n    var data = $options.iziInject.data;\r\n\r\n    if (!data) {\r\n        return;\r\n    }\r\n\r\n    for (var prop in data) {\r\n        var beanId = data[prop];\r\n        $options[prop] = izi.inject(beanId).by(vueDataInjector);\r\n    }\r\n}\r\n\r\nfunction moveInjectionsToVueInstance(vueInstance) {\r\n    for (var prop in vueInstance.$options) {\r\n        var injection = vueInstance.$options[prop];\r\n        if (injection && injection.isIziInjection) {\r\n            vueInstance[prop] = injection;\r\n        }\r\n    }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main/js/vue-plugin/wireMeMixin.js\n **/"],"sourceRoot":""}